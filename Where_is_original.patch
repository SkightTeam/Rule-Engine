From c3e493aee4a09e53142137061034fd5feeb9925e Mon Sep 17 00:00:00 2001
From: Hao Wang <HWonner@gmail.com>
Date: Tue, 11 Jun 2013 16:02:44 -0600
Subject: [PATCH] Where is original

---
 .gitignore                                         |    1 +
 RuleEngine/Utils/Guard.cs                          |  304 +-
 .../Core/Extensions/TypeExtensions.cs              |   32 +
 .../Core/IDependencyBag.cs                         |   14 +
 .../Core/IMockFactory.cs                           |   10 +
 .../Core/ISubjectDependencyBuilder.cs              |   17 +
 .../Core/ISubjectFactory.cs                        |    7 +
 .../Core/ITestState.cs                             |   13 +
 .../Core/Observations/IObservationContext.cs       |   10 +
 .../Core/Observations/ObservationContext.cs        |   70 +
 .../Core/Observations/ObservationContextArgs.cs    |   29 +
 .../Core/Observations/ObservationContextFactory.cs |   16 +
 .../Core/SubjectDependencyBuilder.cs               |   78 +
 .../Core/SubjectFactory.cs                         |   36 +
 .../Core/TestState.cs                              |   83 +
 .../Rhino/RhinoMocksMockFactory.cs                 |   24 +
 .../Rhino/Specification.cs                         |   11 +
 .../Specification.cs                               |   65 +
 Yea.RuleEngine.Tests/Properties/AssemblyInfo.cs    |   72 +-
 .../\346\261\202\346\272\220/AccountSpecs.cs"      |   21 +
 Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.dll   |  Bin 0 -> 317952 bytes
 Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.xml   | 5624 ++++++++++++++++++++
 .../Rhino Mocks/acknowledgements.txt               |    2 +
 Yea.RuleEngine.Tests/Rhino Mocks/license.txt       |   25 +
 Yea.RuleEngine.Tests/Yea.RuleEngine.Tests.csproj   |   28 +
 25 files changed, 6404 insertions(+), 188 deletions(-)
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Extensions/TypeExtensions.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IDependencyBag.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IMockFactory.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectDependencyBuilder.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectFactory.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ITestState.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/IObservationContext.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContext.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextArgs.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextFactory.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectDependencyBuilder.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectFactory.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/TestState.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/RhinoMocksMockFactory.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/Specification.cs
 create mode 100644 Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Specification.cs
 create mode 100644 "Yea.RuleEngine.Tests/ReviewbyHao/\346\261\202\346\272\220/AccountSpecs.cs"
 create mode 100644 Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.dll
 create mode 100644 Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.xml
 create mode 100644 Yea.RuleEngine.Tests/Rhino Mocks/acknowledgements.txt
 create mode 100644 Yea.RuleEngine.Tests/Rhino Mocks/license.txt

diff --git a/.gitignore b/.gitignore
index 31a08b7..fe508c4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,6 +5,7 @@
 *.suo
 *.user
 *.sln.docstates
+*.DotSettings
 
 # Build results
 
diff --git a/RuleEngine/Utils/Guard.cs b/RuleEngine/Utils/Guard.cs
index ba3547f..5ab99af 100644
--- a/RuleEngine/Utils/Guard.cs
+++ b/RuleEngine/Utils/Guard.cs
@@ -1,153 +1,153 @@
-﻿#region Usings
-
-using System;
-using System.Collections;
-using System.Collections.Generic;
-
-#endregion
-
-namespace Yea.RuleEngine.Utils
-{
-    /// <summary>
-    ///     参数验证类
-    /// </summary>
-    public static class Guard
-    {
-        private const string _MSG = "断言失败";
-
-        /// <summary>
-        ///     确保参数值不为null
-        /// </summary>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        public static void NotNull<T>(T param, string paramName)
-        {
-            Assert(!param.IsNull(), _MSG, new ArgumentNullException(paramName));
-        }
-
-        /// <summary>
-        ///     确保参数值不为null，也不为参数类型默认值，对Guid非常有用
-        /// </summary>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        public static void NotDefault<T>(T param, string paramName)
-        {
-            NotNull(param, paramName);
-            Assert(!param.Equals(default(T)), _MSG, new ArgumentNullException(paramName));
-        }
-
-        /// <summary>
-        ///     确保参数集合不为null，也不为空
-        /// </summary>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        public static void NotEmpty<T>(T param, string paramName) where T : IEnumerable
-        {
-            NotNull(param, paramName);
-            Assert(param.GetEnumerator().MoveNext(), _MSG, new ArgumentNullException(paramName));
-        }
-
-        /// <summary>
-        ///     确保参数为有效的枚举值
-        /// </summary>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        /// <typeparam name="TEnum">枚举类型</typeparam>
-        public static void NotEnum<TEnum>(object param, string paramName)
-        {
-            Assert(typeof (TEnum).IsEnum, _MSG, new NotSupportedException());
-            Assert(Enum.IsDefined(typeof (TEnum), param), _MSG, new ArgumentOutOfRangeException(paramName));
-        }
-
-        /// <summary>
-        ///     确保参数值在指定范围之内
-        /// </summary>
-        /// <typeparam name="T">参数类型</typeparam>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        /// <param name="minValue">最小值</param>
-        /// <param name="maxValue">最大值</param>
-        /// <param name="includeBound">是否包括上下边界，默认包括</param>
-        /// <param name="comparer"></param>
-        public static void NotOutOfRange<T>(T param, string paramName, T minValue, T maxValue,
-                                            bool includeBound = true, IComparer<T> comparer = null)
-            where T : IComparable<T>
-        {
-            Assert(param.IsBetween(minValue, maxValue, includeBound, comparer), _MSG,
-                   new ArgumentOutOfRangeException(paramName));
-        }
-
-        /// <summary>
-        ///     确保参数值大于指定值
-        /// </summary>
-        /// <typeparam name="T">参数类型</typeparam>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        /// <param name="minValue">最小值</param>
-        /// <param name="includeEqual">是否包括等于，默认包括</param>
-        /// <param name="comparer">比较器</param>
-        public static void NotMaxWith<T>(T param, string paramName, T minValue, bool includeEqual = true,
-                                         IComparer<T> comparer = null) where T : IComparable<T>
-        {
-            Assert(param.IsMaxWith(minValue, includeEqual, comparer), _MSG, new ArgumentOutOfRangeException(paramName));
-        }
-
-        /// <summary>
-        ///     确保参数值小于指定值
-        /// </summary>
-        /// <typeparam name="T">参数类型</typeparam>
-        /// <param name="param">参数值</param>
-        /// <param name="paramName">参数名</param>
-        /// <param name="maxValue">最大值</param>
-        /// <param name="includeEqual">是否包括等于，默认包括</param>
-        /// <param name="comparer">比较器</param>
-        public static void NotMinWith<T>(T param, string paramName, T maxValue, bool includeEqual = true,
-                                         IComparer<T> comparer = null) where T : IComparable<T>
-        {
-            Assert(param.IsMinWith(maxValue, includeEqual, comparer), _MSG, new ArgumentOutOfRangeException(paramName));
-        }
-
-
-        /// <exception cref="AssertionException">断言失败</exception>
-        public static void Assert(bool assertion)
-        {
-            if (!assertion)
-                throw new AssertionException(_MSG);
-        }
-
-        /// <exception cref="AssertionException"></exception>
-        public static void Assert(bool assertion, string message)
-        {
-            if (!assertion)
-                throw new AssertionException(message);
-        }
-
-        /// <exception cref="AssertionException"></exception>
-        public static void Assert(bool assertion, string message, Exception innerException)
-        {
-            if (!assertion)
-                throw new AssertionException(message, innerException);
-        }
-
-        /// <exception cref="AssertionException">断言失败</exception>
-        public static void Assert(bool assertion, Exception innerException)
-        {
-            if (!assertion)
-                throw new AssertionException(_MSG, innerException);
-        }
-    }
-
-    [Serializable]
-    public sealed class AssertionException : Exception
-    {
-        public AssertionException(string message)
-            : base(message)
-        {
-        }
-
-        public AssertionException(string message, Exception innerException)
-            : base(message, innerException)
-        {
-        }
-    }
+﻿#region Usings
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+
+#endregion
+
+namespace Yea.RuleEngine.Utils
+{
+    /// <summary>
+    ///     参数验证类
+    /// </summary>
+    public static class Guard
+    {
+        private const string _MSG = "断言失败";
+
+        /// <summary>
+        ///     确保参数值不为null
+        /// </summary>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        public static void NotNull<T>(T param, string paramName)
+        {
+            Assert(!param.IsNull(), _MSG, new ArgumentNullException(paramName));
+        }
+
+        /// <summary>
+        ///     确保参数值不为null，也不为参数类型默认值，对Guid非常有用
+        /// </summary>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        public static void NotDefault<T>(T param, string paramName)
+        {
+            NotNull(param, paramName);
+            Assert(!param.Equals(default(T)), _MSG, new ArgumentNullException(paramName));
+        }
+
+        /// <summary>
+        ///     确保参数集合不为null，也不为空
+        /// </summary>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        public static void NotEmpty<T>(T param, string paramName) where T : IEnumerable
+        {
+            NotNull(param, paramName);
+            Assert(param.GetEnumerator().MoveNext(), _MSG, new ArgumentNullException(paramName));
+        }
+
+        /// <summary>
+        ///     确保参数为有效的枚举值
+        /// </summary>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        /// <typeparam name="TEnum">枚举类型</typeparam>
+        public static void NotEnum<TEnum>(object param, string paramName)
+        {
+            Assert(typeof (TEnum).IsEnum, _MSG, new NotSupportedException());
+            Assert(Enum.IsDefined(typeof (TEnum), param), _MSG, new ArgumentOutOfRangeException(paramName));
+        }
+
+        /// <summary>
+        ///     确保参数值在指定范围之内
+        /// </summary>
+        /// <typeparam name="T">参数类型</typeparam>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        /// <param name="minValue">最小值</param>
+        /// <param name="maxValue">最大值</param>
+        /// <param name="includeBound">是否包括上下边界，默认包括</param>
+        /// <param name="comparer"></param>
+        public static void NotOutOfRange<T>(T param, string paramName, T minValue, T maxValue,
+                                            bool includeBound = true, IComparer<T> comparer = null)
+            where T : IComparable<T>
+        {
+            Assert(param.IsBetween(minValue, maxValue, includeBound, comparer), _MSG,
+                   new ArgumentOutOfRangeException(paramName));
+        }
+
+        /// <summary>
+        ///     确保参数值大于指定值
+        /// </summary>
+        /// <typeparam name="T">参数类型</typeparam>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        /// <param name="minValue">最小值</param>
+        /// <param name="includeEqual">是否包括等于，默认包括</param>
+        /// <param name="comparer">比较器</param>
+        public static void NotMaxWith<T>(T param, string paramName, T minValue, bool includeEqual = true,
+                                         IComparer<T> comparer = null) where T : IComparable<T>
+        {
+            Assert(param.IsMaxWith(minValue, includeEqual, comparer), _MSG, new ArgumentOutOfRangeException(paramName));
+        }
+
+        /// <summary>
+        ///     确保参数值小于指定值
+        /// </summary>
+        /// <typeparam name="T">参数类型</typeparam>
+        /// <param name="param">参数值</param>
+        /// <param name="paramName">参数名</param>
+        /// <param name="maxValue">最大值</param>
+        /// <param name="includeEqual">是否包括等于，默认包括</param>
+        /// <param name="comparer">比较器</param>
+        public static void NotMinWith<T>(T param, string paramName, T maxValue, bool includeEqual = true,
+                                         IComparer<T> comparer = null) where T : IComparable<T>
+        {
+            Assert(param.IsMinWith(maxValue, includeEqual, comparer), _MSG, new ArgumentOutOfRangeException(paramName));
+        }
+
+
+        /// <exception cref="AssertionException">断言失败</exception>
+        public static void Assert(bool assertion)
+        {
+            if (!assertion)
+                throw new AssertionException(_MSG);
+        }
+
+        /// <exception cref="AssertionException"></exception>
+        public static void Assert(bool assertion, string message)
+        {
+            if (!assertion)
+                throw new AssertionException(message);
+        }
+
+        /// <exception cref="AssertionException"></exception>
+        public static void Assert(bool assertion, string message, Exception innerException)
+        {
+            if (!assertion)
+                throw new AssertionException(message, innerException);
+        }
+
+        /// <exception cref="AssertionException">断言失败</exception>
+        public static void Assert(bool assertion, Exception innerException)
+        {
+            if (!assertion)
+                throw new AssertionException(_MSG, innerException);
+        }
+    }
+
+    [Serializable]
+    public sealed class AssertionException : Exception
+    {
+        public AssertionException(string message)
+            : base(message)
+        {
+        }
+
+        public AssertionException(string message, Exception innerException)
+            : base(message, innerException)
+        {
+        }
+    }
 }
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Extensions/TypeExtensions.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Extensions/TypeExtensions.cs
new file mode 100644
index 0000000..f6292e1
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Extensions/TypeExtensions.cs
@@ -0,0 +1,32 @@
+namespace Machine.Specifications.AutoMocking.Core.Extensions
+{
+    #region Using Directives
+
+    using System;
+    using System.Linq;
+    using System.Reflection;
+    using System.Text;
+    using Utility;
+
+    #endregion
+
+    public static class TypeExtensions
+    {
+        public const string generic_argument_type_format = "<{0}>";
+
+        public static ConstructorInfo greediest_constructor(this Type type)
+        {
+            return type.GetConstructors().OrderByDescending(x => x.GetParameters().Count()).First();
+        }
+
+        public static string proper_name(this Type type)
+        {
+            var message = new StringBuilder(type.Name);
+            if (!type.IsGenericType) return message.ToString();
+
+            type.GetGenericArguments().Each(x => message.AppendFormat(generic_argument_type_format, x));
+
+            return message.ToString();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IDependencyBag.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IDependencyBag.cs
new file mode 100644
index 0000000..b89ce34
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IDependencyBag.cs
@@ -0,0 +1,14 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    using System;
+
+    public interface IDependencyBag
+    {
+        void store_dependency(Type type, object instance);
+        Dependency get_dependency<Dependency>();
+        bool has_no_dependency_for<Dependency>();
+        void register_dependency_for_subject(Type dependency_type, object instance);
+        bool has_no_dependency_for(Type dependency_type);
+        object get_the_provided_dependency_assignable_from(Type constructor_parament_type);
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IMockFactory.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IMockFactory.cs
new file mode 100644
index 0000000..7888fb1
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/IMockFactory.cs
@@ -0,0 +1,10 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    using System;
+
+    public interface IMockFactory
+    {
+        Dependency create_stub<Dependency>() where Dependency : class;
+        object create_stub(Type type);
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectDependencyBuilder.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectDependencyBuilder.cs
new file mode 100644
index 0000000..6c2aef5
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectDependencyBuilder.cs
@@ -0,0 +1,17 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    #region Using Directives
+
+    using System;
+    using System.Collections.Generic;
+
+    #endregion
+
+    public interface ISubjectDependencyBuilder
+    {
+        Dependency dependency_of<Dependency>() where Dependency : class;
+        void provide_a_basic_subject_constructor_argument<ArgumentType>(ArgumentType value);
+        object[] all_dependencies(IEnumerable<Type> enumerable);
+        void register_only_if_missing(Type dependency_type);
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectFactory.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectFactory.cs
new file mode 100644
index 0000000..042e1bd
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ISubjectFactory.cs
@@ -0,0 +1,7 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    public interface ISubjectFactory
+    {
+        Contract create<Contract, Class>();
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ITestState.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ITestState.cs
new file mode 100644
index 0000000..e45e7b7
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/ITestState.cs
@@ -0,0 +1,13 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    public interface ITestState<Subject> : IDependencyBag
+    {
+        Subject subject
+        {
+            get;
+            set;
+        }
+
+        void build_subject();
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/IObservationContext.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/IObservationContext.cs
new file mode 100644
index 0000000..9e3684a
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/IObservationContext.cs
@@ -0,0 +1,10 @@
+namespace Machine.Specifications.AutoMocking.Core.Observations
+{
+    public interface IObservationContext
+    {
+        Dependency dependency_of<Dependency>() where Dependency : class;
+        void provide_a_basic_subject_constructor_argument<ArgumentType>(ArgumentType value);
+        Contract build_subject<Contract, Class>();
+        InterfaceType an<InterfaceType>() where InterfaceType : class;
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContext.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContext.cs
new file mode 100644
index 0000000..b826066
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContext.cs
@@ -0,0 +1,70 @@
+namespace Machine.Specifications.AutoMocking.Core.Observations
+{
+    #region Using Directives
+
+    
+
+    #endregion
+
+    public class ObservationContext<Subject> : IObservationContext
+    {
+        public ObservationContext(ITestState<Subject> test_state_implementation,
+                                  ISubjectDependencyBuilder subject_dependency_builder,
+                                  IMockFactory mock_factory,
+                                  ISubjectFactory subject_factory)
+        {
+            this.mock_factory = mock_factory;
+            this.test_state = test_state_implementation;
+            this.subject_dependency_builder = subject_dependency_builder;
+            this.subject_factory = subject_factory;
+        }
+
+        ITestState<Subject> test_state
+        {
+            get;
+            set;
+        }
+
+        IMockFactory mock_factory
+        {
+            get;
+            set;
+        }
+
+        ISubjectDependencyBuilder subject_dependency_builder
+        {
+            get;
+            set;
+        }
+
+        ISubjectFactory subject_factory
+        {
+            get;
+            set;
+        }
+
+        #region IObservationContext Members
+
+        public Contract build_subject<Contract, Class>()
+        {
+            return this.subject_factory.create<Contract, Class>();
+        }
+
+        public Dependency dependency_of<Dependency>() where Dependency : class
+        {
+            return this.subject_dependency_builder.dependency_of<Dependency>();
+        }
+
+        public void provide_a_basic_subject_constructor_argument<ArgumentType>(ArgumentType value)
+        {
+            this.subject_dependency_builder.provide_a_basic_subject_constructor_argument(value);
+        }
+
+        public InterfaceType an<InterfaceType>() where InterfaceType : class
+        {
+            return this.mock_factory.create_stub<InterfaceType>();
+        }
+
+        #endregion
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextArgs.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextArgs.cs
new file mode 100644
index 0000000..dc1366a
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextArgs.cs
@@ -0,0 +1,29 @@
+namespace Machine.Specifications.AutoMocking.Core.Observations
+{
+    #region Using Directives
+
+    
+
+    #endregion
+
+    public class ObservationContextArgs<Contract>
+    {
+        public ITestState<Contract> state
+        {
+            get;
+            set;
+        }
+
+        public IMockFactory mock_factory
+        {
+            get;
+            set;
+        }
+
+        public object test
+        {
+            get;
+            set;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextFactory.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextFactory.cs
new file mode 100644
index 0000000..f63fb09
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/Observations/ObservationContextFactory.cs
@@ -0,0 +1,16 @@
+namespace Machine.Specifications.AutoMocking.Core.Observations
+{
+    public class ObservationContextFactory
+    {
+        public ObservationContext<Contract> create_from<Contract>(ObservationContextArgs<Contract> args)
+        {
+            var dependency_builder = new SubjectDependencyBuilder(args.state, args.mock_factory);
+
+            return new ObservationContext<Contract>(
+                args.state,
+                dependency_builder,
+                args.mock_factory,
+                new SubjectFactory(dependency_builder));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectDependencyBuilder.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectDependencyBuilder.cs
new file mode 100644
index 0000000..b58b785
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectDependencyBuilder.cs
@@ -0,0 +1,78 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    #region Using Directives
+
+    using System;
+    using System.Collections.Generic;
+    using System.Linq;
+    using Extensions;
+
+    #endregion
+
+    public class SubjectDependencyBuilder : ISubjectDependencyBuilder
+    {
+        readonly IDependencyBag dependency_bag;
+        readonly IMockFactory mock_factory;
+
+        public SubjectDependencyBuilder(IDependencyBag dependency_bag, IMockFactory mock_factory)
+        {
+            this.dependency_bag = dependency_bag;
+            this.mock_factory = mock_factory;
+        }
+
+        #region ISystemUnderTestDependencyBuilder Members
+
+        public void register_only_if_missing(Type dependency_type)
+        {
+            if (this.dependency_needs_to_be_registered_for(dependency_type))
+                this.dependency_bag.register_dependency_for_subject(dependency_type,
+                                                                this.mock_factory.create_stub(dependency_type));
+        }
+
+        public Dependency dependency_of<Dependency>() where Dependency : class
+        {
+            if (this.dependency_bag.has_no_dependency_for<Dependency>())
+                this.dependency_bag.store_dependency(typeof(Dependency), this.mock_factory.create_stub<Dependency>());
+            return this.dependency_bag.get_dependency<Dependency>();
+        }
+
+        public void provide_a_basic_subject_constructor_argument<ArgumentType>(ArgumentType value)
+        {
+            this.store_a_subject_constructor_argument<ArgumentType>(value);
+        }
+
+        public object[] all_dependencies(IEnumerable<Type> constructor_parameter_types)
+        {
+            return
+                constructor_parameter_types.Select(
+                    parameter => this.dependency_bag.get_the_provided_dependency_assignable_from(parameter)).
+                    ToArray();
+        }
+
+        #endregion
+
+        bool dependency_needs_to_be_registered_for(Type dependency_type)
+        {
+            return this.dependency_bag.has_no_dependency_for(dependency_type) &&
+                   this.is_a_depedency_that_can_automatically_be_created(dependency_type);
+        }
+
+        bool is_a_depedency_that_can_automatically_be_created(Type dependency_type)
+        {
+            return ! dependency_type.IsValueType;
+        }
+
+        void store_a_subject_constructor_argument<ArgumentType>(ArgumentType argument)
+        {
+            this.ensure_the_dependency_has_not_already_been_register<ArgumentType>();
+            this.dependency_bag.store_dependency(typeof(ArgumentType), argument);
+        }
+
+        void ensure_the_dependency_has_not_already_been_register<ArgumentType>()
+        {
+            if (! this.dependency_bag.has_no_dependency_for<ArgumentType>())
+                throw new ArgumentException(
+                    string.Format("A dependency has already been provided for :{0}", typeof(ArgumentType).proper_name()));
+        }
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectFactory.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectFactory.cs
new file mode 100644
index 0000000..242e699
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/SubjectFactory.cs
@@ -0,0 +1,36 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    #region Using Directives
+
+    using System;
+    using System.Linq;
+    using Extensions;
+    using Utility;
+
+    #endregion
+
+    public class SubjectFactory : ISubjectFactory
+    {
+        readonly ISubjectDependencyBuilder dependency_builder;
+
+        public SubjectFactory(ISubjectDependencyBuilder dependency_builder)
+        {
+            this.dependency_builder = dependency_builder;
+        }
+
+        #region ISubjectFactory Members
+
+        public Contract create<Contract, Class>()
+        {
+            var constructor = typeof(Class).greediest_constructor();
+            var constructor_parameter_types =
+                constructor.GetParameters().Select(constructor_arg => constructor_arg.ParameterType);
+            constructor_parameter_types.Each(this.dependency_builder.register_only_if_missing);
+            
+            return (Contract) Activator.CreateInstance(typeof(Class),
+                                         this.dependency_builder.all_dependencies(constructor_parameter_types));
+        }
+
+        #endregion
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/TestState.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/TestState.cs
new file mode 100644
index 0000000..63f6512
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Core/TestState.cs
@@ -0,0 +1,83 @@
+namespace Machine.Specifications.AutoMocking.Core
+{
+    #region Using Directives
+
+    using System;
+    using System.Collections.Generic;
+
+    #endregion
+
+    public class TestState<Subject> : ITestState<Subject>
+    {
+        public TestState(object test, Func<Subject> factory)
+        {
+            this.test = test;
+            this.factory = factory;
+
+            this.dependencies = new Dictionary<Type, object>();
+        }
+
+        object test
+        {
+            get;
+            set;
+        }
+
+        IDictionary<Type, object> dependencies
+        {
+            get;
+            set;
+        }
+
+        Func<Subject> factory
+        {
+            get;
+            set;
+        }
+
+        #region ITestState<Subject> Members
+
+        public Subject subject
+        {
+            get;
+            set;
+        }
+
+        public void build_subject()
+        {
+            this.subject = this.factory();
+        }
+
+        public void store_dependency(Type type, object instance)
+        {
+            this.dependencies.Add(type, instance);
+        }
+
+        public Dependency get_dependency<Dependency>()
+        {
+            return (Dependency) this.dependencies[typeof(Dependency)];
+        }
+
+        public bool has_no_dependency_for<Interface>()
+        {
+            return this.has_no_dependency_for(typeof(Interface));
+        }
+
+        public bool has_no_dependency_for(Type dependency_type)
+        {
+            return ! this.dependencies.ContainsKey(dependency_type);
+        }
+
+        public void register_dependency_for_subject(Type dependency_type, object instance)
+        {
+            this.dependencies[dependency_type] = instance;
+        }
+
+        public object get_the_provided_dependency_assignable_from(Type constructor_parament_type)
+        {
+            return this.dependencies[constructor_parament_type];
+        }
+
+        #endregion
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/RhinoMocksMockFactory.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/RhinoMocksMockFactory.cs
new file mode 100644
index 0000000..4c6968b
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/RhinoMocksMockFactory.cs
@@ -0,0 +1,24 @@
+using Rhino.Mocks;
+
+namespace Machine.Specifications.AutoMocking.Rhino
+{
+    using System;
+    using Core;
+
+    public class RhinoMocksMockFactory : IMockFactory
+    {
+        #region MockFactory Members
+
+        public Dependency create_stub<Dependency>() where Dependency : class
+        {
+            return MockRepository.GenerateStub<Dependency>();
+        }
+
+        public object create_stub(Type type)
+        {
+            return MockRepository.GenerateStub(type);
+        }
+
+        #endregion
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/Specification.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/Specification.cs
new file mode 100644
index 0000000..a5973c3
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Rhino/Specification.cs
@@ -0,0 +1,11 @@
+namespace Machine.Specifications.AutoMocking.Rhino
+{
+    public abstract class Specification<TSubject> : Specification<TSubject, TSubject>
+    {
+    }
+
+    public abstract class Specification<TContract, TSubject> :
+        Specification<TContract, TSubject, RhinoMocksMockFactory> where TSubject : TContract
+    {
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Specification.cs b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Specification.cs
new file mode 100644
index 0000000..4cb4249
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Machine.Specifications.AutoMocking/Specification.cs
@@ -0,0 +1,65 @@
+namespace Machine.Specifications.AutoMocking
+{
+    using Core;
+    using Core.Observations;
+
+    public abstract class Specification<TContract, TSubject, TMockFactoryAdapter> where TSubject : TContract
+                                                                                       where TMockFactoryAdapter :
+                                                                                           IMockFactory, new()
+    {
+        static ITestState<TContract> test_state;
+
+        protected Specification()
+        {
+            test_state = new TestState<TContract>(this, this.CreateSubject);
+
+            var args = new ObservationContextArgs<TContract>
+                           {
+                               mock_factory = new TMockFactoryAdapter(),
+                               state = test_state,
+                               test = this
+                           };
+
+            observation_context = new ObservationContextFactory().create_from(args);
+        }
+
+        static IObservationContext observation_context
+        {
+            get;
+            set;
+        }
+
+        protected static TContract subject
+        {
+            get
+            {
+                if (test_state.subject == null)
+                {
+                    test_state.build_subject();
+                }
+
+                return test_state.subject;
+            }
+        }
+
+        protected virtual TContract CreateSubject()
+        {
+            return observation_context.build_subject<TContract, TSubject>();
+        }
+
+        protected static Dependency DependencyOf<Dependency>() where Dependency : class
+        {
+            return observation_context.dependency_of<Dependency>();
+        }
+
+        protected static InterfaceType An<InterfaceType>() where InterfaceType : class
+        {
+            return observation_context.an<InterfaceType>();
+        }
+
+        protected static void ProvideBasicConstructorArgument<ArgumentType>(ArgumentType value)
+        {
+            observation_context.provide_a_basic_subject_constructor_argument(value);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Properties/AssemblyInfo.cs b/Yea.RuleEngine.Tests/Properties/AssemblyInfo.cs
index 8b1898b..b65ac83 100644
--- a/Yea.RuleEngine.Tests/Properties/AssemblyInfo.cs
+++ b/Yea.RuleEngine.Tests/Properties/AssemblyInfo.cs
@@ -1,36 +1,36 @@
-﻿using System.Reflection;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-
-// 有关程序集的常规信息通过以下特性集 
-// 控制。更改这些特性值可修改
-// 与程序集关联的信息。
-[assembly: AssemblyTitle("Yea.RuleEngine.Tests")]
-[assembly: AssemblyDescription("")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("Yea.RuleEngine.Tests")]
-[assembly: AssemblyCopyright("Copyright ©  2013")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
-
-// 将 ComVisible 设置为 false 会使此程序集中的类型 
-// 对 COM 组件不可见。如果需要从 COM 访问此程序集中的类型，
-// 请将该类型上的 ComVisible 特性设置为 true。
-[assembly: ComVisible(false)]
-
-// 如果此项目向 COM 公开，则下列 GUID 用于类型库的 ID
-[assembly: Guid("35613336-ddb1-4f68-a530-c4360f84d7f2")]
-
-// 程序集的版本信息由以下四个值组成:
-//
-//      主版本
-//      次版本
-//      生成号
-//      修订号
-//
-// 可以指定所有这些值，也可以使用“生成号”和“修订号”的默认值，
-// 方法是按如下所示使用“*”:
-// [assembly: AssemblyVersion("1.0.*")]
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// 有关程序集的常规信息通过以下特性集 
+// 控制。更改这些特性值可修改
+// 与程序集关联的信息。
+[assembly: AssemblyTitle("Yea.RuleEngine.Tests")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("Yea.RuleEngine.Tests")]
+[assembly: AssemblyCopyright("Copyright ©  2013")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// 将 ComVisible 设置为 false 会使此程序集中的类型 
+// 对 COM 组件不可见。如果需要从 COM 访问此程序集中的类型，
+// 请将该类型上的 ComVisible 特性设置为 true。
+[assembly: ComVisible(false)]
+
+// 如果此项目向 COM 公开，则下列 GUID 用于类型库的 ID
+[assembly: Guid("35613336-ddb1-4f68-a530-c4360f84d7f2")]
+
+// 程序集的版本信息由以下四个值组成:
+//
+//      主版本
+//      次版本
+//      生成号
+//      修订号
+//
+// 可以指定所有这些值，也可以使用“生成号”和“修订号”的默认值，
+// 方法是按如下所示使用“*”:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git "a/Yea.RuleEngine.Tests/ReviewbyHao/\346\261\202\346\272\220/AccountSpecs.cs" "b/Yea.RuleEngine.Tests/ReviewbyHao/\346\261\202\346\272\220/AccountSpecs.cs"
new file mode 100644
index 0000000..ba781b2
--- /dev/null
+++ "b/Yea.RuleEngine.Tests/ReviewbyHao/\346\261\202\346\272\220/AccountSpecs.cs"
@@ -0,0 +1,21 @@
+﻿using Machine.Specifications;
+using Machine.Specifications.AutoMocking.Rhino;
+
+namespace Yea.RuleEngine.Tests.ReviewbyHao.求源
+{
+    public class AccountSpecs:Specification<Account>
+    {
+        Because of = () => { subject.Charge(1000); };
+        It balance_should_equal_to_charged_amount = () => { subject.Balance.ShouldEqual(1000); };
+    }
+
+    public class Account
+    {
+        public void Charge(int i)
+        {
+            throw new System.NotImplementedException();
+        }
+
+        public int Balance { get; private set; }
+    }
+}
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.dll b/Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.dll
new file mode 100644
index 0000000000000000000000000000000000000000..6b9d2c6272d2d6ce82c6d08f953df7283196666d
GIT binary patch
literal 317952
zcmc%y2b>&dk^hhPcF*+8&hE+{?|N63Y-^q5_6o_eaM)cNAxE&V!3igf4F&@?q3s#V
zfQDUk+`$13WCP+zGA17;$0Hm$BRImrSzyAEj~tG0^6&krdb($3cO`TG@Bj6>eM!?#
z*HceD_0&^OJ@v#s`_kt|NfbpD{@;Cf6up<H{x;d~-hZ|cy=>L{mqqU!{K6sc9XRU?
zhg|TOtJ{;;w(>`}9{%{rM?CxqPsp#Iyz;8a)|MwsUj2m0(;jsG<m2;4UbSvyq;Ys4
zea`7obk;x;efW@5A5i3WSG4Sqp@Di7?Sv~H`uoi<2u~_h<^LuR$IiE);@|!@5fA*s
zcUM#{!28<2?lZgw^w&W5EDKko$&yHj)MK(54fCk~vJxHG1HQ)~_<?mtos6RU_as_(
z{Z&u8p7+OmDU?fPh40?K$tZf*x>mdO2!PHTWlMSaN<X8U5XidLRgcR-6tCjhX#M*l
zyi*k2`zM}aWO~-!1JQ-QjHAI2`MbXkL>I%)^*p!rCfGxGbp1fIKXC(5)QsE5z-KnZ
z&wkPF{i%kP>6GGNXGI%~##AJHYDRU`j2EB^Z*!d7q=eZBRN62?nloYtQN{uUJ+O#d
z(SA2ja554%;+txu%@G4p(KYkrS(%k|$EPfuBgMw}?szI%*9Nn(O$bw$W=&`qLfrm!
zJxX(G5CVPh-*(}b_uwb(-;@z6*AGUICo{5d8cG|fHX5FDgW%Bg(M0bzpmH~c_lr9l
z;;1rlB1MhD%koWnNqIY#sGJfvKnK=X`{`ZFEb;Dfpeu7;8h57oK0Hju2sMtzqf;)9
zgcgaH^LfHS;01(!UQ}%bFUs-W$`MJFIeu@+9QU&v2SR??M$d0_{XWqQ(u7sdFV07m
zVS3BetGlA-?W7~gwgu+3yxfFT2D;JqnvIdJ4RejH-578;TEepi{+5K}L({J%o3yq)
zABWJ)y?8NVwS0p2Aor(=lSAU@+L~v)yv$e$58y3dv8U9_Pdr(vU%yo9g*nZ@L)5xo
zvP4F;iHnD76z;y~-hKDoR*$Ihg+^c&*+e~B8bt@k*-H4CIy6q&=a|+D);?Q7!8Qk2
zV|)rNpDOXE;<2QXVZ~@CtvI7hX`IZV8I`y)M=q7PI)_G9l>g}Zdh`&URBtm0O(*UM
zcNWP-Ne-Dt+)=9hAcBo)sw;8~2d~<gAFPNpq)wB374JiFM|sqw7Vx3A{*2b0$i!2%
z{%k>^<WNkrNz%a3Yz*r!5rCqTZX@qi2Uvl;Y=>H0w`{Z!l?`Q7*=P`<Y=hCG;T8^h
z$|l^tvME)5NKe^}T1Q~YMpl$<21c<Hhw)Mtb1XlcSIVjU`pZdwL^(wvlv5~sC?`4h
zm(vP2Th<#bp3)p2cN9qSBghjuJ)t#jc?g)V2G*M5J)_Murn+gVRZpuxl4YKDbbU2i
zOL<V!X53NK3_nz=g85M(O=Hrc);cIQTGRZd8CkmBp&lRQyd|y8%JTQIsn?o<_Hc9=
ziS?JvoW}1?SX`OWA{(wuIaxPmp%=9-Cw({CiV<*Bq8`H#cSJt9U8M4L1gE4=?{9q{
z0%P&+^k_is>jz=P5cBoCkKas>F_7Jmpi64$^c}6F8eKbujumYJ+lGA929Adxu$pn)
z5irT_O|_KmL7<$@t}$Um8|iqmBh5DexE<vhpfKWRbp22SpY~UoL04!#kZFwP$MTyW
z$4|xDlZ(LnsR?fz8$4f=zGTzokqnH-eWP~)r!hB^Ei}yml+tY87T6w`ffp)Jxc-h3
zMd|g5$|)KxSW(^g6Fu`ZKY>V8Sg{r!uI1B!M(Xw$txU@b*YX))b^Fa{2?oI|z#W`H
z2vM`L_Dh4aH4DuYWyCtUj8?86j{c7DB#7-3A=OA*L)1!s65-Y3eXLBQ>yhU=Qk$Vw
zMrrGW5;q;p@1ry_sm|@%f7>OSRo{}5*J!0#nQ<;c-`ToPH*G0r@7E@y6E2FBwny$*
zCFH&m-8ct03Q1cL%*51~rXny1lFLw1Goe^+6T`by@u`V#?YDQ4B1(;+k--`GiUysV
z@u~Wh=RF+VYdR7ddAV%Rp;9&{mpn^0W&Xqex3ZzP4zhU|eA6(3PR^XmYjVBRGl+?<
zpb%5sQL;VC>YIOqtR|vk?(ed?v~@m`agtWCI3{Z2-FAa@vvyNe-Kl-UquK-QMl~IG
zgpgY6Fn7Q^Dk-Yk@};e|(HD{%ZX%$6VQD)cqCN+bWJB9eqthTu;~^jVF6BduCm$h>
z-xsqQ!k*_zBm|)3SS{h?_a%pd3%4iLh}Ne6%@u{=X}uV}cBB)Y#yH=RE^mFnpa(cX
zV|YiJZ8DavJYBv|1_<A$c${?ZI`W|THQn~MJ`AbJar%O>iJNJ36l8p7v#{Yi(y{zh
zk`C2o(EX^ExJ4YUkH;NRzDbxn>N&D#jO@aXh*pn}R(4^yDXj7wEK1mv*dn!oD7tra
z*oDy`9sI!CTVIykpCVej$3@JVs+G?P^mU{3MeWl;og;0ftQy2G;zfHR+p<0V8tPqJ
zqg44Br2ju@Pb=}Eze4F5n-%Tn6THS9@gLgHJb++k#)o@a*2pxxV@za#Wa|2w)imQ7
z;?Tv$+B?lA4!TXOHmhzEt8Rtrv$$?#C^^*f`++};(^3Lptg+fn+3XW>SdElhv(dDf
zI;qr2Ig$KKl8o;jn6h>R*%<4v?h3c9F^?C#(ZgMR#H&<0f)Ul()8dW*iD^k-Mo|u!
zqPN74bR1KJ);_7sfKXg9=&$6cbnO5Z2*Rht9R-|>7=+HHtphBvB0MqBzBWEd47?p;
zB*dElPGiOerKrH0^>Oef9OvyYBQKOb-mWPWRUUj}j{c&8e|{*Bspy(y24{mB5HvB}
z&mSPJpnhrVXd@`h)_n-NyVq0J!;Qub$qbej=R>Ys+z~K8i{SnYgvI2gt&@$8B9^8@
z$J^zlpd(;@cFD^{Mnk}*X<&61(-1I!U`d1VIh7~i(ln?{Xxxz4*eLGkb&R_6P?G%-
z*OT%T{w)18eYB8*KdYb#q1T_ikv#kT*#=s*qV-DPHilY3i<|0>EpVEp1ISWi3$lYF
z<(WkH<9VL7T{LK51~X0Hr(oPsqWnRWlVOo7iV~VTGy(e}Hd6&Z)#L;}6;+Je{5aY~
z#06Fs!yDqY^)|R`Os5KdLBY6V1l=k6J`nTJ8+0YgIztrhBR{{;wK=?sO58q|h`F^E
z98?fzI+Ukr^9L7NzCy?;8rcXTKi`6a2LBxP8u^0-HIEzcV<`;imJ%Y3)jdh6B$e&p
zxN|RMCqMZlN^-GeXAW`ji-*$MiDr;m|3it=T)EWj*Tw>KN<BWsh%kSg>d56a8vPJj
z`m4+$d`2Ay@Ef=C8oHHT3u4lnIx(cm%sUL}n<Y}E4{3|l=z5W>xX1hVhJR|kBx;J~
z>Xlstqk%hj&YcIh*A?@JvK&rk@mQIga?vC?0`QSg0iZe?D&FIT8#^wqPw2kN0IJ;T
zJN^lThb)xg>U7muehGAjYQy6r)7ODhAKb1kBEJ;qC|$rUSI<&I*ceq7@Uk+SmBa_N
zSocaL1Z#0KZPrZUvvsjFS~nMWmy~h!E`9=~+^T(W;^L9P`Yl&)c-F*J(|z11Iy2hP
ziBh_QfzkEN=w^~!wTN$*fzN@d43sRCLCjhimgLxG8z@$#;-NHdR-38uJ6h{i$Y!nN
zA2~-QqpvYWfw(@6M+Xf=5w+FCj1o$`C-x3`$a}+Ll!R+DK3eU`WHg<=21?#zkJfzP
zG+Gagr>#5CpJt^y{ba4y8d9?|aWS=2<+mC)Yt6c~s6q*P+EqUX^_fIvS$lJlg%PU{
z(#2gdvy3RG8^$BQsRJJj5tfw?;nx19N!BM~h-o+<D0Mt=+N?UmJz8%4u*<6+VN;?f
zlar6<f;28Gs}CdQ)tBZE1vtL30U#Y;wJyJ$*VXAbDtLuLWsQ6}wZ?_22fN|(V6wR~
z4^JhpILRJHntcb7?1fM(XO_ok8tN0AH^=|Ge*72R6FyD7m;SByg#Yw@{1@L7{y#eY
z!vp^>*&9C2Q1q-Wej|0uq=x80Bv8m{CG$E6CAty(of3r2x@1?9&&+1vU6@<l6E!|b
zy3p(q#?daxn2c}_2CVZ+x6sQEm@4jGVGTa9v1=3^6-{i44nB<7qHbv0l3h`@m+q}>
z%I7)#_}ll4@9PfF13$@LwiH^Z^8p(mz5u)o1G!K$TrV64MQCO(-#ZSK+00(CcN_}Y
z%&-(|7HFaJTGu*bFuK;Kx0%ny>@}u}dEH_yh0;)_9le?CAJn)k6MzU-!Mp7q@m^_o
zuenFOR~z2#d%@ERLllu?lUdo<E`?agQ~W^*{$9Tnnw4X3ve0}seXg2rw3;rkJ?Srk
zuk3}>i3sV?c&rzHtiV4$z%v*Z9`nf_7XYi{iSahIpt#lXcyD;33!f;%%(r8k(y0yp
zEXZme9tsB6vxKi`KhlUFJQmXVvy3MlUTHdY%Fc<RfjWS46Za_B4_VR_J!vz9v*&T)
zxlvEa<YWa%qwu4Z$kXGJdi)U~-eiegcbO&aLwezd7Vxol5B^v?;7gW*7tEV16&C>T
z_ZU&&iM6*Uj)y(zvh9iEsHfZS<CE;|yjv?7gJItB!usCdx#0a>z3+R|pAFf8O!VgP
z(^xH8?1*Rg<<a^mt*`YxHNmTi+8XC)GE2Mw7a3;P1Q|+R8NRFpx+nOG4A*SURP^k<
z=8+iA==wO?2S#2;+laFU0~UPr_IWmNQQN^Mo{>+y)t|P`(7IQnFd2*sEn0Z!Km}QL
zjtx(A#NLnB6JF;mV0zFwrhr+%VR*Chz3Vnl^#<|NQHtf8C{3hMiE#5Dh{gS)3>UO9
zLu13aQ^KCuAr=wwNE-}VCV~&%h>&0O=8~p)9!~xMn`$n}e;@Kraig-u7tVf89rtBx
zJ&jWADdX4&@IihXR4&GAjR7r0WW#z)%t>0v#3IQExt-9Dx6IK;>@jDNj(2b2F@NCn
z=IoX6UL~T?_UBcQ<03Y8uA%R<ZuZ1;h+|Qe#IvVcP$XwHDD<kEJ=%gN33|8%CH(_V
zTwaD(oG8E4#kMlkipJ}qoRIQ*wg8w#f3h(?!bCN3@m#3ml@Zz=-9dc>pDa%)Cc`V6
z`dT%aUkmT6)7HCCG@lJiLp>Ztgh6^|+FPG1@Z#(js;%q5!hdrreZJb23<&Q7qe<2R
z=Xxy6$~nDLjHnyeUKBUFe&6VQ;9ww{@%Wsi6lZ@VuUV{r)Y=6Du@$2AOM*7>;hkz+
z$p%%0R=qPTKxUf(0LG%mNBc9p<kyp7ibkn=Y}(3$TjT7f<Z-|zxgtsavQ&f?Buny_
z0-j1(y(e+LeJ?l=QC)3~le|i<GlSwLnZt-zQ0FlVP@$viYtfZN=`Wtgq*rE}1jlx#
z`;e-=1zxuaYEdRVH=s%DqM@+hmgFyjj~2_g<pP|{0T~NEClkS(MQHruX>|RH=y{f-
zSjxXcsp;fyAglKGXp-3gIRpP9aBDM!|6O5kM)_wH7CGRbQ&@^d_-hJFj|uNoSOO-z
zOJV6L;cqIe#z6Q#6qZFJ`~!tm(bA2e<Mt|BR=_o{PM;OgF<?Lcn<Qo(lBw2>l-(gd
zzNdZz9oe`!!tXYFq}*l)c%2$=XbnZO(d=SlxIV)8ZTdk(4K^#=N2`n$h0N-F71%EH
zAZk`^LxI%~;R8tKdj$3&GC^6CptgO77NOFKiyL7SR~cjg{KhUnLmD4NA2fbcGVPp*
zP)AAE)}n*q@b+(p!!gV_`Z_|toqQsk%nCi2>S^JRd-w6rNX8pS>!#r%NVH_U5<7NZ
z!XGwXq?xlrytb|wDG<FS#T~`j5@%!AzF-X1@+Xn!)}Y3BBJF_#f#V@gtc~gf2V~HX
zJI=R5X@AH|c>gH*jL{ZN>Ny04l38>lEH2k_<kIlkspVS<&!G6MH+Bf_M1F2tH(`~c
zDXK?0o^3{7hkOJxT=NBSmuKBpkQ=Rd8Iwn~IQt3O;yH)4;3sM=_##NVbi7>**&d!x
z!e?UZ#-<wu$I_Fb*3%$3%&v{vEmxmdgO$3cXL{vmaXaXnM?6DgPtz@F0QaV_5iV3V
ze6Fh-BVk_}?XoMS9$JAb$<Eh}C&{z*b6D!Zx02grg0p7*vKoZ>Giuy~<<G<(WF=d6
zXfRp_vCpfHcBkVqK3YU?c<yuwKSqK*>*zyqEvq{LmtD=;=9eV9Em()R+yvrD(_92>
z{;VkP29L?FqBw%BXkECE=3P&Tld2n`${hM>Hi1143MSbfsBw@rZzz7h?EErKvlPEf
zcoJdj{tNiU2QbpIzqH%vtHw80eJ^~6*?6T(EwwYFZrR$?!t#u+-!J+mabJgaoIiz9
zCd|}RVVA3zSUn6Alfqk?B%eVDEYd4DWc~DTebqy}Q$@AzMP$7;n5mfFM-SGF;KU^-
zso~dqdT7@xi{0?Kde1_4-8<)W3)BXzcU*PoO-%a@_zX*U@wL-*))>{UkEwLa6A+89
zx%-v{nqXt9e_rOopilHPn~+bO9qPJqX-{4DM#%OY0_SuB_@0VMx_c-ZyXr(0Rz}qw
z)&}uSC)~b_u3r<q68N`C?|w~C(R?1}d>Rw$+GsruS)0g$vR$BP#o+Qhqljxgy9hZi
z-uU||f#0QN96MG?u=SRL$m-aI6B>xx$G3Y4tNrf8oCI&tjP5&0?Clk=N%F|#jhc@>
zLpkp<{lr?{vwkXZ>I~BB+G-J5!2>?xpHZ@@XB2f(Y5k5|eb-K9?qsXCqrBdp7V2{^
zD73+f?T7fDcxw&sTlgclTy5*Wbe<<#(O5qYMH_ESucR;@oo-Lk?Y_3B-eP=8oo1R~
z5x-N6CEO<A95mV3GX-Z$*d!;mR2!GSa0Qfqr1V;mhNGYbvgHMPH}$f2WDk3@<Gi$v
zYtn;sXKB5TjMakXhA;Y>#;gM>+iiu<eLK}1eGfK~UhkgkPE4l8>H^zR)E#!~6mV>e
zX94H~JGFpWz+gVkX6%B*SxA^WO(^)?9R=JsO!DX9A?6=;ld84DfXko-+|l(7n`4Ds
zlz57`qo|M$LJjkQX`s?C)^S7nGeE);+|S6Etybr#KU`-;Ci$)89O!(A{DUv86poP}
zX<V7!x;I|V9d!A;zh$8D0@96sX7wyslHa0&vA;QGr<t-EB4dk5aTBc6yNPt}`*}Z8
zEL7$;8)@ye6ClZ-s;0y|Mch#g#>(4?`k{xD_b<r1y$zg3+Gd|>+QyMd+xJl(e+M*e
zKZsz`KCT~{w9gY@0WLc{g<NT$(2q^_MLU+9r@Hcf8n5vD_ku=Rn-(C+|AF7IHmxWJ
z*s`zHExn!ndDWWDZ2ddhZi}*}{Jk;XD`FVw_w#XS`wTJqVEsH@`DD-Fx4Q>b{zWnG
zbNT#(One%eXxsLh{dW&&1Yg9DvIhlGN54XzD{iilk+z&9JZ)s%`VCxU&xAbNUV6Zl
z{i17qhssc`2Yp8^dzRrY@4?*<+(6=h9`IBbyiGiMo4zuLKz+eZ^@GNS?-?j~?&{+?
zmTq(0QNR^1|Dfq{7w6mpM}dIze#04EKT(bad$R4V1goBB!%Kdnes1Dt_87#q2Xw2m
zestE%CGUlGs7|){UzAI}5pCT5lAPK6#_Sqic9NmjM&eGWnaNqim-zbZaxmMs@UxZu
zy6x*xi~Kpfh54asbPz;-tF~&xxACd=BSC4<XR5nmkI9w1!j9>>*7Jq``x1X_s?FB@
zUVOGpm-q$m*u?WB=tG(Qu>drRxUUC0Rhc^<6inlT^@uxq%byDmtuIrU{CR|~$3I#*
zccCbmowbnql_Q|{NAcvTo)2y#&0oO7wmXj7ZYg}E7Xm5DvZDPW-nMe4p_}M>sW=El
zT=9h0t5vMxeO>E2@Z_Bj`$NUC3)RZi!3ps`!2-aFbj1@tEW4H5u@Ve=w0q%VD-?3F
z0P_^dOr3=EzdnAf<Sz!l(q`mF31nkGMD(91bF$^$Fdh8+v8gnBGMvtg5*w%4QwZNg
zcp%N@RDd+ws@VM$Yo5M!r6CghCn<JBvDr(>sZ7-o{3zh9`;2OEuSip`9xAp>&mMZu
zDNfs0k!U#XsD$<WW=u>yzZOtEe-yur1NcSOviF)7cp%jON9D=4L%d}M;AMouPSqq=
zt(rgCH4|a8Y?A*Iaa-1*9pyNOL1A|;QhK`?`gco5oW5+7R;vp7@zOLVHjR-k9pB!~
zbiw?eXm0?Ap<F@RY}!53?&nW5k}eH1t^Ye3X><ZKnBPK%FQ;VV+q=@(Lh)mp{7tV{
zFwP%}_?hH2y-mXgbk)Tv@z{7`+Li=uv$l4L6!dt8Nn1!aXK&p$+_k5dnjWh@)h27=
z#jT<D^O*+v4B>^=x*AnV^H;zrYEbHd(lKwimvk>*BHf_vC1rYXFX_Ilbd~&-o}u|N
zap!U|ypf5`D+pkH?45S_P{Cz$ae^Y8e{72|tZ}ry4<)>a{h_oq&Tc^>K37v2FRVh`
zd5Gx6oy+tvl=iDEW6w9MY7s*EzcC)mo&yC;qcTw6`wCvSzQyfg()uk#ZB$Tc-CYDR
z97aEx6a6XeIe8O&GE0dLzFgEif6IO@7Y_#5MyJWNEE;VEVMXQDAUCEPBxZf3n!Qr5
zj+=ki=qLkr<5sCS41{rdgh_`<Z3$`q?ffKZexa~aRv=zNz-Dr5!@KBwFpcDo8?qG&
z!?rgiBfIp@I(_=SWDCk|x7n#W=D-e$#s;tll%q0su1ha}5B>4X>%^fI$KLZD&>Y`L
zuh0j*4QOK;Inv9$hA^Ynk16%pKs<<9*m&RaO&f94i-wIjN&Z!(6u+BbO<ONNN%C_i
zMytE#crW)sd?{?(c<C+~%hdLdhwYZ*Q`GkkWY9y*XKM0a13h<_rU+J3I`*gR$_V$A
zs&bAkMCG@`KvFp;{}Qy5iTwLK*a}mf(!5^GuH)<8q~l%sdw+D;u4wo$n$Pi};`8m~
zf?l!q_f~}peZmhiT{Jyt-)cx2Q=H_4u=vvBnf1JSF#k8Qot@;pwf}^SzT)#w16(-M
zU#>MFxM&4+H~(7ILnxRkKvF+ll-S{Ytxb>gM9x19Nf#6CuOX8*mEG7Ts6}NdZ6$jH
zFgq^NXgvTTessi|p!<fS>qnwzlf{A39iJ*p=NSx?ly4X1H;S^L7M0Q8ubEv&s-zm{
zuM)xpKU45ae-*_;<HOUdiLKSsx*uS(Z5P%0c02fFn-^^_!;bpI#lv-yZTM<Z3zUu!
zCAVwG_s-}8Q=dU^6-~lxlA&o#m+YfT)@e;Db7g9C|80>Ns%0>k=6CW_3-qv0YW~!%
z)hSP#X4G?>0@^%<n%-g1*RrW<JF%9)*fY&uC(gXzZAPC0k9?XH=HRE_$qPsBhU@v8
zp)<3VR}Xf(KVKGOcR6}IFfusq@jC{MYMj*be^x~)i+cVRg0>OM=JK_ZX}h*3+i9(t
z<00Nmvp0Y_L%E`ah<`y>Mr#D_Af-(~&mfm5Y!Cw@dp+pB7mLkgOd)J|LwR!VR6Dun
z<!V^}v(Cytk-rsc-2*~KJbN23jtXhGyIR>R-4o&*Yu4~Z(s4@`JoIs7x-2>oJpFlF
zV4$eA0&f>;EI!%ot>3Mu$BoK%x|MfbE!t}PeX0rRLu_YpIg;C4paWJ<wBh%HxwZRj
z{~5lg=8G|YE`u|7B|1S5eVf9MkbbCrZ-hyP$Mj!{&i5l-+)-?$n%7{A(-8DyQDMd}
zB5|5j^RG}IW<^1IJCLAvqIWdN$M(}>G#?12BDf?eldsl~9x2A4A)4y9=>MbRjh<q{
z5}<-xeI`*WL&mvxN6IK4B%Ayl)YS0wu_WIw&QRRO$YA~r=*}Jjs5q7M6--5#U>wZ9
zN36e043Xwtq*?nhKUy2_9>;kKhj~L{o1txgghX3aewt~_X_foU`8nI7F0iZO$(amx
zbzSS<$=8jO=Jw4H!<FVI&gFSxzx+z^?Q;+H;gW4#yqrQ^OttiOt&*v9xSyZbTIEUB
z4bED(a5AnEvlDZV^2ej~@X0CCe{wJJRGlTQc+%>el0sKLl62xeRwkkN0lUR+pF4bJ
z!?Sn8P+_+{{e3OH*xF-ybNrS{uTJY^OE0Eo4(D|Vx3lFApp8?U0k;)HIwuvKO8O-d
z#m2Q84`wq`CNVyaOylem-YkOOnnaV(VCF^pvED=B==~leUew!rFwNhqLMzWJ<B9hB
zcrgtN%Q&K{I+TuxpZo8LA4%aJ`5B6igT@2)L_?BTZU>jVOcRwQ%Y}}w6wh7%{&AFP
zDq_s5fKA<r=i*)SNWJg2K2JRJbi!w7=LoWQtAIZc{@U-Cw9<I)13c5+>A&!3e~_Py
z0Wf=cypCe?@6Qqbd0GeqpZSVPn#?f<tdQ({pzRMU8Qv|)%5=(ydA+6@vgPxyJW23T
z9_^1QL2o`4J12Sp_&YaY4{Uy^d)Vsa0<;4K_%|x-b|Do!R&>TJ!VhllJf%QfULMps
zwE$_Z?6mGnAfyzbPmb*jFzvh9zA%*aK3-OK=2TLa;k?KfEi7_hnJ-oPkB2gU!pr<g
zmHAUkm-#aBeZPXQZkg|2fK=vhsLVp@FZ1O}duD;yE%W9Aq%uFC`w|E#MOkJXn&@HT
z`O;A4lfBHRc$rVtqoWsFTxao<mNhVEu^mMg;6z}<-km;VfrO+>t(|8Tj5v)r`wx{$
zQ0cDLQ8XlA-mAIu>;knbj|UbY$-`0#sb3yUp*43ts6gz><D3E{dC(EKewBojqLhbx
zFD6Qw?aP8ZPLl+ZxzqKi%$=df?)0GxO4zUWk5T$h2Oao~>%eEF1D{){1Ku955&q``
z{udnoi^BiXLj0=T#qv1ee-G(tzHlcvY-GCWLQ0YUH^7>eg>lGQ`6@i8^klxRE!**B
z(6>Ap<A~7ZSNtR8&7l`un)WZNYUcT0d9?pt{XHH@Bb~c}v~e46t1%}sar;3Ko!g>d
z+|i?b4#;!Y3t$<=9fdWpYsBqygxpeGb_c=s*F@(!y|?K<(zz!Rw9%>8=hisR%<b@B
zr++#0+c`f|>?c|x{z2V%TjT#Bgel{P=oprh=gb%djT4s8a3@%vpaQc$3MEclA1m1}
z^lE8;>}k(i3Li4^EgEj_*z>rPSryl)MZ|Ac)RgZz__@>6{SBe(vHZ;0^Q@!iSN%YS
z^$`0e{kbzsP=|AhWOqOW8ov@%<~7Nh?IvEX5_56cOPqyeH#%P41vunK88H)O8T%1#
zSCrjLQONNR;;E;c_OAXFn-*P%uK7H=@6CBLPL<E-RNA<abQL=<rlPC|(2grcPLwS!
z%9d*PR3nJO`=~}l1CF>}rx};#g4+n%pCt_&9^#I)i_zgG*lPb4;Bfol1e1C#!+@qE
z%r=~jHjJXUQc<=(<=-NYLDxm}VIupJN<=Z&kJ-K@rg}L`pOR~wB@jd%2K`ad!^qgy
zF1aJ3$vn+7A)&z}Gcpa3d^Y7a-iN05fl$rnO@`xo#WD-0P<~?b95u_T=Eq7^|LzlS
zjt+UO&qts`tM<wMVoa`Fe}ML{M01jd^HrI+Vq(+z;?~+^()Hv0@)CATy;F>MG#7W!
zl7PJn*xK*ApC0x4=>?evcwU-H{?Ts1d&{3cYfr@<wqn<<*dy^^#n=zm7I?AiR_uBx
zw$H&F8XbA2j{{<M{~z)pFaJu;P;I4rPwSSskBMi%#6qz*rWxK-53jM3*RsEY6K0ow
zx_EZUj(`N3eWd@fDBqn_jPrO@G<l};6-Tw`f`|C>vGx{eg!FXh(N<-d*fYH`9Z9tp
zu#pc1yW+Y%Y~vO(VH_z%s^s4WX?6vKDqGY}d_K`OY9_ufb8M<W6}<*_m8z*OtK^^I
z$q<teJeVEvJQ6#AOhu80Y%){EN|@RT0Q)?>9UPj(VU&gaBm6_CNf#CVX$apC%(AJO
zZ+oa8P&99lAC+W7pvIk?Y&O+M&E`3UiCejTx#l0E8{wm(?U)U>51$Z$yLjDN4fdhp
zX2C7N-dg$Tq#7Bl=HKNx*j=~GF+-fjoPWVURPla|)5x$@8QeKc9lGUV%-Xnq9c;xN
zb$!b!6E`;pqFDRb#_K!aa1xiAnZ%<h#Aw>uX9dUD()RaBwRN=Cx=ydYKhRE|hH(1_
zif>l0e*z^RtvBn`#V5!);c%Ooph2%XrdS5e1~seMf0BeL$gsEYk<kP0i1xt~L{fx5
z6ipsTcof;a1V(N}cK>TB{g4bKr62L^m6F-sLNaD`T@(uivD^fagi?7qf(^8Dhq9%b
zL&XOiT|cV5N)Z$7&7F+vUDg%tstdLKIs_Ny_e)z|*{dygG$zEl6})3`v@(A!wN}Y5
zM7kUw^kQh{s;>;piK#Nv+{#d^aLTZ1%WJJ)!iVi1)Sk(P&MT^A*eS%H0-(a&iucu8
zy{I*&*u$7$D0&CwWv;DR)jZ!}y!brd%~0_J8F!Oa>-3eB`)9zm7Sn1Qz7cv!ImOE=
zwpDEz6K~@i5nR+dp9HP%m8s$iy9HAUJJpq|FHGAU-{SQ99k?)kR#S2jT2{%b3R@X&
zD9oK19;{Q;dO2y^jN@#6M(5m)0Q%3Ak&Wi0WA$rXXa^m{>~-q|er-FQS8Jc$IT5rw
zlx~ZZ0gF=ykmf%}4*N#2@3=E7VGV{Uzbi0YK2?=5W=W?wG$Xy@tcaY_{J%&zv5`hh
zPiKH%09b8zMd{U62DIq4I;Oka$BKyE8HyfCinoamv$6RvNfjm;9q=mv?O*egpTSSV
zdaiH>MO;g)=L%iNPkQcb8Sd}E$iw^XBcnsYoh`~6s~)}Uf06g$;1_utcQxxbww$NV
zz=T!HGztg|eRXdP75p6k(Bi(GiRefy3)7>`d2CcA-Xtey%$Bc$a3qWTH~hGS+P{@V
zdg8ir8k#<d#D3zJ^=Nfpb?5a-@H(prg1Bz|?ygb7Bivu~I}!gqKYollctQVS*KE|b
zz{?W180CK`nMo}?v1tTy>3IG}BHAAz=u?`b)inQaKpaU{el+_(>5VpzdHyrO)qwuO
zbL|go0j(J>_P|b?U@_9mh`kdVaTHIdj17Ypr?-c%i$?E7iQ?$g=z-5G?)SJ8T^m>~
z4Au;;M*>rqn_z9z$JmsGtv8%{`~2fgMgIzEGYtOTu3}#E{{a}{cN0W~v86SeulksD
z$BohZtnrzkWA_uN%V;VM5V-?Mep651uW<~mMbkD$?_oUkxAS3ieAW*pK6W}3VBCc+
z9_J{*)E+Q=SdiH0<#t0<o88{sK@-~!8e4HlOww$>@a;L_YzT?$Z|B38<g0}C4uWie
zbGxG8Ye|egz6?=(Nhauz$>j2Q=Oel~Y5;e;-lu>+vJ3yE;CdJQsxJKZg6rMKl<1C#
zUK#Ivbcy3*&f5i09T4}Jo;Z!kZWkcLUELF>G1ct?D2{xuDdV!=DN66+=doS*;i$*$
zdbjoU4Wwf(ReMS~z2^f*7C*hd2Z_{*RTv<LS)WQV0QJ7S8l4TA{t{n?e=MfH9S_in
zd23Hh32m9907wV7TmbR0-N{ta+M>?k9AGU=`!hoF;|u!h34dx2`YlRBwJqmEYqkMi
zZOelLS>HE1AG_5`!ZN(fkB`ann-S2I{MOehK-vr230!Ye18j5mYr5@PwN$$^XC>J%
z1&_r7aCvqwVrK?Of|D&+-UNU=2W(#Tv+&w_k;+to9{r%YqO3~TeCdhePLuAuE)y|}
z=n9ta>vVm7`}5Fkr$#cFtMQDPf~xau5AvfW%r)j;S--Zg>sfJ5=!=ryO>L=x1_Dg&
z$V?2?9G2uhYAj@)M%b|E%a#UnwJ42X`4JGX4PG@2szm7ZmFQl{=&P1?%YwAtPitQz
z^$>mCaPX^Fx(lSrZ`~p7L8H;0n-sN>UBN8tVR+ZexbdFE`7lCQt@~!zuoT6fk;dw}
z4U0-V4c{5g2fcEcGKJV|F9Vs~)^q#tluY;K*~ZUrWcw8|y%Kvsxz^+iP8#ErtaUy$
zA0sHeVZMZ8BG_{Fq$tsti(Y4}E7|@^bhK&MLcH;SC*{-Fl^TzBNhTo~m869E0T6Yk
zv6inOJe=lhf!Fg-(W%++$N~8mcn_WB*KF|GH)Rlzm|Y3F8vu-P($I?`8}ugTCgbBa
z``A_UvFqTAdAMeKC7DZ3Eb?m({~#XigZW{4rB48%V1+)&-Ti^muL|iWJ^dj{f2gOg
z=<GCxQE3*+X(GsJC2PPm&ge&bl+iS?OUY;wc<YyFRw(kPDROJ%U|Q&rXqp#32<{_`
z1*bYL<g)pSe!2Wi<vKi+>j*E`YLyEIYLQ$*L3-uF<X^L$h4e>xdN%hr+G{+0CG$j{
zW<2^Dy!=|_zv=ml8b|6)(wy`6Q#g0E*%FB7u_nzwj)K}InA??fn7smMQKMGR4j{T#
zH-b9Er{;qtYpnL=;L2crjPPvjI$&u9*sjiDX}jT8pIZk)h767KdjrSO!bkclqRu}}
z)}v_~I@({r4ukfwASf5E&;e<k1x(J=zwE=CDd(S6PTx1dph-h)A2c0D+8GAC(asl1
z2AC@D;9SeEc@6cET@2Eqasc%?C*d0*aNL<!C^kYI525aOG1sfzv(%-FD`<r4N|%n9
z2imv);q6X+eEZa3uzyu^qHzF&KNd_abLkY)a5iI0=up<=(-H#x2v$Vx4AX_Lt@f`=
ziq|w!mj5qBa$UJ3woicpUJp)wiBMcWhHM`vWY}M-tp>?WFGWH=(bui2r%e`BwKUem
zMpK~|A5x&ffYVRy4qN7*sh8CV-27LL@a88{2#st{AZxEAi>~oHF|z9@9(6y)h(V3&
z*_rTWl|`gF$Fj0MHeSlH5j~ig5tF0vEw6Yg$<E@X5$7k7<q_8Ztd4E8u4CLRgExHm
zSj#s`uxZZ9cEhHOvTwpM$C0uJK%gtrWxCTSqNAlu9WWa0AM!ioWzr6{lf|;Gib|O8
zxqvv&g+|3Sj|E7X*@TqMC)T(z%Ca#~xo_=#a404;2Th&3OdD2b<K(YJ5C&1%+3?5K
zIWc2`<yIxh*G}agBxX33Ym8V6(;40T6yl3Bwz_0W$52c9XOiY1D<5iw0r#4Sfilpy
z(;?Q$#&$+J|5wZ1$L{Ywl(D;k%{>bSrH~!#)2FH+JWtb;Gk;pv$xhb`)VpUg@aA-m
zgc8Z0x;*X(U>-=^5l~lXuW|p_uYl0~_u0W}Blm+?et)C5lCjSHp*yLvbmmESL?b(s
zD1Y$@%j?mnfuY*${vbl*B9$h@*YeFE?~+oY1O)G7jm-MHk!ZtxnWW`Ud%JJrd6@Ee
z%2UWAI}1#*m?J!qf0qTZ*7C!O{r%}pD8zv6X_$O9$?~&79!grLfssEGX|tCLw?X#?
zqh;*I;sCTQosL$=8Gzy`FeTJX2b-M!!VEW<h2o+sCZxdI@SioKGkFF!an+>ER{lW9
zudd|};vqxoI&?$a{wi$Ei9;6Ih?|pe%8eyj@7LT6UMq7f4Cr<CigHJ-^I)@eD?dKz
z#G#zakXKQ^Mg3Lgo+@(5+%_IW>h9muNxshNLBO~pjQk@cX8Hz$jLlz9agyu`Kx}^7
zz{_eI--nZo+2urpqtlk3_=ygWMvjR_(Ng9z{e1f|<gpV6A{=>nJ-n_uJUf>%vI$|#
zu2WrI@T<DhbOaap)0QQ6UAsS&*nI;GCTl0E4@vw`!Z7!D^K#48!>w;a)UUp;``I?C
zg}G4IcAZKJyXfAb1oR!Vkk&T1a5w&w!JeHAaWhnUH%{1gGx@B#B)d3#lxg1TcDsnt
zV$~$gmg;V~18vDqH9OvV`QhAW+pJBfyD_$SS>Ae=Ll0=Cysl_{*k4zc+yKosiRAgP
zUG!8);lA3QCu0S8d?P+Zls#A&%#HG}?VVm;gz0vvYLgcyNtV7>#c%g!uS%Ld)U-r+
z+Sl~_uxPxD^Ar%%c?vy}xl8n@%w5Vub)<clGN$aKp#2Kf4g$`s1lIZvC2^o_a<zR%
z&XGftHg1(xy0eFfYPZf4yNhX4Ni&g4+J`7UHJ-mL@bP~Y=1imtooG%!r3B^sUH<;S
z5P#E;)oFjpfC0yMA@`>FvZv9!t4!S~W%)I5=_|g~CwDq!4<&Oo7VXu&h&1|(wfNac
z>;guPzYq?U@KxyNAE2J&j;b+iM;HILFz8q-@~?w7tuEXF2N(c8U5EDJhQla2O}uH+
zR<~jr1rgWOt?a7u^sT3>_m<Vlf^wms`$wOEHXAX}B~vt`WG*l^NPb2y+((I?{eA<x
z_m_xkJ%a9K?BQ_4OyyF=W(7d}`UWso8}_R>DQ*N5#T|ogk$Q91?Tc%4j!O>lBEBZ_
zKT%y;*(u637QKfsKEVHFxstsXXSA}%lF&hT-8Wg8ilXza?jJ$vdnD|OE8XLjG5`ys
z53*Bz(~JriMXj)?LUp{$Ql5`WS`RsbF`a#RAvCo+y_ul%!_f`Uda%j0R6;cGk?>}#
zBYv-H>pDpIsn1F91F%y9%{6{HufaIE9@DGQN%`tk&2};SsOZ-vA{Fd%Y3OcTeOoBl
zKpP>!#|5PCIdV$(S!7<GHuXDyj#{m8tf4=cV9%XDWgg9F8_5|vu*ae-pPxuvP`&`%
zbNRSW5&^;A+u_d(^=fkU(kFHztfkaW$g9Sd%yN3d;+$hMdOG~zTfmPP4>f2PL^p=)
zrgC}OnrIj_&utM~`w+#g524GwKQ#PWOkEoC`Ci?@^J%2@rIv8>tJDTrx$U;K!S0^&
zu3^#vxyFnfrq(woX)kdT`jJO25W3f^pMSX0>h;m0ps|oAwmU#(nQDkySCcqUw4UE6
z>MjMV#`08Cukl%6ls$El4>1O(kCiHOqRW0wt)GKEVI#3v2>S3SPqKV@_g<s?v!Pvt
zxZV>IWgKgMqBvo*T}!0ZT{aJ=Q2KLJ?hT}o`PE5I#wfJjL8(n+wC{`_#mKrr_mcX)
z_$5o4@27$mbyoJ7-}VBiFGGg*=X8zRC0Vv?m;djwHM`=3IfTBTa4;3*mn2KXt$XS}
z;uU9)QBACve}*~F8t2R0JyLC<SSQuUBk`+W*rr_iR`P)_A?i`WwJl-AN4)%tL=#i~
zzCVLvTXC(}V<?>+BvoxT;dj;UDIYmcOx0`zz5kSFQL~ILDdbx0HQu1f$G5?PACF{j
zasRt~r?(o1^u6u36WXSNjc-#?A*S-3LcaQo+gDTcx#tiQ`#!a~=PKN0qhn+4c?xEa
zC5RSdD>Oj7#b9rN>fEykLQnE%%}mIQGdl+5Dg3Ex;?A>qTCsF_v|f_@aS}H^smIA&
zhfg6Wx<Gn7NH%WJel%E*uC{i2qsa9n(K{!=o&a`(=UdTj29ttvkupF#k5mARroV74
zbbo9u53x6qc1BYNaYw=87NPG@<UA)$u{NNw?v<cDuFIDO>?)?RU-T6bJ3BqZD)d*N
z<WnnsUtHPyS45CA<F7b6AUbBVuK}xV!(eos@=yFbE@D8FJy#(HSJ!X?IJR!UJA)Er
z<F8=h8Gz`HC@%r0y3_)6rb|QKT6l)o@+jALVn4ZPzag@?3uPqQ4uvfy8;LR0nGJpQ
z9=eaRE1yx9iy}+RSWA<<iF@{5im)vFyc0$_Y7J%!`ZFpl+>KQvMj;zh6*gi_T(TXN
zuuPr4&oby9Pwy9M(HYQulJR=;0$%lA8Q*?A!XH4S))|y;QMe{A&AtoQQ(A|+O97`l
zA9swHM5?V`dI=LCBF0)&8eK@-R`T_Vq1<X-I#hQ&5r}<cFx^xq$Ud1}Yj}o<p)myq
zZThK<9tLJLqyF~eV^h|NhPL@!sM;MY766g<`TPQA0f#B~DcYs%L87zh4ZB#WeVx?4
z0Jro4zRob;kEi~;xyL@c&G=rcZaqYrhGGDtmA9c$V2EBNzuu^NeWbR|;&df7JFK59
zzrq$$T#!0t4Fwqtk6ls33Y6bqv8r;9J-CP!D5O;*T@Y*SR%ul}=VkxsjfA&JH~g-q
z)u@%vX7+ee0n+u{ipvRR4pz}!ZAuT$%E7$G#3t!RI%Vg$xER2XUTMN(Q3`A<wR?$N
zFimaL68tPRa=XtmTtB|yCpEt_tKhw1XI!3c`X$A6haIs=sHxu=@eq)QYL%=_JgvlH
zynS?K;B=l@(kZ?BCFr#FNT-;qO6Fcb_H-pL<UuCrq5$eU45IxK*HT9Pc@&p*5PXVa
zcaP)5`-gR=9OBo#x+iCZ4bQH5J@Jr|giX)1zKYfGTy7E>+wBAyCCi?uYFC}xzVcgf
z(TunDf2l<m=MQg021}hk+#F}O$*Hq*&0)vo0y@7EoqjyujcNV0XGfdz^KUmx-#S;q
zSO0m$zw!Lrw<zb|c>e8&X0ZBs*e}9ih@SKRBM%kx&Sy0Z9**N3dsJY@Z$?Ud`)i2Y
zRz&ucxBt8(^`Ls$+;@)9W!Ea*lYc^1=+w*gsLs8DhxAwHCoyW#^Q<h240kPkiekqd
zq2*7a;v3W2<do)5CQKKtg^AQorV(a!BHeYCMNgyLYrkpBk9|kl+suBmZ<&ekbjEF+
zvTC!$29$L)vJ!u7)(8NwEMk2Gy+F)uF~>a6*DGgZoAyk6W5$%thyAzJj{9t~BrlZy
z*$gC8eKCh*EX)zLgyU%e+3nVF^cwJAta6)QTKJ=}?bR;7muVjnOYFCF3usIDQs%!5
zO`mNAp8>=ghaMw!qc=EnZ({fs++g-6n4HyMtnMH1lkeogK?4|Lv$A00_)fmv&Fo`X
z&wW+lGgR%I<UfgLp94?qfw#Pj#QqJ8;OR`+ItDNAFbS#5-Mt#GMAmkPQ-yKK)~&uI
z)cPHYrrTY7iw8Y&X3^Lm4-`+%>WP4Dh?fo(@Zzbu)BklXetpb@eegBKSBm%E{SdJ&
z*P30qH5-+nh9KFxu}HbqHkMh8udr}dkX=5}8dkbwkU-v$P1^fY7QD}e_jML;E0t3r
zJg=xC-BTB&+ZNs_&%ww?YeWBkeFh%>u9t_WE#Tqr!+XG;>Baqr1-MV|$9;xgKN|)N
zucD$t5OojhDGXL_*UQ-4tNpQqht9oJvSWNiewzUJIf}R4Y#!8MZe8PnCr9XXg^<6_
zwZEC?tEt;c_p*^{_X^`>mF{(daYwlYE1)2x*gURt-&1i%{90q1*t8Ln4j8x3=h;!O
znM}}L@bymyFegGzxtE-W&ww;bl8hz&8q7GmFF{{#*1pxpL-ICw*Il;8+lb|CyxF=l
zqr03>{&LCo%&9~b2gfx6;1Kvb)#hu1`9C6e-%B*8BQg!5-bEB&X;b6eum60w<mTg*
zqoZ{X^>ZLUjM<!DO|ogSqQcEbv<h&Gsh}4~(<W90$nE|LyRUf)NnTGmmQ|AWHGnCO
zsyS6dZOq`7Ax;N88^BPln%~HCxW5014dQC`igr|TxtlIPbsISnJ%X4wtIb+U?Kf-W
zxA1fGQ=t|zFesZ;nYC%8^3COl%QrU@G?+gYUfd4ZUM43sm_HZv)uluJC7*NM8meH}
zxK$P8!&ch-Oe?7R{|ks?c;Aex*-0W@SzKDX3nY}b{Xncr{ycK)D}G!<)T@cg9taVH
zp*k}=^t7P&t_CJ{TQ5N5`DWvSeg8|~j3^GA2k@kcDdE(1$FuRhuDus9Uj~AWZ$k@2
z;BO?T(#9P%J@?~HV+%zPIB#0+8ds}c-YFRz(RnQ~+@zyN5Z+iRJoF_umuT0qg6Z`%
zXf$@IH!9Lz64Hu-k3u`L6*fk&yP&NfUKXu8$(CSQ6EAobTH@0J=*%gxrSs{FF!!>O
za}w_-uXn@ik`)ybsli{bVup(ut|F>vU!3ar6fMs_LON)h#0K-P0hrh%$F}wQHPN+$
zw&*r!_n8mcP3FE5dJ&CKQ>N{YfInJg#WLHUYHwDz4vwaF8mefi&tIaYGEP+cD%$Fk
zUgvF9cLC$VL?5zpS=(npdH~3jofHjo^0NTKJ6hZ54uAaIlkY6Dm~!khT_erJv`CE)
zRsFo2Pn!RjLRS3xocg``=5Jd)QA`K)&Zk30ZP|S74W>TkH_6UZESu}XX^Yq~!JV%?
z7e$rV&sSS3*FsSX5~xr65mFzwziFs>w-tkScKu`0Ng4EPlMvnQ36AW&p<_<B^bpf^
z3K&C`n$<>aYhjO<MQ?+jPwtT)YtDg#;DTLFg0MNizGWW8=6k$yzJmREB>4pUqgGHE
z%q{?8JqdFJk0NYse|mz*x^*Y44YB*BlGhdYeC$GS#J2Zt-(UE_O_QhV38Rab_`Z3a
zOFjy^`iuQO!3II5o**4_aifRw7sx!>uir%}nQE_~bnFZLvRFa@4+d+Y0FDH<SO7B3
zeT7~DpeQtDw*Jm{z4es)w%&5Hv%`!R`^xCp8n#U*w2y<LNB@JDdnI$)Z-n&M`gyN(
zeS&K1@r7RD9^6=jUA4m8;AU~_A7ZXq#c~iu6F*k2dfrp9lR)bx)Qa7=#}$DHxN4I>
zI-B-r-oiPOxAdGN>Hlyu4Z`bhCc5lJ#W|9O-Cz1G>9u<&=KW8fu>@<TK(0`qhw+(1
z!C`mU$vkR7uh^`h{;b$Iw%VxJsOjw{<8V-8p>AnQS>SCry7-ZWZq@8gLgv<*+{A1a
z-dJSA7!_jz<6FKOZPbjbWRrKRuc8rfl_e?{?mZU3ysix&k_=4uRz%DoML*a}{gpRF
zyI}0NOk;x2=ph^K)%iO4hA(^%8ZR=!Gk9xWeMq9G{#4UI)G8{Q?&B}kGEI>8>H<PP
zAhiYGP`-eyLzrWXAL)tt1~Ib_1i-dF&BP6QE$|t^G&@VxutCVOYt~C@(~3K$&D471
zW(|V5;dr&Fw;B(hB%fWyb`-0$x}WD+c)F$*rsLFgn**SJPA_pjM&@|2dYOBjAQmk6
z&_!)z<hpo#^s_?-q*>Z)@hWi34tFJcg<b~y7t~R>Grjc&+1Qhi|LPuX9hx>3w1zZX
zT1e3>Ou?rKdNNzBc7u@b3zudJJt`Q%_w*Wrg^HTCK2dT|+$itmI5;~0x<YRci5ln@
zT?%bV#Sfza1-)z7pPYTxkIgsq73~(s+K22spYDGgX5+XOGHrdX%&wMS2U0D+mfua9
z5DQ_S0i0H2?1i+xU!?Sej+VB5)&=KKGH~%d9C*o(BY$=mZ=m&zZ<PKF`c`54E{du6
zLCVRtCK;2hfpwuyP*Sg&N|pUb&~XWwV-nikC}-X~r2mU#Ll30fSh)7w<PhO!Gi!qP
zZZ}oAcUWz8FR7~5%tP>;yTSqd84~9-twy(qs{wyb;Ohh~uft#MzPR}ex{CtdH2<Y*
zF{GEH>sLijrv7%rBX(ykL07hZyMssPExp#;(60wt3+?<d7Vb9li_7=W%GGA4@jlCO
zpxdlVnA=(ZbGK>Xz(7gF4yrgi<7VO<Z7N{PBG{sYEZ=ks(rT2iLh+n=GZ1Wel##Y2
zNW<GK7V2&?9z?iav{d>JOzoa|jO)RxR}Rk4;1rWxdNqT4-;eIT`)+Uj|2q>wuI_j3
z8$FhAlKd@gDQ)dv=;G=$&QGO~MLTL25oIHD6}q{AukKUUB5!7fBW46j`}4dKy{C}l
z8_xx;sFdEm$!t)lnjRap4)h=;ANyOim_2fSZM#<5dPAApl6HrF><_-L?;c%S#%r&q
zPM9ElgC5nnH}XK)nR6FhbMK1K(_&~31&aC5XTdSvB6lgzQ&Rk1>nTtzrAqC06Xd)>
zIL*{3=US+q-N)o3%Bj)E2^_bv=xd#VEoGS3<7soPUtjFJSlq=BU+TWs(v64TH$k2P
zzB!abuPTqdYt8#anBXD|%3y>0q70U8+OgF3+hsYm#7@FkHl4g7Fsc;Bs3Vko?g)D=
zD|7!Wj*_{z@ZiG05y}*I1S1@5&6N(YA@l0EBg}jlJjwD2^LOy-^M&6*6MR390V&ru
zMNX}2vtu&d_I8C&v3bM%MVQZ=<%_UJ7uz@dXz%5`WZb^Ma&R3#Fj|R$W5~|<=%S;;
zNT|<`E&ZU-30Hg_Ov5^FL#1I2d+)syn9&%%Vq=0CS-!M&735vN<NSpjmepL!fy8Jo
zg`Qfro3ECfP%W^^$&+u>lRT8z<(DkaUrfosy1Jy*^IeqHey!;(SNlnlwaPW23(vQx
zr!%&6vq1O?O>b7kHr!@q!xz$?FQb%wJZ+76f!*nos5two2TRpAcqM8b{zGI%r_LJT
zQ>0}7kKfHvCeH5v^LKN`Vaz^I?<MK^R(;<$bFwFUSzIUlZt4{(Pq7!h2A$Yf7gPVL
z4(-Z!MN3ze?%njEo6#&T1n`A=>)E=W8MMVtO}jGymU1%hyiy^ptu2EFU%?D_WwDMn
z*X2jw-dRPw{^G1fM3O(53XSbZr=1lTGcXssxG$EnNaAM&xKnEmRN9MfU2br<mgNbd
zWbPfPX9OQQ6RP|VR(U(`1lnN4g6a^ba>*77s&Za#lS~Z%pA8!dXU|fAGVBxKWJHtD
zh*q7^NLr6aLDQWHB>b9^jTIEWmj4rvE;R0li8%j9h_rvHpQDJ+-$iJ3(t4he_^lQy
z?<HZ21bw$iRN8!vA|Q${ueURzOUUqW@vyAo_p)ND8^lL`gnHjfwDZV<rS@0IW@u;D
z_dcAo-bS|FT3deecBI8V+S-o6i8{MyH<7XYKrhO0kve}j)buTLgEy;V^Q`e#4!HSN
zQtPzD_|EUD`m7)<fHm4b0zdx@KRQq`VRKo1u;t^6VeNg$yuC{)O-3QN+B_Q+xc8;Z
zizXi^dy3yIPQgx|%JOcC))y#sU;Y!^!{gj7q!Cp|YkW$6`XR_w7maKm9n@e=^-`N(
zK$nX~ey_}BE&It6vnTpZET1l&X|k1Lccqc8eQ6=?-<8T>;@05+W!r4%!jYW_*R`#^
zf4`i@M~9~6%NJ}m8_l6*mFCcPJEGO)tNkCPprYmwObiJxF!9knm9h1+MY3x)_Efk%
z5~;3VSOH0XF2z{DBHFUBKK4j*<sy=C_H>nS4}y;iO7;9k&<bg_j}#lGaNV|6vu_$O
z&!}^L{~&B;y<Uo9Gc!!1vk@(OJm0PMEj#giQ0Csn8&jxM6AzsW7^P0`t@b+qXQGU+
z()c(|J-RnI#|cOCirI6ORooF>&q=1M&noqprI62I5l%sLf@ma_dA7L)&1am^I=f#+
z=|tQSm$vU`+@@(4warBp;7MSILtT$DcFeAsCGoo*hwI~A!^2(RU8}RBo<EDWF_H{=
zYlNrJ@Y0FUiqrP6)VbS;qiLLJ<h}C`{mr40?4-{R*3#_}r~k(0IoA-ZgI3LrxAq1|
za$V5^gTn0j*!<<a0_s)_tL^BAsm|hbm7az#v2wPm*PM{FER1E@Q<$z!RqX<@jaJuI
z3n)^Rf=<hXTkStjwO{Jbr0(E~n2ByKH0zD7fZfa|ZpW#I6!F)P`iTgDf&Mi-;?8@h
z@?Z@y?c+rYsZ21gCQGi-YX6+4H-dDYongJ`i;QPwVrSWHxuhYWa*tL$$4WQ8+Z%Et
zmi2*M`;Mhe$46_^PpAA%&LM9ftw)P;=eCz6O>AYNh}o|G#wxsEW6;^a#D>H|>EUE>
z5hon;y4Vj!%N&k2nvL0Om>_dHeHOyo?SA&124>-?n}-*6*)MwXcKa*J6nSs!ZA71f
zDm!OB%i68N9W`qs!}YRHuPZTo!EpSUgnSvy+m-A%2X29UeFgQw!@>dNo44%#XExS9
z5MawiF9&lg_x!wqC(5<z*s*(NV=R9q*mKer*O`(b&*#u%_K?rSh^_m;vH0<G*uB2k
zd!g9ti=Btu;?DblmgdlGnS3!p)n<x47p!(*8?zTmKc%ci3f05r(l|3Re4l4By8ft$
zgKE)*N{2n{_SkB;-=qlL4v{wBL%FaQ-Nw5p`Oo%{+%!~5wy--}WK1E+X67CXz0Zb)
z9CcKZh2GIpg!+qi`eH)wfY3d16zolJeSN@1S^CZwTYdct&_ep&$Em&q_4;x@`%=UG
z;F7q43iq0>pPs#pI*r)7@p3&;5=IbcTLY}AXkGi2K({gc(p~<QXcJKV#qC!~Q9lMe
zZogW=k6Unuf}c>ZI}Z4WUMq9|sz-J1qdX#;n^6Be2Cd6XzdA~#F9)z!OgR+i`5ou-
z9-P<g0q0?kBcAfx_keSy<A~Y(wF_{rp_OK@Ghrmz>%;R6dg^Y1l-sO0v*77JLiz?5
zgT4+DtB%btL0m&oO`Ave2gy##M>so4_C_TyzuJObW3;^XJ3c>J&}4rD?W?nZ=IbH7
zG|e~N1I^Q5p|upvY%@os1I_V1J}0s_Lv-~*M!y~EX(IY3&>6xuqp`*qA6Pz&0%K)|
z>$9rBD4Y+_<)!0Bse!MC=?pl^OE_-@!rih>_In!^toWVTZspt=f+iB9PsZ6+g}fEU
zxVNyQYUOr(`T2=`KO?P;)1h5Pk@7bnt3s#tvv06$6R%|XM%6LTH%Xdf!($^UdC5Fm
z#(bbGureHReM@gdEkuk&bweHO<<SV3<8X+W>`0wT-rh`B^}+G>LE`M6jkCfZZP<G3
zGrVr3?@9g^5WK&#E@y0Lnh6e-`z@54{-uCE%Ax-Zv>*L!i-<dFUX|>Q{#5IYy^jzz
z%qE39$ZI624z@3aHC^&+EZ}p!Ra`bJL)P&0iI?ElrqO)}-{kzN;db5zW?~;|Y^3|2
zxWdR=#M_DB0DoWixQO1eNQHZj)lL2mQp_ICdy>CX!2>M#E(PUsC;7VxQr5DoHBn3q
zP0v~^^P~;Ct|a?7rLo>Q$=}nHWTKEBNi@5{8Xmuq-wCd7-s81K&v#w|+oTAXrxTZC
zpMWwRoeel#iG6DBc(So<i5iXqLP$A8O5cFPW?b-GtD%hMs#M~;>j<5waZCUnQ+P3<
z%qqZgB|`f@0@0EEFi%kA+i37*1$u?0Hc1|0L6f9dby?Wtrc1KqBk=hML+a<oz6Du`
z4S8v8Vli_)`Uj32lSK^P3WJ5XgD&~~?k`5(t9G}a$()hCpup7>x>26%TPh3jYtciX
zyxr<2dwZ$&;+_gU**H5;vZQ7BpnM{KFVY$2?vI`tt8=tO7<l6EBi2;`0;ES30&m{O
z(9>auZSpPqD!z1YKlJ{d{_IoKMcjTr)aE{I!4D|-83iZiKFP!SivgP#ezno;C`mys
z<mqFP+blkN59Py-h+LBY3*=Y>FcynBGWC@Q!}9GWk9JM$#U16D<{uP(SA0f)b;Jkd
z#0!mC^KV)ppi5IfBWOunKAiT6+)O-uRa4eXRPzr(v@yLOV7j>v^MbLi<ew9tf_wzX
zaGg7`MVN0!jSmiRYJhgzi0%{(l_dXHki17kb3e+<C>Q)_U(7e1Op<-f$=u~+lHKF1
z>y~894pGILy*%<bD+1y3qN%5Ncr!lBJB$)e&}YdIxo>21XZ9h0*}o`e>OxHExXnV@
z_$n(V83eCnmm$V}xX#?nP$YUC$x2jNKK(dsqEn2%rGBa3k+bSpmXXJN-p~E^!ubYA
za(xsV3`_n#2PK@K&pVst+$=udM~fnSA;dj{j1|s5MNB2T2qpuhl7HSxrMYq&H_v@h
zWV`Mf-`80TM>;}7I$d2r4l1AEeY$|&I5x<I-k_Y|wpaBuiJ-%-SMT%qkHK0WExKgR
zPL3rR<_@i~{54+qq`e}HFF995J|A$N1nr}<Io^M6CqR;Zsi1VtLKwR6HH(z5=6rq7
z=_zR+Ju9Q2R>oob{?msIH~T6i{0qcb!C`ogT91%Z|6ka%t+7Q9)lR2wBlZ5Wvq$n@
zEp_@dev<i5pegw$`H7}C8{ku2fb=Sv|8y6S8Q?QrfOQ7*p9SD~<)0&H<Rv^G_ttE_
z3Z<b=_ReoI|M>-!+}<4=`G;qV^?~^~`<7QpGWTW4xia?^J*sp6#v_{g1&ShgP{qpp
z7euxr9A_}@2$6REuOd^K|03}&gsCfgXnz$XXn&1|>B5JgD_FmtE4m=%@s<3GqRaRr
zjUJ82K2F*B`jN5Bt%Lf0F|{>BOzV}ZteEV#cBkhp;vHoK`u%lh<QvK<&eX~ZA`OUe
zBWLz$BMz66IX0!EBuQv}YM=i81)(MLUov@!T)vZ_3fE2JykE|~-Y<h4G#DoS9rS2Q
zcnTG?7rs+hUsiFnZ~07kqwVM{sye<v%3ty;fw<qaMYGggDq42<uE!tj>TxpnP0Jj5
zDxVnM7;z*>(CqaxH&Yv;)?bw1E6N<aLT5Avlwu<w>cG`zK^<txc*#1@I%l{PHJSSs
zd7%vd5g2jZPNTD+{aNXDrKc$&BjM?CwNc`Axtg|6xVn`Wr|qtc46gltW&Yo+Hbg)F
zs?~;Q^Iedx(^bhd4F;vD2;DF3@3)<$U3ygK=*FlY-KWICwFtu_dnsU%aojP?j*=Dn
zBcjptnI!O79Zm`Ey*Ss&10~A824iyyfv5CK;2GHP6e{qZT+(}{(Q|TLsMqxg_b#h0
zdmi-}GI=h+?D_inI{ACESuHY^`EQueEKgHm1_ye{-Y9K|rpFxX-xpv3oxV&_p;%o$
zH1L4zH!Xn`*~oV5!0A`AUt3MsusKlaj|pv1cN}boByEUsUH+|-{~pc~Z++49_2OtT
zjxkf<oC8kcx4;c5$X?pA!33KBK_(^5Nkhu-EHjqlLkWA4f{mt6FYW1fz>z&Tg~BOZ
zC=Vc;Q#h9Azgb&ydxl}SOKABnGFr9o6<$gEf)(LhewQdV&s%R^jCZ}SqwkY`Ds5k1
zCx1p>{5L#a1f1jnBALv8n{49j_f$gu9fCzwC-ZkLj3|6%r-uip{1(ys?!siQI?4R^
z7Dn{bV_j@Xdf#7|tf2RUg%Jh4A@kpu;>J$8&9&ARoR9!fv!u_!-KEob4y~p2IW?J|
z0p6<WD*M_a2!F?TGxKfj)aEDRX|?sZ{U=0MO1wx{v2(%SwRBu|_fimLyezx47T30C
ze<s-uH(jyjyYZ#}GhN_6$|h&lX;>?yuPEN%q*gg4yWQ(Qevir(^Eyv;H_ZLeWhyX(
z^-E5tb{DxV>QgS||6}?86#i=*@CyD<zmcEH{C^_l;Lg0&06**kUTJ_Ibpf{+;KyCS
zoB@8)1w76GKkWiE#H-BztP9v|fS-2(GY0stE<jFGW&RgkfSjhnCsA4ZoF>_R`rhtb
zE-QSo*|bRCE-h{U_en^1^aDMrbN|UBntDG9E<ovm3#oL1ehCM0N0>#YPao5hPgV`t
zaF=;EpC5uxK0o4NdbWc+^it*_gffp`m8GOwxofcN0H24S?#iL-Y#VbwCYf-~qfP(D
zI1?oQEkVmi@ZaqL{`)21XZSdRF_Ko5APn(K11x_9pq>bP`ijA-UF2Tb(yCPEpXgDY
z`za6gt8TY`>^k~$fMqLEotcj=DEZ3odlD@C)Nw^FNC@GH+~4FF#2t~t_>BzOR1-S$
z2P?Sv%Ks=qmHnK%5Iqq#4|+pSJ^mMo@WbXY7<0cM?CowaQrClXA^+vSjk*w>dfX9W
z>8}oh8MS^QvvZ_I7exXgxkk-j!!pIt{A2a&ZcWW8d9SmxhPm<m9@e)SkG;C~ODG}t
zU-2*<*j_dh#dtHR%>T*Q6jGtby)=I3G=5vq=&jdZd)#mIsLnZx>gq-c#tIJBF762W
zH&&0ba_JN`gtugQbd*K@XBeFm5@h>uU6S`Z7D?JTtup@?E0d6d3uyLymh%6Vm@qWa
z7+n4I6zd&s2au9*{-+0LUHd?kecSILrM*q1z4(LpKsV*DD;yNE59f~oM|-j-aS8uu
zdeO6ju9n*<OqZ~4xw^Mjy3Uf<OvPGo>W!N2L>3u#)!YNnX|X385R8eWKBXO)t9QFF
zZw4q3UyFN@I=v7V9Jrza+<^;myCoLWG*(2_EfpRX*kjI$JggAsh`nRM(AybT>hego
zkp<qq0+<f>+BsP-{V&EJ)Rp^Iz<T|x{|>V5h5aeObl=6_!Qfxreh3vkqx(0m<BkA@
zL9x$-#~megoc&cY2Nb?rG)=|Jd%OzO=x*dPlI|6HRQ3ipot62!B|4iGP)gaibqq3n
z9weHY#Wr{64Wxtp??u_ywbw`&{|s+^<LbWvpq>Afhg1@K*<c@C6z%r%D!TlFRCfy#
zUmjPB;z|-Fv=!Omns4!9Gg{rZB@DJF$WqH4Md2&+%)xaFqq6k2i~k8s+=^nl0TiUr
zU)k09>#=8U$6!|D$@Ae=f5ki&KJac5#qHb4doBSzZog2$$byeh5dQ|~TNE5H=(P$m
z@&`HqgL4&vNJIP;_k&h+y?ESFOp?bSl|4@3xA{GyX)j)~6y8wuMEI=>&u+@ra@UCx
zCL3-~Cq^4?BfeV(h?ZunMXOXo24c#6&{nZ>k+#dR>3A9zJs4igdxlsrMD}a%@GrcL
zR;Pt#-$1i+HS8=iJ#-HrFQhq(k3+#UKK7VtvHdq>@|A^|NOmi^GxC8@8dn~a@~?DN
zdBtQh0XWV1JQh>KeETW?9Z}htRD-}Us`=sX*nP)Zb7NUg=El$bF-J_@`(Dyz(V7|C
zrWLXN+Oc{aw=I$F$3QDjp%1d^P$FDmb(2^e?w8O5PIm&lsPlutKgjUgpM}(((1VUt
zqDk;4oqnZ#tEZ64r8(aN>zQG9`f0Qr{KEo%)#rh;`zo2$Qn7xWMu&lSM1jXyq!;g*
zbl@emxqg<}no%{o#L$z;PeP`WS`Ov%MTx(XNUVeQr4|WvNJ#9I$j-Olqp?o72R88B
z((Ke8qypz~=pAGEuiE!ve1Em07O7J!b=7^^{vGzeAY7!`k2J?B4OAzx)5Ug>MA5#g
z_6_ahJ?|>h>8|#Z+erB^dMt6nP2cITrK?LvOwWC-gd0xOe)qyj7yl3_-Y4)<ZQmhY
z;*Kmunh*9>CU`|2O0%g<bDgJ=NlA0Q7t^BvJ!xPuLVoyrNq!Mq?i<o|+B{{e5;Z--
zkF%WS+)rrExaY?JjyOt79ar|4HnFW&sm?6)q;=n!wkCO~4U~d*+8+M^kCzHB8Gp9N
zODapoKgi=HfhFVFJgWR<pqGq4-{VzZ3*ub|A8hg2IS4v`GxnlD>Ma9{AIhV;Fb^9a
z2#OH3Pw50?Nkb`cz3+C%@I9qt$dJjj$E|SoR5H$BQZ=DGb(hB@q4N-<lV7M9PhgkL
z%cD|Rb<Tu!#C^f!L$rjMjLazu+b8^lBh!#SG`puQ1$a5Kd;ZB<>>iz|DL1#rx&1pN
zI{b9Ee=FA?6g_kxiXQIeP`&1SnonH_|L|7^Aw(}pJJ5*C^;w@sf*Tp*n)d4(H;)zu
zN0<%KnPQW(8)GpAtv;rprCQciSS;9y)?m(EI*Vxynqe<#X;Va?HQ2NGXPomLQP%sW
zmqUyl2Hcpim>O_ofjL>bYnS{iwvrmXx~Ex2oUbNIg>ya+!S&Hju$oUSNwB(rV6}%}
zwct?gZs1r1$Zbe#E_K<*oSIzo+9LevXzlOqN^x)w7+8D8fO&z^Go__pLeHS=wPNjD
z2(c|>@Vy0zox!244v@h0Ikj~gc7rm1X){RSjs}g6WI5?Wx7X5(b6>@>uYnXZLq90|
zm|Ao)h)=Nm!$%a9{GcNFL`ZIPOy;96m}C0p!Z{}SU&oQWUC`VPBce%fPj9WcD%;<>
zfX<@1D#>P+6i-@6XS}3iH(f48?5-ZBTvk=%X|AAk>mr`qJH3bbGsbsxi;bxZ=~p-d
zJUK9lACq0-t%rKi_oki!dru=DM_E=~#$DDRWb|XSv3Q?^v;S8T-j}O&T$j!yg+4=?
zFGmB1?6`9+KftsxHd|KDSMa9h7?k_2(ikjmcb1}>ue21>70gP^ir>_gu8SH^uP47}
zNEXYgcF>P0tWU!d+GjJ?<9ranzR4k8&z2Wz2FCZfXe{MriKgVsy#ZR!60PK%{6I2w
z6;>mSTCA~O3wSj$%V4F^zKfrpg)}uwrXr>vZBHxz@U)n#TlwYjc1g;JM6KH(Ik=D_
z_(3wCG|6b!ZIFzASCU5Gw-?D|a{uVGn_MQ;E1z=Fxu%AFqwN;eUw6A<4P#L{LAiRD
z11Hk_U{cJbMESfqa~#qQgl(UZ)A-3F;acNGdGXJcoZ?QML}g=_FQ-);Wn!l%;*Qeg
zt03QgKTgq{&_k-CB1qzT?fvo#oUYOpU0z@Oi}n&f3N8Fc_B^kFsLlTL(ZGlH9p^oK
z<t)&vkJB3B@uYvL(KodGy+pYVtRf~P&RL1af*D57&TAPzl>_-t7V?+v&|i-@*$GmK
z`3?qKIV9F0Jrb)2yS3#IRm3nrv!#VxsEO!h;%lrdPM=I(?lKY062a5%6a52eU#a-X
zGf+|dyb-Xx#&E-=wR|yS3wp3R?krm(>WLnuRQan3Q+q-y!s69w+9YRwC<Oq;!G@^$
z(EKogZT><wb&_0n7|(W}ecX{4tW_o14WJi=@G?}HM~b4?co_rtv<UZKRvpj87X1rf
z1B^QoE<<r#+jLHd&RAE`oSx_ZI?rEM=lA9R<OTVoGbXYehRecRSUTgpF_odV5X4vV
zcIKXV6QZLp<gFe(fU>^X=;h~;W7)Q>BRz&lR8J8a#mX|-C^qpy^I(3s<lHkr#(Vg7
z(LYw~uAH|)yZvn2VV2BY&ek$EH}k2!8-cX9LO1(65f4TZ`i0DnBK%IJy(y%<qD*`9
z-qNn*E~n?>x4p;9qycy%&7P)AIA2EVV(j}E;+c%gJ3#FtRwoOfdq?;<4kgl+IRv>+
zjF0l_b5<N@IZ`EUrt|wCOZyfT$77#K`Zni~8`}i6GFW_e2;)DFPo(qv_F!Y_1Gb=!
ztx(3~z#0y~mF%4)X2wScr&lPznY%&#-yWxf+22EBN7Up4UZaBoht;ZY8I!eqjhKv@
zvf&idlh=!Mqjkfo=l3$K$jm*vj49u^7cbhS45Ngvg>APv85fs^O#!%;q^muwbfNx>
z4}I~CC@r4NzKv@T21gsy<|2;~5P>H5vC(%h+ZO%)uz^v=2z*n?eT$D-UExFB3t+#$
zW0Nz%-{I2krPt>4o%utlLONpFg{>pI8NILa^AD#<f5-G%tE0j?TjsLt&by$y-}5i7
z)$Ds{Bhx!Ab(lD!nY~x(<9r=LK*9iy6o4&XbVO@3H{`pOT2G`QW=BiPoDkhUGW|?X
zH;*n_r<`#HShG|H*b3AyV7K=G?Eo!Yiq`xI1-)=9v!=He<@$o@0xQrEmgR50Lfl=@
z^fu;u=)YLV9{Xmp*W`uVU(Vhh023o=Z7|86ZhF`CgKZ-0n`{O5s^x|or@3Er7pcGI
z^>7TO^m=%n(abjh;5&BOM*;P&T<@=FKL2<D`R$kF_XZ8&T3^AS<vB#wCJG0iafk*)
z$AUv#TQ9ZzIDflpF=oBMl&4rPF;C>JcT<9S5`41NIH(#2&bd^$StTda<(L2f#zvuU
zsoI|GI~U4O1CRwW?Dg4Adf(}lp4+{`N7nqB=B~f*a=aO_6kSx1v&a9Z#~+707sMYJ
z?Pn$pF0$hh4$qx<EAFG%ma*&vfnzOzECIb?N$3-oghG4?3P>_Qr^%?u?MWqcrU%MG
zN5JK#jS`oJ5uiV$fCU8_#u89g%a?%8Edee3CfOd!9{tE<m}J}s9F)~G3{U+eAVbqb
z;AA(W{)_r3Ki~6HrJrwN$IB`xeI-%)xy4f(3*s+rKO3Ukl<=vF-M#-caH~Fk?{#;d
z9tm~pZetI$TX(&<-MZ_=?bh9Wdnk14Zc`7mTX!e-K)ZE!N)NPKcc=D1yLES3542l%
zr}sd+b=T!#Vcq@WZ>c+NvD!o3{o3kgbWz=CJzRD7TZ<oC6n|;^IjTD)e5zuLx}*J`
zK@p}}VcBB^aXr5H{=Ax>y|r|~^ZTjDj4?F6P3FcOV_pN`Oq1R~msK--aa=(rlV4&W
z+ovdENq&Elch~QKZ}R9IKvb!WZkI=Gzt$fWk0&U;vU$<+FHHo9j68d+uoK)!6=44W
zY*<ru$}hmS0h?1MaW7WjauG#m+6kodXTq@k)W^nh?$5vk)iQi-n}Bs*{j9-XyewYK
z2N)us3b3_^xe4;-uBvgW2sc=7X_6LGBX$cOsJkmewY7J7be!3!;4H{w7kg%&m;1lF
zJ+I{uD*fN1jCkBpm4vaSi$K5m*-&b;O*x%YBAC#l)H0{-<I91n`RZbFL7jMf;_;%o
zAl}bGRJ-x^RgeOyH;-Bur-(Kiq_Kn;W2jPc-8=qNFF0sv?OuhR@#o=IdV{uCA}~J+
z9XsI25`Z>4AJvEva5N-Zi|5|a;&Sp`e55&-_-X>((+)+Oh+n3(Q6leeidWlK>TK8Z
z2Z26uaXmkWXFWfc-~2p&nBtwdm=8&)u9@cjy!FYn!SjimdWKITWsJLu38W-v5}k`w
zxDW`tM=sircOaRKx(qZskxVl8symAw3{oLX=W`@_9k}}oHz~IDx|4vPgd)ygNRq^E
zjmbGmLl)B*M{o&g3$Wudp+kpqld|%gWo{(M_sWyoh31<DqUlYRP(AiNC(JG;vm#+l
z<b4-GA>X>q1ui$fZD+DGvO<_~;6zM}7c{&B?AduCS-A}MiI{YcRyZvV3WY8cMxm8t
z3?x(Er8@m>AW6?oS|2|D9v`)R7Y1f)VyxKb2a}!Kpl{PBJ^McI2Z6{o%qBULKMdb|
zx9p{5u0E@E<O~yKt$XupAGm109A{x`T=NzFX!=5^aDxt6da=huHlBY7RLbq78w{uG
zk1mB1gmRf={YkQr0u?f0>>qK!P<vtbAd@#yfN1*1mJfmtytqs{u>Lp7<XkbIeH3Cz
z{;wvJo34@Q7(k^S;zOu``2UM^7^mN(boy|DbQq&|rBmokCHfp(Pf9+18`AY7M6pZe
zVPFr{hU+UYIbFWKW*p==AHn|z^Zz*h%cDP?|6BM!y^WuprFSzjO)%P7dKx3skJ5YT
z=Zsj@?^LTY)f$;TL-7}M-;dXO>6461t7+~my^#^?Uv`#$$cXJR^`@o!TYc_rC6%fB
zmL5)7m;-G_&xObll(nbdKM<QY-{Pn2T#g0_Ws$+zonA@O_ASh5U<EWO=Zn|*bAZgP
zBvmx6`KV~;O9zl2BV=ku35{a*2ohhfnBllysjix2V!Sv7HI~1iBvH(Td7pEX)kWtZ
zh!-Z#%ClNNh@iChVo%^2$31vSTtN-D63LvbHC&tc3oG#Ng3&UI&|Ye`?tHZ2+8x?)
zN5!<Umru%7vUe|$u5Ncu9n<CA$Kc+G?ocB_dm3A-Hp|m%<Km8LfD6mzQCaySyNOLx
z#~$<lQTOI?aurqk_|3iDx0hLxo|*JaGK2|B!X=Op7IBh52pD#Rgf;Ao><AaS6VWt1
zgjJS+AgfV8!lEDovWbW*3L*kg6cGs`i;BD`0t&(_{GR8Ws=M@(L|?yu{N|JNy|?Pr
zsZ*y;Rh_Cjb;=DML{wIc0TjR$?nEPcEXyqC7ER^+RttK4XCh#?jA0|Y9}hPcGlfO3
z{fP2qhVrF`8!TJ!<$;#@uyxE*zOY7;eEHQH^Mxs$VUis4C0^Gyyb&O`#)l;y@JhdQ
ziq34((X?)?y38D<QEK}R)RmPCO<#0A30&JXmV?~^^cZGo7lDbugos{uBpLx>D7spB
zlZXN7L=qy2j*>)X9-oml-?@!>YqzF(%NlGd6B8>aH5P3_%cA<w4#c-=eTYTz!=p)y
z9Zyz0|2qbtb}k&x|Bg+BMm^+65;p1=N0P8$o0&Hsm%tG9kt4?^LgV@035igQtOmm;
z6QNPBoT4G>Yg05tJ?==7hN$07&=Bh(I(Oe$>T5M~caDuMWR;b-8`F;rp$e=d+WOP^
z-|iAWu_^w5>i2<k2@{^qSUdk4#Qxx3z&lUUVMQ`CsTk}m?P6pde7WI?;1RY#$|BRj
z!@$z1G5PQ$L^+Ou3-QsllB1#@>`DaB!HrC0qcw9Uhf(OG_59&J!iVr=BvSDohe%hx
zEAOKN2v0!_dc=mK_adu<(18yD_yXcUB5tG>hq)f+%SIwj8tcLSACp+U4T*lxsqX^>
z%V9JvdrB6QTbY&_CpaYE&|h#qI>+v(W@WTLSn1yq1r3;u-WV4=g4bcFR!)ChJwo%o
z)e5LwLY7uJ052h{fgd*iIyQz?#0SSAJyLT`B~Q_D4%K|H?T;%*qrEm&Ufb=jG3}j5
zd$^<pdv#=yQAZ}S9mAI)TIlGkE=0avZ~>SpV`=mg2rp$y*=4<OuI7gqfzm|cLJ5Aa
z7XhA7@J)eOb+pIIvyS$#$Zvs~+~oZh3zOIffDe<Bby|06A^a3DT5;FDsK@yZFn*Hs
zW6FVOC4$)?0BsV6XW>W5lR2n>j$tm=>R~JeL@&dDS%`#^5j+V<jS$8uhP+9;kHW^P
zv@%ycg@juoX~*!Uf-YVh=7<W#Lk|W$4iI<;;PS3Yt7i)XAUjT+fcI0hF1dtWgf<K!
zi<R|eViIsFS*qNw+#CgXe)wtP>=`9qGjItOmh5p`j?^d2f@FEO56ipUq5#lcC@owa
zM$5e>Z%^)kJe7HuIaLh+4cc*rh=h0M`G&9}FiH#ca{1-`s9~9?%Ay1&s!t@$js&k=
z_uXCWSC^~@X?6lk!O_N`Q|kU<oq3Kh3L6|KiP`ltA<rOB)$w+5R-j8#uW-RHK$OV8
zj=!fj;y~*~BaX(vUHOSWw^~CE^$nR>^)$Xt;cI_=V+pA<WK($^;p=96jd$<^erD=e
zLyK*GUF`Ze&KXi?wM`I{Zb+49QBh`FRific*E)BlpEx^}-f+OF%$pS@_Uc5=wr<B^
zzMm`UyvnTrq!&Hom~%UDr#_9;*7zHDGMcti@<eh-ze2>G*LZtbvCj>j28!@>FhTkk
zO_!5>{qvZoXFQ>pR%bdh<4C0P49GEl%0Oi?qbJ_*N<4$p3l67y7YH8h*5@iQ#@K~+
zN|CV(jukx1%8m_PUT$ybBK(1%yO?iHo@M)Dof}-NJZ2?E4AF8G9k$#{BtBD_xfR-)
zWa(xr^Z4;w=I;jB43WEK4#6|RVCzF|x<4Q1;f2q@Qn>++=QBwF_SS!cSmAB&^nSV9
z>vBo!!RrN9-f`m$ZUNx_J9;Ku>jhxWplCVNoeQu%;&*ANZnc>nnA<P9Ihv7~6uiO#
z(f}@DWjck#&X%QpE9VOy>>`*yZEu$$4Z20xLioY^7);=lRIqiZ7wDXHwI7Vqy}oj%
zj1^rPhwf8o7+`&RYRGUodktJXCVg;!Cpf@1mkG}RJr*95KUA8DI1>@<{9~bn<5_jP
z*qd{Pw<9c!+s`6czH&5b2;Tpo*%h%%D<|WEvl&(BDO5&SedpjS*bnhQldtxoSU}^+
zieFCM-Lix*W5q(zxquB%AV>%O?MPu{M9h^sg3l6dhtr)yjE$TZQ{J6Vl?mgwEfZo`
zC^0AN?R3=Ytvjz}P>MP+GWK?<B`;q)NB)jdBE*$$BYYPUpk0g5#1R;-T_>pL+wM|#
zx!XE>?Cwwax-4}MbXzC7-Q(QaRIpyH+DhHyOP$M0-Gikr{I2C!*FmZArbjVGJHwdA
zVCkZACi&|JsL^8V>@l267LC!)W8{-SYP_F}W_YPo>JLkJ1BF9{|2~NmN+l4wc4<tN
z&Oj10Yo)>~?&ySb;Y@fQcyH^=4BJM2O2yz0q|=B)sW<`)iey<5-b&$}7oOIzs|Mc_
zvS1z0A&sESkV+|z9FfM+i=E#uA(<D#e8?~LRR0316CR=+aW`N{NE$+Uy}dGym3pOL
zL*Ge10Z$^AJK0t<A)D67=E%+3ZD38^SYj|#5=*?;ZD4tYWURn|mGG?!H){;#V)F_}
zx=wkT91nL6ufxI_*gS3&7e|~)N5f)oV3(|arI6W?BSDAp=#0*(oD=^p^g~KXNpRQB
z5&LM0>)fa1LuD1AjKIJ_%*O0J=63NFx`+$l{tmU%v3dVGhlng9hQS{vtA&Odl_+#C
zx;d5_2aZM#OV?IHa**#%z!2S^p2$}w35vtbFT+1EgUzE{8J0_G7>C2n_JWfp@OGn@
zjCBsgB;Y}owXaCU0TU=u*VO+#ls%a*pj?n%9by6Tagv0!AOtUvU87EXbm3<4;fahv
znF{+a>&=1|behnGi^do>vSndH*+Y8DkxgJCQ$(=M$tbIlnid|~1uuij*nk8{1jW-Z
zZkUA<)4ywGcmomum7ntvCI^;f(%U4Miirbsd&q)C@q{Tk$6yDv2`Rm~JmO2aG6I70
z(S9x3Oeq(_;|`ka@aRNtYD;K=5{<~p)qu1ccv?fd8S3kkK}+2!CC*Z8L5!K9_0!R!
z>iFRW+KWg%lu-|yfjQzv&w=l!W$5dL6R`h~;`gt>4!G)LjjhQ*lviNSNFj7l(e$AM
zlpuI2Fv6qIekh)%^rJ=j)^?7DEIrEd>3Clpn$v-~$7?_a>B0O~##k)LaAG0DrQD>W
zF3khfTycJG;`P9BScfB*Vi`Qv*B&rHeSjJ^(NQ4WFABL(+`^08T1e`L7b>4(_$5fi
z81Zu_20?}hnHJNnUL@W~q^QOTs(YghIwb1>(ndM)t=B#z(5OL1arMC$H-Aa8#v=;l
zriL&d(R^083K{N>H*tMu0#C7lmY#B42(C*2Pp;9{DCcmx`9#e3SRrfB{dhhXhNaF5
z!e%E)*EN}Lzff_-8JwLNwosXiT06JB`Z|Z7!ecy?EFu0z49U0^b0c=G3nuku>U=Ay
zCt2AllItUJ6Nfa+l8=!`bUI&d@j&4qz041Ng&)F9*B4z%ni!QnG{Gw&%{pgai*TH@
z1C)_)lW(lzqiMTFm=577z_Dj_!{6Z-zMi$C-w+?h*S{}nVdL4Woa~T1OWx@IW;uir
zM5F#pJN1bm=sCivLR_5!0fLhPPFMo0=|@SdZhrvapO^Y6hf5)wJYj{NeI|loFSig=
zk5SOF3IS{gD2Sq7$>`Ash)lsug?Q{R+!-LIFBbzv!cKhvgL5*km;XC?-LUGsMmy(&
zygv&c;2QR#xM0U>!DuJX20D|bf(7+`xrMym$52`U6vUCGw8(;rZF7s%?oOD(=I?ri
zZ1AU6q%Dng6t&@cL--JG1>mS9D4#l<9e_&yFvWTR(j03Zq0C*Wra~uYN2)rjr|L#L
zq`FxE1aFfP!~a3p=^qWGZ!%vfM;DVNa^0XGeh%+k?_=K=pLZ869!*?oo85?9whLPm
zRC2Tc_`|jffXr9sngwU4`F5_^>6`^b|Io5uhU_3xn9oZVpJWy?$?;^Sfbjhh1SR_!
zZP8qXn1uTpWH}<Ia~Vu9iU}VKWKX9-k`FIIxlmN{DeuWdB019P*oSl8squnqs|O<2
z_k_maU8GeS+130%@_G3o^J?Ssa&UT|^JQc`3eyFrdZ`GqX>|W$qkEh`T)gd&eNMYD
z;8p$trsd_-hm2$uSS+3#ejb3b*Or$#N|#&XVh^TTmyuPtp6GHu&0>PI-`nL-Smc+N
zT!@d+g;xMPo-%8Fuk9SPSkG;7ErV+pdD4ynQ`eZeeqq;`vGW<g;wLFlx_;4WN!gs$
zD>#!kvGO$5IRe-^i9f*<FMJYQ(Q5lB;?r>$Vf>Ct2JFCG9pWRShOWoJ0RaL!^VOdK
zhSpkN$7d#Zj})4A#5;q}0Ln4U)94bg$0E+0xPHSqhwx=2=oF`1UWm;Kf6?bagIaU|
zYHN~|hzP#~ZKf+he<8$(iN!+npUcL0SsnPQ@PGuQtblAhJea<<;9%dxDU&9%#8z1}
z+b)V4*Kn0<;t*Mst~?Y4WWDf8R3)06=nGk_z+5Gg06NJ7Yeg-m0N`Lc8~#gbEp0^&
z770D@>$&1^yvnXM_Q3=ek-d-y!VC)U-0%h9$W-B-m2PNtO$}XxAKr`*@KYvebcC$^
zqWZ2~8)@OY_8M$)(|0ZQ!Rfmen|e*YYsX7Ht;4*~S?&kKT*x>O&lw!M+!~iM{qSm(
z6Qa_fxb7?vT;YTc0EkYQ;dyx;smbct9sDndcf*zZ1=>+S8^CTC^$2tQH}C?>CbXwz
z<f7$E@AMs=#n5pkD@~9&qyiz#1~}Hmmt<BX#`W>lGfGywI`O#<K6Cl-Q<6o&KzlwZ
z642IU5sA{qMX}x}7twO5NulIiOqwZ*jBcXfKq%M6OctRoj4>P1XUZ1QydE<kgL;Jx
zuz;{c_vVm9sK%Uxr(JsUZi%<}GKp7G$_d|^a>gVmXNe`RRZ?EClnZD~IX_Ezt(Hih
zc6PAX?`&%7!pNT}GRFd(GII!?+KX@}C9bH$NE-{?LAHDXU-0YwXVwfpkH9B9k6*;q
zg77}!I-IQ|f~mZmR2Y-AE;eHl#m1thq>I&Nr6*ZkSzBl!D=suYOBpRROM_jomZdqI
zSw^Kf5?}2~^8ic3dv}42sZ42@q;+W+(@+}8Em?`^b6S>00OQi|6ANw9vf{qj6MJ3U
zuZ}zExcL;RQc<6=HY#ow;^7{7?2)JvA6r4?i_nXXs(%9sa!WQq<1;d0?p{Pqd-W|4
z>}Dp(gln?QhwC3<P__;&5E~r(>ILaA!NlMN_>W2``?$RLZ<|fIa%)5*cP8RQ9MkJE
z#^w|!#4?2U6=3<$+*jZaO+foQ3N3TNf@0z(0NAuX?+i`w4{&SDUm<{#*(y$qum*r(
z2B7(@0nZq`1JLb-KF{uJ8tvwHi18Nv9JD2_VPPEhydJ_sGt5i20d3AudnWouiDr58
zQtF22b0nGtzWBJj6dY3`d*T$>QDk2ALdDxKrm#%m3d<T$ac-ilQ4Vr$g+n|)QP$*z
zK@CYv@tDx~8$TNJsNh!+Xk?eE{EZ{wv+@O57@R)V`2#?AA&)X4RA%(jUUIji#$7I0
z7P0z^J)?B@Bm6bKf^#u+0jD4Q9_WONcAGKZn^_4(0NaegX9?5}<^;gNlk%@gP9?Vu
z4T6}R&Tcorx31u4d$NfY{D}}5X`5a!8f5h5T+A+m7o|w**n89mWf&~F_5eOs(RB%w
zr&`b)L|5O^x$IH(>&>xx7Z9=+dEhnb3u36=O}-cfft#WnRn>kMCTT`NNLlK>XxbU)
zsa$Va&=PlBT}0Le2d5w7T$;h2zsPT<hukcK5HVIKn{ZJO<T897CGYYvaeW3a;knc(
z>|}KYnNm=uR=)(`WZy57SQv;ARU!DRfXdBJjm!HP9E7W0(~x=>!dI_FC`VO;CRe=<
z0VC{af)7c}m+^@PA6`#5fA|8h0_y_H`IU2ea&kq)B7_>1k(cD@6zMQP+W4jE_^F6O
z!y(y#_zJo<+4#nB!K}+;gvp%6xdf~T5Ya>xDS_gJy(46Lw7nd?M15R>xV;S!n9<NU
zC8@PtO>qFj-$W66i+K4bUvRfx^#+!#v($;6P39MdFK#ItI7n2$J_C+iFtHY()F~5-
z0OvFkftlb{euM7tMk4HzWuH=4coV-sP^mjyj(QGn=J)8~&yv#7;aB*D+d4~QWF*4&
z%NS7xdwcqN@nOp)%cX9i)Ke-2IJ@Kb_F~MCVYj!h)N7$cJ1+H_aPXU|Td4=>`buL;
zy}|298GaQxBEOzeu@LBV8DvB}Juc$uXp2>NI@<EoL6IWp2@!Nx3cAZeS8rkY#wNJZ
z1Ffb#SGez%;0lDe)B)1R2ClT`1f^4-kvrl`ZOQBoZzQ{KB?0AOF7%bk;n(=pkE#^J
z{Xs_2mZKs~eOA$yQ{^e!@~{?hzXF`m5Yd359SFb9uW=UbxWH4i15IcLQfLQav<ap@
zk8`R@L>s2^@NWqly63UmaB<Bemk@$~Q2YwwWu|w$TN)qyh5@DVy@RMO6n+rho3rh0
zXoh$`jQ<=Gk4J6v<H<jUPr%RhczzepWH`LjIj<x9e;UGZZ=&46cod#Vc-#l$Ob0yH
zy;I>YnQ(06rozV}91AGUwu$gwtS!6+9H(kO%t<W9b4sIwD{y{`hfZ*@XfGNYMsKrV
zBQW`n;cp5|!xT4x<0`~!Vr|)Cuak&BmGK%C;6y4+fKYv^;!0sFn`5}kSFYlqHyd4!
zxdWgOlt8P(Nyk_Dc05c@23%f_V;Hg-AQO8{U5F-@I<M3<)6<j(UqTVp3{7@4bXI7!
zN`(gms2(AF!a&W&p&xRVFiy6aZAy%<;5%)rnfA<<X*04`es+{rPxH#OKSm>X2B)v@
zd>(ZPRRe3~%D(Dlkk$DxY2gT<bK5Fp#GhZi9ZjdGHpsYqPXU(af}eriot`}G+5@DS
zOqJzKt|vfZbyl8UX~KdJmrA*R##V_I5<_8V;Q9*G58h-b>nr(!pPd)<YlBtaK(ey*
zJ#B*Y4kS5BFBtg;;`%Gsi;x+YXl-VBhnE@Nfe1@zuh3b_XXp8WY9!+C3(Yp)XG54=
zx>T-6-?Peml|S~5Qy~m9IdH<y%nLqXgU8|q4*%)SRA!#9ijI$C`vfbAy(1<xF3v9O
z`h9JJuJfX^@9-#*XzEo51MpI*JI@vcZDIqa$0|c2h{6QT6ILx&pK`=R6Kf06f{nN>
z!gt22Udw*dtlO|JQklz(U#`oTACBs9$E)bi;Eu6bf}$cZgTo(U$7!=Niy=~?=zg9~
zXFmX4Nj%18hMfZDAe6YYnVrTPTf6cHbod+Gi8_ld>|pE1rY4oBjDr%Y^mfWUXJ2AI
zxV9uf9)Pla2Gq<YN@_y{mS&GZgja*TVn!^2-1t>y12g7G{8n*%^s4a_86OUT1xrr`
z^V}eMmH0GMl-8_sED~MUme$=63$`}X${C;@1Y7YGK+GYiL@8OVuD4Jk$Acu>X=%P)
z&SJzbXTDHEq9V&|wJf%biBO$?`V%igmx1|XRO%FT6e`e%7cF?q1RG%~vGP?AU+*9X
z#ejB!4h~lVW8orL8)VnPHChGE;3HcnrC2kmGdG@aod^(G>RMcR2b_0q5`Nk}e`(-a
zr7{fRE*9z<>^JO^YgQ`U#2P~&6*x5r1za9U9IsQnd{y3_gKNvZ027v?T}oBHs{QvZ
z$ltAP4I1N)m+`#kk)foQ_qlWE`5I|;YcmlX4PDd{E17L0>qLo-*=FQiZ8LAz^idVs
z9F-o0xl>`HDoVqs{oY+M9vf})(fE5}91Zb#v0J=P<4rjrh^QB*`VBN%tb@BXsYa0n
zx5l~*cS1i>Cp4HrTIu8Jc&UBdTf({Z%jN@U<QucvBHqcnYa>DN>a&3Y^05sc**dJ?
zL_Xk{1#2w5@WuBag!X==jWD{7tE+49noBtJ4%np{0A5E&xvoNa#TeT|FE4aBUgdkJ
z46~On)^C}fOk(a#Iau*3<#%Je<*GNMY@EL#1v~sww(=6vyEW3Pwp~7^F#LiIHk`2I
zOcMsd1Tj3A<HS2@VjTj%FxkrAfM;lj*fgqN%{efpl}owh7}>UE*0BCo`x|WUNiKRn
zaiiUgfl6#&fe3OCf(VYROCo$Z){W^HC@q$NkMY6A((Hz}2Y_1>w(gIR#4ZJrPiT?c
zw<%>F#QEDa!GtRy?}DUc#Qm)91H*ZSN_?rq*z*+Rnx-GKF1^aoc3{NOF(bm+D7bh+
z#R_|f17+NBp<E44-^}?jbmB*t4r@oU`ChEvjqJE7@k>&ffu~=%CPJ@J6nkur+SVFL
zR=3$%8dE34{0ak)S~mK|&I#+J5-K{|$l+j-G0Mup#wK6=5aa4{yI0>}yo8I|p>kt!
z+eam;`BskB0QYdXbA~rz&WOsaDeC1=i2E17T{u^@gm_K?vEX_cO2^@ntM$?)LRCQU
zF!&}03S%<R3c53TK`uqe7#YG355Pi-_(o`|W~31`vXDk3j8)Ec7>;xp(@*nREESSl
zr+QP2i7O=R)VMi#FG}9qDK1)iI)nT8)#dbb1>fXbH(u`Ni($R8<rCnzxtN<Ahnb~e
zd4Jr9z*G7=2fv3<WVyLIsuMW6x3*-+@>|3YHcefk3tycdl(8%s-Dua28}nIJO3zVg
z2}lr8R3g+^HAO`4Xv2@uNq%TpqKUHq)3vtSMqRL_OT7zYNr&@sJfB%r+o<e}Cexwj
zBP))xHJPj8oPa62#x>@JHpF?}pU{u~R`5%2l-TE&?~ZtROTIf}n*;goiZ|KiyEoGq
zkd1xnD}=uS{`s^^)qq@_NB98hNJF_LWXyLdwKKm+j$~jMy9}KZZy?8A?xi9wb1xMK
z^7t87z|Z(n2ET))EPmH25nuxQ&*Iu8f~d_MR-R<uK5`6d^Z$m=nADvnq)qrYDQlnx
z_Dq?78-)^J3WRZqH-IM^q=`sYJ^RktYAY1b1_-3X_v9ANpU{{7iE_}LDXMU)$R7u?
z5?0Cy8Md8nhjhB!u6SDbP{1)64;^RR?V`;^-7XsH%w)HlO?10C(^4=Zw(fR09u`a=
zkXI9_#%?#K-EJWVnbB?+Zq9P4ZWmEmEnK2UZ-W}$E}W}%6|~zW@q_4gBa<-L#{0%7
z3@3`BKDWqCUbW$(q((h1nrTyqOAIr}I3S4o+fKuZPVH}_?zdD-RIiijZ;Oe#;p&R?
zw_V!bc4>dx?euhOe>)m4(%%}MD?bwbt*9QOEw7XPZBDy7wMjNzovDmuf7_+~EsAIR
z+pctf+lCjdyIYcz=x#fdh7J{YUKj@@Nd%&IjN#mvBs(-L)edA|W5uWo4$!{#^KSLq
z=zHoPgS@A<fX@6_atjE0N7=y{1Lr-qm29*Jbae!UU8DH;3p8ZTf-~7_9&PR4+7Y@0
znXGO{=#zlKJ*NNZj!-7p0#yCmTS8`>n(JKtjP3~yPOmzjK)>SUz!Nu%vp6{Q4fh4Q
z`~!<A?!v&?+W&n6rXc#HK^z+wuF<}XTd4eIQ|DyW)a%=!TA=pw5nciLq2I&S+cwyI
zAXMu}v!?^~#%$WmL6txyS%Xa*n%%bEYe9OfeaKeJ)Vp<6>fhaGDP&}8PPS%b3Iy|Q
zxnZ6=Fwpo5Y6OV=#CW%*V0T;E@6eQBL?<lM{hC5PwI##lG_wVBEeqFn3x>x+Q=1KA
zGU1jG6D-c@CQPYdwn*F>8>9*CDTNQBjZ)i1e_*VtaBRi`3(|;l*DB}QZc`){{`Xw7
z-ISh00so`jl%D_NZc49id-UpVN}t{K=(D>iy|LVw-IQpDit8NMpfdY&>D`pEigv8-
zrj#w(vfWJ?+k|#37iU=qf_7|-Ho??2+)c^a-IPM}Zc4vf>NmS7{n+zC5uDP%lxQ#I
zLws}XabM`LvWSXzs4>p^_+i%wJI_?OkMH{t-nhq-#U99J2>)oqp2;C*&*b8U@Ow@8
zD-Gd)1b*(NB==bC+WrLgjc`(iY;eL>*G76Vmi!doLyR*^7&yWh%B1^ZltoPgG3l1g
zjI1<id~ulzrZw@-2*S|)LRI1Xdw3W8WWoh#Pr3vm(>a6nb5x!&4c4UquJ+OxC|rgf
zunjtGfjCzA9W*^G3vg%CccH9sl^1W}*2qY#&UJ$`Dx2<~Op>z6A<XJ@K(@Cz*Y&6k
zWDJo`CSn$KR?Ei?Tk=u;&1@8>ZMjLJc(Ur7Mq$~zm{n^?MU$P7?#paK*cN*_MR0G^
z7W53lXJZ+1usP#&p9RLB+eineV<NgbRu0x5tE>V{ho0tiExn)8IZUCn{@W8E1>H-@
za5Gi5QVO!fZ?+tef_)$?gMK7N*!2F3jA-f-d2n}V`-wmiN5|{UmSJzOHXyigwG7q<
zGy(W7#K__-!Hpi3-I6_j^fc5Y-BSv;Lcyw6L4xMTn<1_DLh_PdDNh*@{c9^{hcne?
z_au6m(LE~uR&ll#2Qbt^RMrVMBl~on5O$;rD<oPd%E)N(616q?ZrYO(Uth&nr4|c>
zMv8NpzQo=<$colRS+{eDXCM+oiEE_A%H?*1Z6hOd88<GChkiDeB99#y=M6oUxJ<Tk
zKa|PJK69~7{2D59@yO0#$fOSIIb<h%x#9OHt(c7fg)<^SE)Fz&AECjn;8genwpJ4p
z{tzDvVg5DP>4+1NoOL3S_lBk)8tjGy_Joes%f`<3r&ymNMLB1^E9o5Bg;nzqvvyoA
zv#p2R#r78_tv^Dr?28o;=ok7zEYE?2*c6zNQ-AJ<4<lSG?ci5Cd;}k*Y&rZ1fw4H~
ztBA0RG<8vM?!x<C%BLp{pRm7ywe-Wmqsl`OqdeTnJ2VD@?F~&lbZ8=0J8?-z^-*As
zd~oc6WIW<$d~oon2do592;n3YFFE|d67V3iZ0*>qK#UDE{B(prC9!NQ4gNN6Duj<A
zsyC;Fur|uppToZ54`c~zOZ}9vVo^|@PrU;84w5p8XL++}paj_MAM9mu8^oK@iQgnd
z*+O6&Y<I+A3u$lm&hi^9W+A5|l=GT-sOuT5Hg(Kt*7){hXqN$*j}OTh*bwBf7^W^p
zJ3qtwp+cvuJnH&mY9H=4KzMdp5`?j22)G;sb?V{UuKdNv(KmQ<_wG{w;$g@G2`wie
zp9R_I;FgI2X9{+gB*;weh%te{{t3CHnTA4)Cr*2S5_yYR;4+@tV1(YqLHkTH_b4qJ
zR#I{MqxwF@(Jr1_;@Y|F7Gb4hCqR<gX+(elbeXJnh@W&>_8>nK;4)xa0)S53mOs)T
zwK*BziVnwu6PUjmt$NKR-wO~)Kh^6qe>eOYgwB)S6rUzBR*Xnd^&wf4kP|6N!~#>l
zd56pUCn*moLbAE1K433C?(nz^6L>4v)2e%;yi3?Q@a{vi+2_^asfc?xyWt`GJM1e*
z1OLfV#u}p|j5;>EGB#H<p6M1{g7O)kmr`4??xeUD#;_?|yJN30*cW6WeWw0#A;ISV
zDNVz`R2s^_9MH$Vs2I9uc`z{5cSiys+k=m6eI6g!vz#x_Y<*98`t`l=wEp!}rasO5
zqO-~nE$U}<PVxVI-;y3ZaCfwpmjq+jN52-8+O}(j8&NnGs0|$a&;Z{OfeUB`4}qd$
zVRr;;%tMNnZd;n}EKNs)^Tu?{vqd`HOFdWV+B>F8`{K$=?D|nc>_yfXYcmBwDo-jS
z=WBY>7L`01f1$>chKBf}?BipwYGZS-8**C3K0ZzD-GIMpNx&(;Cnoan5NSixU9Hlk
z_5+vvr}@Ipq`2Y*3h~BxOZ5rtEnz<(kw<|9%QDTk%h?(6moZ-?CgH{yfD;Q1kRHL<
z3`ikT5MrGVo9$v_U%~s^mH^2W%4<`X5Ce|B@qV&2v6?ic8rxa8BlO}rp)vJf%aZ#o
zJ7nQAC-+-oMS{`!O!z&3nj>m3`~H1fe>dj5*mll_C#deZrBnSSYvXwQu%qH0{yHG*
z3qq@D3P$8^+#Vw5VrW|IF4+h9#$%(}2z-%gMi>)`l99y@=T_jn2Junf;?*&AWtXxa
zA8sW(9czszf{OYA1bCI#Ho+m!x3SqN^%y>mZhj#@aj6t`JUb!f_5A^eA+8Uo-5Nh~
zFtrXcAaHqXV-1gNFTzlL5a<*Bjs)F5kgk59WFMZyoDbl8u!yW6FRVO5q@3%u?ntv2
zJ^^C-%fXX)*pe!2Mtox3ps*}Qyl!i4_(-h-|4|1?ULo?*5;$(zgq<v51dHs93Nm-U
zIi{g9dNUkdTtNcd%Jz5{)^)g**Raed@0~Cl?B9QTOw*k#{&S6BL;N4!5<gN$xhkg>
z7|1zCHX(B~gdLp;nX4gey_Gvr|Nhe7ur&-o%(eF^WnipG=DRhrGTfXAu<H^09K^*c
zt@6j0Gsw3~IoukVS@}3BCj13p>j&dga&>EDT@^00(O0IBcOnQg7((j&UKR&(0~eu~
zqhRBpIF}dt-5SMeDGD-bc_Da;q-2J%00f>YVQS|uX8xw0J%<{_J*3TBbRiN(?xs0z
zn=m*0C2&DHv^?6!-lz3K>9OJ<IC;u#5cjbRU_N|*qV682Xup*fZGJ+u1Nc*;-Gs0b
zZ)T?aV^Uy)8)wRAAj-~^<%p|ZY}V?CYcFbvWXjAL6KH5WvMsFb9Ft<yD=NCS13dU-
zD*ld;C79q9tG_~_7h}Oz5-XG8G(;Muy8MbJ-ZLv)Pvkh?a_((f7v``eBY@{R^g254
z+Sj@IFZK*;&N&AdzNb86OX0xn&t!)KE{NQ4Jv(k)LJFJ)2cIHFXP8~N$_bKfl}Hw{
zAAr;(yA^(-E2Yo{Potzb0!-=(`QX?1nk@R8)^|>Hq#wogEsT`4b>U^gGYEPpaIy>*
zD)%7BMCutAX-RyKG~%Oxw8r<;s_;#du3Woj>T}0~f}aBSilvZd=|(Hx0OkSdJ&S%~
zQ)#*1&(2Yq0*}1sqtcfg0&){c&)dm4Ida<@Z-ravLjfK2nd6*yA@e_D-mkK|;80w-
z4+w(ui1{#Ljw5~%MQ~Fx5%G2uaYQ<zZ)b~&+jfZ*TOuMR5>u3Pk?30}0eyUghSm*n
z1pK*7Xw4+{Gg6x6{y^M>m;2+A3>hEW0W9|ilOJovqPN`d3$DXZwS=4BsjRUt&*819
zg8rL%Plyc>miueRB@rWph%{OW#H3X&0K2f20$s7V<k)o7GDfYhQQS5+{bSLoKn9<n
z926|)D&HmSKwn%<7uzUi{4oj$P6%Y0Q^bOsNYTFn>$<j1O!5;*0YWji9Ek`0${$$W
zP;PL!IokD-PZFwkdY9uvR#8i(73k|sJ9!tNadr@2n?rwmcaW9*6G`kEB`wByw27Ux
z#z_;EuSvsn(&8>{38pX^nbo8xr<1OQq}nb|K}6JsedlV_-7m<OeJqB`#(+)8XNobQ
zg<{*l+|_2<&^8i{axnHRw%lJU`7vPytUqnrT|4=qMW~Qc+lL+jI)6zzqmovp^f)Jv
zi<(i2OpHyIvVrExtdch|o?Rl|EKKqy6Zs=?$JXnJNvO4-;%BD5h>vXjR6a0M{<J)^
z_0P!DuP>Hou3p14);0CsP!xyjRkCp)-W!+5pw?Y*yYt<JdBIuuobTdIuv=Zkb#_C#
zr@;q|d?X@L-n)rVZKZP6Ux@xL0B(&$CM>ZP@FbMEBd6M(;c?#C7ASs0+%eh>i59#3
zQncWF5arfb+z@9N{Yf%6o?O1D1cRqBa7ADzTS&utn~W0HM*t0ZvuhL2DeVkR=}|WR
zd5tI0E#qH^%ic2nMU5xD4e_p=y?j~YSvBAt6bG&ff|(5H7=}>bo%LsnqVkuOb%sAm
zT36T*TmfE0IcRxp8D7;qh$eza;(5*BxezE;h39p}b6O)F;VVNEeEqA!Qq)p;PD6PZ
z=w+6pA9PW<j`Oz|)>{@q+cNmh<$!rhVOZCZj47+a%R#m?%uXNfrr0pxnnv1(e5ibI
zJyG>JkvCTpIm1-b+%%l4aAZBS(p~L}2f(CV3GgyEya)nkbn+`5Z^gU7BOPA&8}#$A
ztew3ZOqHvX02MyV5aEq4epvp_vUt|vW2|FR2(@r(G>=tXG#t0aaIr0IaLKH7n0Iyu
zrSB4FMi#hY4RzKgh%tei+Ae4omuF4jr8ZEwGmJ5*anF>5^FPlDW4v+R6WV8RYG=+(
zV9&&^do&=hGREoW|4RJ@Tq%(i4O`8GvFn=jjdT!TKOk)Nx8NGqXrIFamkfE~N^;Q;
zpU0zf<aAcEoq^?-7plKQFlHK<U%Ws#N8IIz6$cG<bHExMmNmM6&Y8Wv`p4P94Xy^G
zQ4X)Z1c<e+be@&XgBG{OU`w*}C4<;prSRk=KDZt-Sp7Y6jwudb#OK1TxC<0HXTlNm
z6e)Q_OP4clvYm(Mz3QF7yW)Q=Yh%4->v)I?-lI}PPC&NENBa5sGHB{1O<Ftf%?+cb
zn?PMB%%5dax^OO_yZoMvR|sxK1a^gbe7t{!?>T2Bloj-pmAxUq#^c;?@G5gMnjq-m
zJr<n%Iy_xgeTlp;tem6?7wpc2lTpz!8<d2>efV_x00bE94HTw~f+WD;%Gr3fv(9=T
z2!89F{!^Vv)Hx_?+aq=y%TbnEE@BJrWn@!cHa|1ZT#<IMxlWc#t`2q#6cAhGx!|iP
z3u@dh_#<BVQ*!Rb``TJ(Uk4Bz+r0v`)j!||)`Id5vw|YH6~aWb*d_ZrJznrCK4521
z%4GV&^-&lsH)OKr6}z->iE%s7q3gi;0_$~AW~7kFKO?O}BTMutkTPI<jo1J<^(Hlq
z_C6?YgNn6w9dK8P^QUli7-AU!c1go5p={%tecZq~>LTkOpu?f5ZXjhE>I<=<gKY=w
z!)cN5@;XqVJaW_S9suRW4X@nF;-+q*2l-ij!<D&kR$vQ4dlPUGGg~c4HvEeg#5V=8
zJ1lbVEM;TrjiCIm3CiQcc-j~EkSy%eOT8A=p)8FXvi`E*7O-!*Be%zi@hA4vUovvt
zJH6KlAR${aof^6p-SBqM4sU5RggpgF^R$CS{e+OF;!F-Jcs~H|A|}!^^^3K=7KsZ`
z0N5J<xL*z=_Xls_7Zu1lWS=1xE^xi7mFx#!1A)E%%IlCY;ShwNQ_t!{!x2h8hR8Lh
zBnx0UB#Dh$@cmY1kZZ*KjgmP1iYdx9P$U@q;5H#oBn1X>Mu+NlU^U`wBYc~|^|VZQ
z2TJV9_F3HL_hUCJ4xfW*lZdi1&Db*F%+?kN*Q6^pMvIc+t}QV8xr{y4rR|SCPqstw
z$3#}6VVsaS=Zwn6I2s|g<2Bk0GKJn}E+lZRCS-B?&gTJw+s@HX$GWvmE;>SaDHZUJ
z;S&Vc{#wr%cPZBxy#B_3ur68b#E|$_)&?|KwE-Hme~^S3fH@Iq@<7uzSA3u}#BBGY
zdDir3eD6#et8XGVZ0Dn??#~>ttN&5L;_M8L+ERGMlWQToOYs}Yg@~wUQ|$ape*!t<
z`IOkh<9AX{X0*L|q8rRh^P77MYLFrZFRomsCmvEPOY(ZbUT_Cwszc-p`<ZAlr~;;q
z%aw6Ju(Njpf8`x?|9T08>x~cJVqql_HWHO4R|dL$nI>_rG!2t=jso5V4KR_9n_Uo@
z+6JNsVQ+OaJd9TIIx7~!q`NVU$Etmgq+2L)cS_k1AjL7XWgY4&2TFNXt*gv-br0j)
zK!YSxphHCauxB*r5C;ps8iN~nq5a{Z67K~+BraFrJhKwrmkDM4xq<I_xzFK<RJu&?
zP;+`5;%b$?;1J<at4hyh`Jx}|lEB1eb}Io|mj#D*4#%zv4;TE4KK)>}Ouq@zpRlU*
z+zfyg(~!NXuRiAyq(6!2z3^?ynm>bzg%|!EAL2yM3;%&vZAJ21hA;7V7@O+m=tP$l
znG+wkp5D3hBjl}VaF4;eOv7=-3;)SiLKhOPQ^t!*?;fd3C8`?$1uk1OH&BSZjsl+F
z3ecXl%RBRceW8>~r-d9?nDqd%?hx1f*2N_5gb~4sx8h!DyA@~Gy~jF}W~#n92pg_9
zf%((StH&8R6GCcyCykticfB(SV<LtDHXp}?hM=Q!<+l(3^K)^dv<Bc80Nh=11^P*8
zn&t34U|F~=G#@G_4sLy*UEJn?vUYJeO7cEnM$Q8%(KSlO|9C&PSEL7TGM4*+(t`2*
zBqYW-->GVrlXkrn+r@P|zj(pwQw4|P+!-R1;(B%_%{JZeUTE9WHM`cWvx<g_fNj`p
z7j{0gZ}l8Z|CW%YdSen9iec{GIiou`eWJqy<7a^$w+fLh*3V|ORR0$xtDnPH)A7*6
z5FI#Ht+B!T2X@wC{?rMf`4?cjhHpYdA^ZUEswknM6veBgD1-Eko*P~W7%G9wdh^g&
z^Wigq5myhie}fbtgKYrfRMws+7g|h4JQP2%c$0kz(Wt<9LB2O)^-c?%4ytT3A9HEU
z7K@9K0w5m(C33^IDOKT;*y&&+c?pO_??l^~-R-^(-I3s%-FU$&$+?kpQF?o)z*A^v
zRma1Gh@sM5N_;p9VXz%4%9bO_R195&;NlD%)}oyrx2MQPxZf#;9)aB&ISc}!dXPZe
zealltxiEuRv1Pg+9X?3WJ*3&rgYVh7o6Z?85!n$eRxC_^rRT^$ukp+^ge`P5K-w{z
z6Pn9o7%%h_K+G31MqP?<S0>?dt>CiGM8I7g)1>89tYJQpMDcdXzV9-DPr6JnW9&6R
z<}E^(LDzJNbv!e~Qr}bth6SL`3m4=yszD6I3jhVZU8+f;3qpyAjiyNiBvaC8);gVI
zH7RQPox3kGu3|Z8{{a2UxsK&1+e!_Kps7R5?=dazz(*&Y`Q=qyp>q@$;LuRei3nU2
z^<3nzZO6pqEO~pBm4PwNwAr@*$catWO~OB!2CGlounR~dagaKk=9YtBL2g0j6x=y3
zo!rQ0QK<MWc-qAC9;!oFcKo@0_45IR#|3;;yMej>IeBG=Q@=!BsgBey<!h{&e4d|~
z`h|RC>*!Zxop`A{v-OMdq+qKYs4Ra)<%TFD;x#@ad;7O&JafmTK;dYRqJstH!T8CA
zXLyp$?pAQ~ej!Pa3C93l+7j0;jzj#{i7zN2xN<Q1i?9c8SoYD$0>&UJua)cAlk_5H
zu^;x~aa?EqqQ$`7<rm8N5H6Omff}v3nE6Yz{KGpafCQsL+=ffej9t=g_--v1`P@+M
zQKBQ>tMO!EP$rFn)6TnGIp6Tj1WZ3+{L009LOaIVZh}eRj^P!lk}*lzxAOnnih~tx
zvxw@4y6Sf{o>kYDj_)O4{(U+!GG~8?ILsZ|G9?RMgk+i(>fj}LC;fJAFbH|w8Q%|U
z-ju`WGDf#XwnkMtn(17(KX@5fM6w|tgy>A)z^L*w2C!&qo6J^wX`9baTjoQyHRe;+
zd>Dm%_*j#C=x=%{=zK!*@q$-CYta*Nbc5gFW0=ht4k*b98~#EZz7nt4?`H!<`@lNj
zIxKZC0I~4L!IA<`Du=mTIULXTtln^<0R7>hjW365X*83UvSyy|i?8%wk+$jt#6w|L
z(rRqmN?MJrK3p5IQjcgB>k0|ak}_jBAywhSe*&Pwi3ClqqG`MDaLz{Pv&wIl#|+Gv
z^qz<aH~1|Os-hG;k5};Ds7S`7>k_m9V?`*i000V3q9Fr+L<%#*wyAAo*+jCnL^Euq
zsZacbLR`33o2KbWKpVN;4X=hi6$)UM{-l2|OOc5V*Fo7AejZ&)r&cLkbFo<Ax(J8%
z<P7hqxJ&_6GZI{<Byll1g^Q8`ToP_^!8!1HK&v?Nz>9$O$$Mz_e*!!fltQeFQjfK>
zFYQMMao_cYfPYEK9nkG*wT=M*YtWMc-(kAha07gF%BlrC3J3V;a&lON+z@YgOu<9O
zsc<8_L7&IG8832r;7J_;-4Dt;Cq_Ug(xyAG(Ps5AFBe=#YB7g_@<)rlSqJHu=sI1_
zQ5Ah3gzf#$K=Z4l*?2^^)$j;e=c035?8QspW|FWg^6$W62e_n+5=Ef$8zk}Mrd2Ty
z>&#aK$!i$<7CX7}vT!*_3a6qxs%@aW)1+{Y*8_(!cnzUQS$iZ9B6A!UahoC-7G-h)
zo~+q!h5)D;-_gQj#TNF`(Tc5E$3MyW__wv3`&Q20+c|j&NAt>UeB%rT1I~7Cf0bi?
zU>6R+i(c#{urGf@>+wO7{0IEl4xcifoHK0adeys$;|=^E9mlaf-RiaYY6|Dt)0T+m
zpIe0&!(#mkP!j0`@dQ73pV+Xh@{T++!QTZtkZT(o>)fGeTH^64&!dzp{>%opF}SbB
zlk%zfyvm;lkh8uh6hJ=zsTo(^BLEB|k{IMuD1kv`-#!39D@z(u@w0w8i{w?-MZ6eF
zib19pi1G;j*>U1c?IW&4f~XJJLb>DCh^G1&sHrpFSvd|79Zuy;pv{GEqf`O70mnp-
z0tEU7K4cEyKocLB>Wss9hrNrkbGYG?qfBvwe*j*00hJ4GKu;SsgvE9PIbAI~g<4Lf
z#=@{<Zos46A$F9C(UxMQ3vgTW?<kvFy9%UR$<ex_zbuB5UhWAK_8oz}x+N?_ld%63
z*e|q%WoQ!ieSuxp5|*JBmLtu-0E<3~@)!}UvZi+EA8LH6u29`hrGH=BU%NHN#@(Xf
zM@H69+(N34=|obea^-rqlTi*wQosQSqFq1@i#&lc%7drVKq%YH$&9z2!$pb=@i$;$
zCc0&%t2Cw>QQUa(RLkh|epx3M<B$b<1JAjWc6Bm##s^t7ZIAP3q%BC=7IQQi^A^Fl
zuJs)4PNa2%Hz7<gp_GS;Xg;K%is?LhLJqT-s+}dkl-IoYhiQmDQlcrmdGR{c5WT%b
z(|R;7r!5<zv3vkZDAxIqzYWnOA)3|MerUXND}uYE>{<w=UKZqx(>-l*vIfCPT~R!?
zOQSPT6eH6Lb=Id4EJq4LT4fSK3}KT2Bs-Nv8mU4=tEEc&wCZ00yab#2nbdmm7ZJeD
z1Z&C<kO>)#;h+!p5jqDLqcTFUhIXPd)Wi68cioCuSI$R^i7vR+{!s6??US^sg3U#y
z@fssX!g!4_6Xb-doLQTh`fuNFE2jR=fRts$9vC}iobZ<Nb%Z?01h_!Pzlq;bF-?2+
zp-tdwF-<!!N}I`Q5{AS{qBLA+T}#q<8OcGxBS>vadZ*Xg3fD&qsGyrll$p>0hlS&C
zFwx-43c_}<J<k6Cc3r~8I*#@~FR||uC5N69RhKa_^i(J@-HlP%{cM!FfJgJ>O0-iM
zLPSMSz6Lp8>}7Q&V=9H-T<B0a3NVR#j>U<duESx-WLm9SI8wO-kO6K9^5JQPjR#lr
zWpI5+ur7i+-7Ni@1*7ra1&x$Fnl*AKDVR<xp9<2i1uQ$fr9z&=pW&yvg{V(vQ4QuC
zC^PRk6E0)YsA+vUGq922v8l6CvNmj8aP4cV!fBoLB%y4bm7IS8ZWF18Y&c1|qTJ?H
z1J!Fp*=($b|6kM)ss=9Og7r}BjzraT;&Pg(Y8vbxxQ4{F>@9?EE9OV-C>RSYH}N}?
zdgZgiZ>jKm#_+h|$iIo-4e)uf5gOKdQSXpaiTz@d2kYVt3|I$9a$~(i+?-iW=`sRr
zGfB$G)(UIeHE~)nBTHRk7qJcD+PA^(SPN9KSkso)zUk14GFYEwbmi1B94ShpX<ai~
zrmV9*%0E}iv|=yIXJMTe;HoA6CI;F9Ci$>Knh!(Ge8@Qiz`c{g^=X^R1QQd0icjHo
zNy35hc5u5T;rd$P^JPJ8cLN7hEooyro~JOdr-48xGejI|8-)K+7+^Vj60Wf>{}^?R
zjh*JG1#zeO5j6Cu(<~vPBI%^lL{;*mMK35-xelwcu_x=y!xgl2Vci)y9^MV36?EpQ
zl@5nK^*(}r59LTT%awN{WU^D8g${}H?8+XX$Sf0Y3HZs_eE2AzK#s-?A8~f#YqUXs
zCg+Rjb1T;)Ww;gaOm>EMHDUi`*n1Mz4d0dAQ{y&$w5P_~X+<~M5HJQXy@!T*?$3c;
z%q}XY?hif+rySUAVg1c<zUlP-)VUjLAeisuq|ZK3>M-!ZEbi6bhc4fWt7(sU@vDAt
z3J(1FW)jl&+bWBPCSd{ktpuo*S&s3CC*iW;{RuG18+-F7p#GupdG#+DUF+63OiVRb
z^rYvV{ItMauVy;j#`bxXPv(7g|K$^sw?>C>?j4ufmPPk`j*8*J%M)NM$4rAi{Gwtf
zZr1NHi8L2Cq_Hr^C15_+2IhnW%q4ALPE5eSCwf#2<+IWgCSa~;19M6O20qGL;=vq?
z^Cq%1ys8b%q6Ey<ZD3AKz<i+rX11-fa2aBpDQjw@o3sUmc960K{fy?v;FN5O{WC+M
z!^2-mUx4|5U6<JseMmXL%~vMiX!wuYQobOJIE%yWm}?vIscAk8PUU0g19gpO>QsD^
z_AfW!JYCZ;IF)9KwS9$DTl{Az?D9rfDJMfwP78aM!d~AJmZ1XcicWZr!rp*Top9)s
zyT*VHx#U|e_)6&pk|zOx2m9(+nkY^=z|xF$u#P-dYi>k5=ud{jel`lXw4SH=6FS9%
zX;^pGI&r2<bH^p#2NLgVMelpMBR2uZ$j$f(=0#QO9PN%bFsR$FAQE-^RXo^XSQ;)+
z8W@|R!NxDucqU85&m3IBJcmXvVXjl0UEIMquUin5sK1L92SZah=mTe8^edN0e5Cbe
z5j4Clez2B1j8Vs$m(0LBtOxSpOuTR|2%U{9pzX~|P)^+wU(1=at?s8mzSJ&C=<~#G
z>2js-R?rs_!KpqL^*O6?Ym5nT8%nGunlU8faE!aEMS3v=fjpdoRCT5|&N}HdT{5ax
zq8J<#xD60ECcsBL_oxE*7uF2-rT{gBb_~0C&v)d)Dsq_AX^S-Ve_*MZlWfC<hylFj
zJE_a$oZN}jem3v?2)M3mK?C)6j9+p2aGaIps(($&`e})-@x$h?UQUx>%3W8Wgjh+O
z__j%>K8vyum)EDyL@9ufF>(5+SiBOL49(f?UY3dbx=TRZ4J=cvyLBL_ay=CbnebvQ
z=0vclW0+e~xo`#qO(hR6Iz{Hbh|}M-@*{jkqWH^|6Zp9Z%$3VaPylFox`$%-C17X3
zG)8xEopqfp7l_*xv`M||<rd+$+c&8w3{m;P(Rh^(JC3VO*4N^?DH^ZhBB^R030kqQ
zCMuGj2|vwR@9z|UIKD6}v6DUZVOV~WE}Q`{d^#UrcdU|6W3i_roa!9jfJuc@*v;u*
z&;iHmw9r&;VG$E-!991f^sf%e&~l#?cIA~_uqaNjE4uJytl1vtgdRw=J+JS~I@I!P
zv~wE5?-M$an`THY6^>uR14Yn>55^Z79vRpOaS$M&t3vgqJO`g(wPV{e1W~?-S*O0|
zwbAgdRpLyyS$qC0EB?nGkUH^#BLz^J1@FO=(Z%vzoHKah2<WxOa{-itjX=)#v`pJ@
zecV!?i8OAVAAX%OI}07+V%u*FI#`i+ejqexS0h3=1%b(~ED{h1==O**aoU<Jlh_Ml
zrI`)PG+b?GZ0VK*`-@yU!#@!m(iYiOCh?10nRZIP_9-uI(`At6VLC#Ka#2i|<l8a4
zA476!2}c1W1Fa|R_Dp3-Dh*Fpo8}<qdYS;1`%!OmE!H~O2G(|}Kj(rB$3hG^&X35`
zc<I}W0UGyki#VI!KJA$L6RjIcW5amZ>4eDVr;LZA#1p`mU@O!uq$g@;WdPWA<`;64
z(A2`MWkA$sCHth$uVnw6YFG@{o+xTsI6feZgL%GbR|C$*b7e_J^aJYrzff9P;nmN8
z9!qd5{`^v4Erji-ls`{1u7P*ZMf>^!j)TYujeEq7%}`gqP6^A@Z|5UhzXOkW{rMTC
ziE&Y8q(^i!h60!6^|J~~1kJDvO~5{<u*|v{mZ5-6`nS3hL2j^E=tmTE8Avn(d4+5S
z{!Q-EG<I(Eyy9o1NU+U>w6o2#mwF+FvGQnlKIS0Wtq~_AegGfLPLOe+mpmOTbuqjw
zSp%BUiYL-ywO%lX^y+sb7S0%00MgHSAA>?%M8*()-^1_Ol&{41HVxl%8osw}_};GJ
z`(ygOr(3Sh#cQ3Jn7St&hmbayw}Q4aNC}E_AHJr5zcmJjOC+>kLzQ<MBi&2NJHqNH
zz>d?VIg4rR2X0eC0m*ma!#5=_!D{)ypit6GagGK(;g^}j(<w1NuNMp$;J_FD$6Vk9
zNct4$mwX~$&R;y)e1Apg3T{ObTji$jC^%eals`B4D&oBm-fCbF6Mh9Bu6~$xY~6$W
zqn7c0kQd1Zl^3_V13AfXx5nRw`nLBH{aMq0t4(@_yEXncrPn>i*IVSzk*Iu8KUOHL
z!b}3f9YIipMP*!ZywQS&W*j7<83$w|AaA^IC!n9~x#4a2a;9K@Z5Sxw*sId>kZ&O`
zx4JWV^F5Z$YX2TbWGd<AX4?MXcH$A$B`2o8Ft~gvl93t{W4&b;AVSTm%x!|_yIK~B
z4tGT?+9pR$VCROFs|my15R>A?zHas7B<lM~qJWrdI}Af!yT^H{ZSDJ-mqdqqFfZx8
z=@KuJr%UkuFM+Fm9R(^@@5FD1{B~C7A&pqJySfTTZOpF1@mjt+0NXEPzc_amy|Dy`
zQuzW5P;gTe`|0$;oSd?Iun^7%=8MXZfZhU3tIOe@q`g#tnKP2WWZB4Ym)NWo5QXt=
zAQYCv<TE>Imr1Z{-rEnqA(^=04Wt?h>2#!)qexIE6V!1m6Y2`aMS!KQ;SAD`vQ5al
zafDzmPzTW&rv&I&uaY5hGYy%J78+Acta3MeOzHdp9l&I?{SdbnHO&cqhjP)gCh0Tb
zBS{3djj&{6nI75v2mrR4lkxo~o)o0xap(}~$7y^fd^iDsaK)i8gBFHVSR@IUIe4ES
zFu~s7Sh7#8?t_31<6KgV0>ga~;s*QS*F>h~UABK@yCi?tA>M}hS2KTCfUv097}}M;
z>#s@rO!)I80$X;LYlHuKxpZ%QBcZE$Q!c?#&DV8UuTv#HQ-vS1h~<n2f1U!ZkUw49
z+(h6+%Blx9z*^mAQ_U+G9n~-QF*a8mdqYw))k6|U5SOIsBZj6Vh@nZwG>#qA1wTr-
z%C|7%@Tx~7&?znt`m*E9XoSJMa|&P^>oG2`+W&0DbR$1Q&ld}#;??-sZQ^4*Y8O0*
zaGqEBJ*X7xsI>;F3m}uh{uE4j-;20zd60G3$!xd!bWJ5OJTmpB^}oH~sos^$NXw!1
zzoW!ws&^*<l6as$8~{o|(Ug>po%o%8nfivP%1w9YRiGq2%CV&K8cJUOsSGQTCgM1s
zZy%3Y@BXYI8P_ge6`bVYOxYc`(8I4gQp8E^9BF5kudlfdIU(Pbac+%dMgT0k=<N)}
zKxSq8;|j}iq+od#pK`W`#0Ptljs8qoG9+u<K`eJ4K-z#y`L6Ku+rnoW;B#`0V6SF)
zHYu!f9*F9JBjtneh_f<zY1(~OnHD>bOzTD2MrmOW;Oy6&R@NW~xr^H-PYgxQ{>|w`
z{}>bll5~d37p3*U=5%XNPUY#rns%?oIvC%k4i0S#-?|PCZ-y7z#;-vgd}5VpS6v53
zHK&z27{8i2IHozB)WP`G)WLDh>DHi}S_da++Pxd=U|gFzII%5!>pBRV;f1zwYfuNL
ztTOGY>!8}4R_b8fYU*H7b2_PmajU6=Q=8MRK{>S!KBH;(X{>{RHg!;I3*Wj9>do*%
z+rS#s!Rf0^yXrbPqdBeA!N6+j;H>6!QU?R8se^Nx)2%@{wGKY3Y4>fcgZ?&kaDH3(
z)^%`UGrZ8&zXo-1(JIrfx(+_qoL1_fe>HV*X>&TMgZ|aj!DY?q)}WkP2Uj$wl`*+p
z9bDBGzI7dZp&5P+Xv@GF-f_ODX*Yy?49dmhkyc^#1ckdMh8w>sxa(rLajSy6K871u
z72FLmT>q-zZdxszD?Tv3Lb!N-rJDusbF)A;xUj%R)k^mac7Yz}1{;Aju#{PV2b8Dn
z+>x81Z4L&U6o7wFr)-#)41->pf)PD+a-60YXMz?X?JcAyI2ejgrQ-lhAeLfH-9>h|
zV+pq<axDvL+#UclKpO#QP&_Dg<jM*y)<5uSomrk6fc4FxNGbE9<+*YAd>hm*&yC01
zVTf3s3lAq|p<DHxyxbLaTbeIyOHSorWLBx-r+OT)ES4rMmw~HOWl*5(LFV4_oTy=L
zKv9xemEATIJq~AKDz5-jzzGs?lW$zx<^Iy0$Qufzs?M3<2oQ)uvx#86C-{WWi!Ie7
z@lt;bwd2<Kn+cCHC9(P}PrTnnT)}#hNj4K4t+;3r>}0*_G5GArWx`{bG8Y^t2xvW4
zJsz)u9F!3s&!I>vrgY2U(SlJ9I$|Z0>7G*_V)Dv;<<X<{oZ}8S9H+o;@Cv6TC@9Oh
z1z_$K9_w-ew*{f|vmjc>Y>Xx#{3P*Xe~GbRm6op{>nGnN4ow%H2r%<{Qv4d?wfYH=
z8?|IjKic^La`;x9K3c?)S;AKk=>^9jT}Q&$@*|{5>;3Pjy>TLWo%xjH<so_bf$Z|U
z2tb#kSFLEG4GwfpUTc+!D5DhF<$21eNNax3N~=Ywr7YyalL4uG2V*$@-W>FOSISiM
z6E4kJB(`nw>y4ucT=5=Iw|wKHg%k26Y4<?P?f%<&+z*&n!+uS>Gz_=t9{LZ{{rEpj
z_sD;k?$Onxv*mfL1)Pn0oN;a>er6u0>lIHjZsd44{cIio^VP&ZCGnqZN<Xc7JVbX1
z7fNtu!^>1pfusb>rPWekc9B+INd@l7u<lH?nhI@h`|$6NE^7_jz5qA3{a=x8bH3HI
z{l^>IJ_EvqlyJ0tewem@62}r9JFxY~h)jRDh;ZEd>k+@3zb1aSW^igBBkdaJ-%NO7
zfRQ1iag><{NDKO38)n$XHghVUML$q|frAM0;QifP>*OC+O4b+ly1^}cV(acnvf)!G
zUU(`i<~9TevQ)-;)V{1k`a(^gv8-7m1e)G=CL!^&!ZR7*#RZ}lpk}aED<fEPAri2f
zF7ND#_ve@{(MiH^ii{)OUVsY>{Bkz@v{cXV<ff=-=*(i&?8cZKenx9j^B9~yD1Kyq
z$2>-!0Lth%zI^F`>z*b|T8xyaYM8RHs#op@QwF6z_&TWQbQL&XtpTpi6iQ_9HPR^Q
zXqKbd7{to`(@4@v9Qt%BFQMiX1I|NJ7Yc604~$Q^nh)a>jiY<L1X|f`EoHmpk|i9I
z)+B%q>XziG4=FJPt?CixXzKoSyoXB|053A~aRxrHDZdVL^u?HF;XU9NuIN>I350!`
zGx3-V0Bo-Cp1)tN<ce6yS34Rwv%!c5UWwUJbmd=?tBJyEbNB6qa1=dfTMXhH>&JjE
z+#=cmPv*cshI5cvh_Ey9U+kdp&2@d8@^M}jSsR)bo&_3<{#c=ei+@lq{P1i9s(Xn>
z9~`~YyPYEe^}3{2Zkz+?{y8wdf*~MFUJlR2@1lFbkr^}~Plkq{MU+&cb!RaQ>Tn~U
znqP50F2`>>D5{*h4%_J)l4sGMuyuehf9(F-Q_R-Ee_Hp=HP5Z_^e2c5+hJ;8{?O=I
zY!Uv@&@35($+|)H8;A!9#1PE=-En$f4aQ}14kVBg5QJaH`lsL+&o=j#p#@_+i69oD
zpw>kDA%+c4!q3o<dL<Ydt$9q)JdoAu^Y}+P58Ak~Abt2B<*`2V7^8Wt-7(DegVNCW
z1jS%|q8O}u!r&2=V_Nk*RKyZC=qa<^krj9vg_pLhUi1z<StAp3h32`#80Tr={-??W
zt{A~uuWECqD;RzN(SCS7g+nCmR??y>*&TUagWy3}8ud8U-xTUCG<)r;00sT7-|Bb0
z8K2i{UI5hE2O>*~gTd|{<eWU-VvkfibaY0w8wmD+8Nl*9)jpY!sETK>UP!DM)wD0<
zJry);`jF*}=WPGixe2!zQgajTEp3c^ybk2k7c2!4NkcD~yK;w0!b21-+OTF@S$l8^
z>vGDAdWfk027B4yM(pdL9eVZO@iS9@fsbtc_k5J=FX`iDJfvTt-bB&ynZH|Onn*cf
z9<mR>Q1HdV<`tHRn_(H6fW?L+@iO;jScWEGI~De?Enyi7*g>?(V?l4Xz<$tMdlBK$
zY+^gaAU851x}4K(1Y&z~s~3~gy>%vUxPa5KDQrcled8o&!`-!Og@1C-B%NaE>9O?u
zX-()!0VzFje(eJ(V_MO}@OJcA8eowIUZc3Lt_ck(Af;h17{r4H#<Ze=;q7R!vN2xk
z@P7c>T;B{$)Zto|-ajLJwRM;RQhMRgnDjEH6}=2!9laBkUN(zndKsFK&vg}+ZKoNQ
zp$XXa750^uunbMWPFC1Iw1j17f@guiqK;oj_-c8U0#crBpgdztE1ogD9nY+sZER_H
zZB1xM0Vxf$l?KMNqJiP7qXBBX%K9JIgoYH5(vVjg7}JUdhOdr>Ei4UxSrZykKuUw@
zgBa6_28Oq%p+oF;a3ls}k{jUeCqMig`n2NkeDrUAcnJp!j4Skgy%|ER$LU;nDPk}(
zivw#p5|In%gBj&8gI`Au05m$7{vi-ju@z6&H>}=oez$YXBGHd9X86uTWWSB@s{f+H
zc}CSQ_kG|)W7?>C8EC<AU)+*nZ2v6$wgNANg)Zn?ail%*id9L`Zmb_Q9lt&%@U^$V
zG8--PCK<mNnrLs^E9~1XVHui$-BDrRY=pJ_-Od{Sx5oHEoOu*2mGQCupliOdQ4MPD
zd6eA?E(asREASIsiJy*@oW)Fr#otOismXB+qDnYn*eO5{9JSc3;#v^D&WzpaANWcd
zBa2O}EnNjfNHaz460Wvi2yufi*e~jT%ghJ;As&VlyOU;6_C<sjhpB(Vf9sd<(cyTx
z@Yl#Iyar#8A$y;0u4^U12zM=FaJS*(k^iS-P;vI0MPI`?i-NQD4(baDdS+knXP^ca
zu-`e}4PKHj(6^E=uy6Pu35abt_Y&R<15<TAg){r#5jZ}twvWJ8UqxsNmhv`${PvUh
z@b`#^ncsCNM7)Zm^OCI0xArHTr+C~DH@o<L_+>&j*+gZ<X!{_6&s147_*8G1K=FHG
zi*%^a;RU$wBqEgYgVWb`_QdSzaK=l07v*ShhZ|lW)x|Ot1Qi!9M@V=Be!7PDM?gVm
zt>1>&h*#I(Z6Md$la*iGksRL0BwL}0<J<-0iwApeLXcV>qMAkgaI13gCemt&iI|-N
zYWo^FG*ZyXt{xgOqJbL?F!|w%HR!q-7<01z6TAg9!jxWAZTJ=D{#E>R4YTqM!QUsr
zxaY%{YQY?v>G2R+Z^3(lf}gDc1wf?yzm;iAe)7@;^+&dmbK=!{hQ$TNv&WB;H44t7
zCxWaKq;6yxK|SY%UjrhU(?-@cT9-M8JUmh0g^%NAaSG_l`}pVxc%mPJ%@pQ)#nfHR
ze`kZv)c=7;N>>jBZ;jCnvaEgKDH_jo4e=e$c_5>z@$Vu&(jY_-Flk^QrU~!h;SBE!
zVAwss!z#x}fol?Q$t59@LGW3in`8b=mXR|Lf;huGc8xf5`bUl6`xP@A=xwY7v%jEp
zpBmHEK)1$!M&n6aDjvN1I*?7d)>;yS1T2b>cmDz`CO;qWf!nS=Bw<*$RD3nXN6-{L
z88a9PS+uZqg(bdbScWEGPghuGnu4{s&d_)glZuyo87jC6&KxlCEW+xvcxy~=brS>w
zs2hBMT3I?5J9fAv(XEjL+;8Rv94s-S(z?j50;o)Oh@by+<8p*Yp-PMX&?L7;QswjT
z1rl%?sR(Wd4iiu#J0!OV%wo6mW!HHO^qw#HJzMK$edlh(c#F0NvEoG%eGk@v%!<oZ
zh*SFWQi=xuPM?-&5||e<8=~32xiyk2_c!F@*9O4p0vHt|AD5^BFtsElIt0ecJ1DFi
znRr&Qj<<_YP8%E#@3IthIHJ*N?vxr}wz=>dc<+>(N44m>j8I2~R<6R2ZgIku<6V+X
zbae6IRXAw}UY(b&=gd7u&(ZSi?jnR=$~tHu>M(?ZsJqvUs3-p;q9C@>+1|N_Szoys
z@pF5H@QYm>$cTC!RfoC`j<&%2>lrp&ukPc)PETc5aa^?u92>+q$`(g9g+tr?7swm8
z#;8==vu*Q>8qe%o#$TiHq_SoFbrLT}&RfP`ukk#3-V{$g<OasCIMFJ*)g++u!gbCC
z+)adw8EM+mNr-W4ByQ=BXl!2m+92fH3n01R2`?I=xpm;y$OKP*8=})q#MF@|Yt3Jk
z^0n|cCzdYWqMbli0LSqOb;+dfa1KSTUz7AP-P%cs=QSZT=|)Wg1Ym)BZxdQm5G;a$
zh;t+#>H8ta@`ZBPbPCT^@jE<}%V(-%a!kBk=~2)_5Es>&%4U3y&=VggcP8PFBCh@@
zMLJ(O2Fo)tDLQ!8L^8{SM<^v6gVYY@F2Nm41ozO5uqQDJ1n4C0BrRMxz9*(7<hex)
zu5zR{?e`^Mj%k9?HgkUrV^Nqo(^FLsFuq}5+S<%N7^e++eA^;W8ZtO(jXm@j#tVhV
z#?^0%Gqx{qh0otdnsW8-0x<e+9XCy6()GK$TiqYo)yYdcDLOOK57dKWC*$<B3$I4U
z^2OHpA*G2R;yzxMm0|I~08EwdVMiV3Xlc{54{KWDOr>Q&`?MMH3IAwAzKs=a`8FPW
zd#oX!cCfnv_Hn|->K;}GoXR#)pUKT(%9HUKq{XzC8_3oI#FFIOFr&9+MW=Xj4RNcE
zDJ(2!!h2<`ljUuLJPI`Zek{+rhVb(S-Y7}J;st5B(*6FY2tU#RvTdxbCzab@F}_J|
zb<gbAabCtPoyqMZQuA_20Q*?%DuI;_w~VAsOcQ@zOPFcOe`7ZSC}4J+c~<c=I3iB#
zR?ieZr}3i^AB~o*G+nr^Gu*B5w;_M%!uNr~)I4Ggfiv|I9wOt(^Rgzc$HrOuey8~}
zx`96J6MnDp#Mv_bC5<QERQ#1@uc8kTZtzW!0XMiG&+51EQ}0DMi97%@!FLbl6f@A_
zg%1!E{#z2^*iDVX+262DyrTI^(uLSq85MpT2_q6x{iKzzc2C=f{V~QFKA6C!^`)}(
zDq)&rDI;qJuf^#-p$V5Dd<S?YCpr+~vUJ#d{}QJQzuO{T?%TYfFl1*`$Ru5Fwxla7
z_GND;@P7~Z!|x|DG4h<0m9ea|OucNXD3axWC>};P(LfsC)p({$#Z#B&nExK*p%&=!
zC1=id`4Y=b^H9msIVIMbHUbD>(DJzW@Qdgg2Y^sDiLP;omz#`UiaV{0&l$9nAE30U
zcJf06pnMPEA??Jrg%6c}MyKev@uNCHzguIvhImiL5>Mlqe(7oGGAi)veX_zYty9yR
z&52lgEa#Yi7|N1m+E~xaBZ%A7JL2KiB8*=ADyrIyi4sqWBnMB3)65RWg*L-jNs4#7
zRbJHZPF`qD>Ti-Ic9x9-hl_a!gC7BL-0^7oocP)3h|5~+!Cgu$uP9(c6STw~J)=G-
zv(yrLzyiC#4T2O;m&|)d3m&;*OI){Cj>2FyKKwB<p2>}IHxWhO=^7>FiWDxz*C{qi
zCEzpt%)`J@A4gd>2ajX+>U`v-$jPc+6bC;P<|aNarlYc=#q<!i0JImCdEYvSi0*>y
z&AK(_fpxUK0fS|*N02QRtoj#p74o=hnAg$VZ`VJv(svCg@0iS!RkH9WND~W&mPhTn
z$2Y>FPk9v3?fMkkx7a897}}3ai1CC!Mf#<uqiU-6Qm={xlKHAVq3Vo7i8PNTC{+3s
zW}O7g&zfMg&s>i%QEh4cTl(zN_JxxY_#SV8kNwOBF-%0f(xmxq$oQr{TKTY1oOYFb
zV4LSM*Hprfj8ArHBELJ(2KQ6wv(TTtqHGi1p}&#!z3t+Ixl5RudPAeVuO!zEp;g-Z
z+Wuz~rF}3-49hL+NemUeL;L(q1vVJr(76~t)h80n1TD%hU*vJ~23W89WD1zDDA%b#
zBWJYdApJ*>rmt9i5CYVZ^Xi{M?rv}<`H^$$i}2;RdVxaj1OGb!s(uD>rnZ992^Y5s
zc5=AhocO+L@O>H>a+&&PQfN<2qlJr}mS|1cveLi6JcxL|Z}8Sq2p6Xj!f#JYgi`*<
zA5B))IcAe*x?Xn$dMq_#;d)&S*ZX0G4oh_t<R!I2XZfCWSmtes!;@PoM%Dvxfck@>
z75hG`p~sPGI5>v0{p!u&UnV#ozftF`^{Kw5=L+7GI$8O7GzY-J_S=xMPC8wfLh|W_
zxN8Y0FJuJi*5KeGW|0e5fTB(;TU~(9F5bVUbBIYO1IUrILz}?v?B{^%4=+S16p2aU
z#7U+xN$?B6RbBx_Y9mDVIAEOc3p)>7(&PqY_4~+fF-c@hu#~i|jkjDuZi0#(=xEtJ
zvEkZ{W$%L*4|*_QZsNf}Q4|J~_xf6&JWipgd!Y^f3m$H9hicy06e#zK>;7YhB<kKn
zwPzwmG%U^{ozj_exG1x))X~tip-qHqkeu)-lzV6sF{KiVKb5Ze$RRSN@|UYA6Xv81
z{+xLS`A32GK;lK8^h+QsuH^bohvD~uNkpze)K$n;e?T^)X^ZXzDxI!wXEFx7QCJVv
zg*<3U+#BIpg~Nznq|yt&hJ><181=%ojOydy2*Pr|4;R?kw$FZ0`QVCw=pzZksShNc
zo8_1WoDFEbOv<a`s>8I5!*)%?C%|QQ=tD$*gYL?{iLzK9qVQ(w6Y(&*U5DIze2mai
zW3-5WunZ|M&zArSfB!{OK^cyl3~h2vu0Q-0_}7W?dq6H|q8Xr5xd|Lhq>$#SLYglx
z^Q%u&ZXs3q{$=5>@m_s~0a+PdaXXVOxB8_yN$3eHq{0rs<cl2-ZGE0hxc^dp&UP#F
z4#n}9YlK<O6!21cVFOS|?vrvmXc6*FuytMV%?o~m0xkSD3X(7dT%WAb7JUeiN22OQ
z5>|Z{$rihQeH~LNw!KoG7HhpQD*UZwTEr3M8Em_Ahox-0b#8hZ(|T1>AEi*-S<%Nw
z7_Y5p7Sbze(nqs6t=nfSnLmSgD#rlDs$^biI!kH#QZr4u?|Tm8A;UK&07&!Ewyk*q
zj3=R0z{;CX3b7skKPzc#8-n<T@@n4aYy6aU@fT|RMvd`S=4?I}Dcs~nI2->tjo+YM
z{G}QnG{>*&ypI{lWsLWRW`@t9!eOU82lIEFThI>hpgB~#yngdFiyP854xOWF{;&t-
zG{vbbVx?$9yavkO;{Hwxd(a%(yhM0p%!(3oH4+M3ovg%z9CJt3$8Vj5E_XV^S28hf
zpf|np9Ik13{(${XquWQ&dB(_EaA4FTDnTk%(VB?~orEY2Wo3B24FBN;7&sTm@QGo5
zm@B)av4J@C6yAkBo|WKUZ>EeM=6pcn+W72c*ksSo;9hpgA38|3qVWQ*VZ7F<V8nsB
zg1yE%)IILts}Q#+x-8KJnVr-L1iwPhBR@=RFk+nyLSa9^bt<QT-FE$kJ0skVih;WX
z7v&#hP)En&&Q@2E1iwS-Iz>XyzR~7-J0$<2$V#MA=)~+Xwst)$DJLPVSvkfCbcU$*
zzX6~kP_KcM#inl^seJ5k+^$7cs<JEJSfeslEg{1r-Srye37znVMklNzF4kR7!&gFg
zeP|UrA;(1OabH$^a8W3_@aez+-E~O{?MNE!kK3S4>8>{@Ubr_Dyl18mo{>iQNE?K<
zKO~(uD?YeD6ntj`1L!;_h4!p8+DF@<jp*DAcy9q-)6eb$wkLGqje$*c;i>Y{QWw^~
z>o($WYlLg)+gvd)yPffH#7ThaJ&Dc}`D+<-a!>r70vE{>MYM80h*EJ%ud!CX7)5v?
z#UJv;?xyl}glj4hFQejSf^PvP(ztED8Hdg9?iTsJ6QOUPuXuNwK{7qL`A?fE2w@P%
z-2KpQ&>eWe1IV1iLYWPTjKzCD-^mg$cmc0XwB?+wf#p8ot)K_ugbH3d!j6hOW-G3v
z!rudrIcM9MSM3JPOL*LBY<z&YrM0bUY*c;lL7@Zs;CEZqpX!6(B}`f$yi2&wp24er
zBUuBichGbIC`RPJ=d%a?(IcI48W?EDS@ya=5ISoN79GwCB=fUlrG2swn1eJAAr1Nz
zxDS=K^;y<WG#@^f8N~D9$J#WiWLte$@%_x;J0BR(Rxe1QJui*+@iu6s?x5?*v@v*u
zVkByXgENd~D*2Nr(2ntsDi1b67Pk1Now>4R@K_wLGFp8UI3iF3t8?YY39EY8&XBl7
z|A0Y2`v>OJq>$NmeLLt~K^*Y{UPHTv&qn5Mnr{u6B%1Fk+qTYLJ95%GX3}_x!l&aP
z@KLb9d1;041Dn&<N3!uQt&f!Ff+xwqoHW9Cq0`pq=D_hw;g@ZL>l3Xi&FMDS)bfZU
z-R^Y$@Qm<7i=CW5*!p``;;XFfs8W<3^@a7E#Am9kc?-aJv<sc{VJ@{Pil*&CeIPzB
zWvDUO3qz<|HX#bbw6;yyC)>tM#J#|DnZEgMBB`z*h?;@L21R)(#`5{*Y*V~yZTnfJ
z;iV)EOwfh~p6l5VdA}m?!RsjIMNl(GVamtM!WYqLV9xy#`;O*5UDN(4k=9G3eR&mW
zZQ0vBZT-9^xT{Z~%|<2A`q6T}o-AhzUekU+xRwe33@)&m#AmD&ZV}f(r-<!?a`qJ#
z6Z((h{%aC<3mztL@1mGE2hsK3zr|^Vhn9FtJNwVK5-{XdE1170VE)hs=A8u09~)p2
zG)f(^{FcUlCem%05RoK}?<ZjX)PURK`Bwtw)iy96CSb7sk}B%~FtFSV!iJ`_IUjxX
zE%4yo6a%U7j0ry;+P;A&pc{M%dt8!KeB8>qa>ZLQ$~E`pxwSuost{VPe-i`A1H1mb
zJ9MR)L{giDUxAro<F-WHYfL#Aruj%@!;ePz){<tn{BFaPZ;ay7Pz1xYuQTli&1tul
zRNKk#$Cwre8<J^>f3C!CFTXnw2G*-d7~=m6@ds)A41a^+Xw*rXE$uVi+TRfEg>T}w
zFXk7*-;(gRo5KGt;s3zz<P`in68>&e_&+85y{7Q@CH#MFcx?|93%st)Gtc>aj-YNC
zq1`JaVo!dELm*hD_&8rS-nkd`H>wNkE;UBNJRLR&7}P>oRYJ9^A+~2!a1TB@^VnvB
zY|J<YVekddobutL+!1{V!myyu0E9DV6aF&7yKv+2iAXL=ZUSD;#3Jrg#4V^Z5z>;_
zeE1k}E)c?zHRvnO{0!!FD>+5y{vIS=ZT_F5?5UmNSm)B4W$VP585MRfAe-Xs?uEEE
z$9HS|499>X7v=V4P1TojO9W11;W~8zUCAXue+Cs6-RylXl{m_?)9L7!^Rvz_sXR)^
zgKL+*%nkC$Ll0p53zg;8_5~SpWV^Gr4_=2ph$qTCyUaqO1v3iHmARTwuHxDl=yz^y
zKLpnKgZKUUzJTxX&~Nk~PZ-h3vIS=(yLyS|*^v)`wp+^1e2V_|7--N}J91h=wj22|
zd=-D>^Lu!6#|l++WWapO;Rh&B{Q$gj!9WOhYy7MqgdddQU_6G8V@kIsK{bXfTR0b$
zRzDE07)@9jx5f{ev6{2{k|kG5kdRUJy$LlSdGvR#+?Fw#BO!<s7k}`fADWx4224H6
z4bBG-z{XDF=i*#`K8IT`RCb_3IB&hBXD>NUij)a&n5!K{01LqJ)hocK#nR_fzv@fy
z5a+jD1d(wu2ZfFDnM1fC#jZtYUgb7<Eso?^SR0E_of0&~S=ZDDiV^jbcB~x$PB8Zn
z0D9qvsHV6Wsxv9>Xlx#@@P`UK>ZK9h%JN!(iwSXSM<9Wb<-_sXMwS^B$?`QumOp{O
zI)5O`NAdkgzPFL(iR4jmWeZsz?Yxijugmxv^MQIbi>o#MxLI*6K-(~K{C&KEZ-f--
zVy5AZuvw@di#G@rV}_Ry%B?Xdyor%V<4uD2!m}@acrn9|!zbiY5^bT07!-bvk;gC*
z(C}G5jF965vcF^HPK4ETs3u7Qbs9bF)bF?fF5iK;n(Q@r=1E-B3a*uya)%M*FY@y_
zhj*7^0fBP-#v5rlo-BM}-mw5A<(PZJry*UC;Ggj|#4YbgmiZxudc(0m?}#wV^MO^%
zKAV)GSqk@@{gMK~-ISh>In>D>sr0+>DmA;3F3XfQWr^DftHF)Mvrg$$Tif+Pz{X6k
zRj<6&?H|tY4X;5a^i`{`G0illQK8UkN~V!&OQxaL>NwMprqLfR^<t|tOsg(Oy)8MO
z#Ie6&n$4J|!FGUYZ2T52aN4*n8Q0*G2z&F9eL$S=EzI`>n=dN`H`Kt+fI(^bh|}E0
zG@oP|+W$X*G}tghTRVwq+Kn4W6SXuyst;f~q4DC@LcFLYG|hGEr{EL(W%Te2g1R*Z
z>4`ELbJtJCCxiK{pNJnc8-k+|O=AL0j2e`5rV-um2KTUSU^-{S?i>7+rV_Q4JMKu!
z*K8>lvq<y8_W6UDi*Q~!CsF>@^!a45AwcL6$7-stY~*C8r}N*gP5!Yy!*Z)Ue*}o<
z5?)zr*d_<$>J>7n#^0o{@>|c!O+i}9cyi8NMJy+Cb`G)wa69g43lSUuHX06W+u(d_
zrv!}K1fw<{y9i8xtD1b6W8$~!B_Nd!&evJ@y9sQKq=@YudUDy79zYx=Kq3HGyy<Kh
z5!Fds!rO)7qMg0KWsr@uA79Q%&TC1>Qs|knl{?F3<(~F&nD{t*Dou-!ms_K?NuSt1
zL;}*7W+Kw;t!ZdB;?`(U;?`(Tl1kW^ZW7Y%tLbPR;?`>N%l8_M4}$X&3nqYVOh1IM
z1)82a32v>9U$Gww?oXy{Og9nf4$ySmDsXGuMR03N@S955n2z}!r0LF(6x=1y{J2`Z
zO8y+8>CTdLXUp$7_?2aDo3K@WhiN*lYPvP9bZUN2tS-MJG#!^M-P-x`%LUCKnUMKi
zpgIv`&8uHXFfYtPib5Yh^`!_9dCEC^pzKE~PKJuC>blZ&#86TtILBlc5szCFbTxj2
ze*n4li}BXv6o@oXekFAzzplvdF`A#Ct1)#o5A;jf5G>0?Cb+*vJLThA!bhM2n;ava
zyDxKQ;n*9m8+GLQlcxOjmV-{ae4Ts#b+Y%@Z~5DO<;^?KU3=T<y(ew-(%9{WKRCMQ
z#di)k_#OAz$1l0&_Lbj!;=}I$kG*#fuj@MNgqQ5tiIc{umAXl&?I<KA$uv<cU*ecL
zX=O=v)Y_J@<b==$<>;I(>C{K(sAnJ9R?~vyOMq`EP$<v9(9Q?6d{79?^npIKLqiLc
zOJ~B&a2+n?I?PPDbSO~Ta{K1{{oZ%IYpuP{k?fRo;E%7Vb@pD@cfI%ZuFL+jcO1C&
zU8_I)yVD>2k3YBLdw%-2zH#gQH-6K9ci;Y*pZcpeP43)y^RI0^^bZex)mtvV>)@j=
z`O!B{JoEm)`>Rdgz4VeF-}|Q5e(isM`1Zf(|4`@E@U*dm3xMARnVTHm17u@INT2)J
zqyOP&-tydc{=#p6=~w^dXMf>6Pd)JJ2RA?e9q)MR$qoPh`zqIb=0ATlf8Be&>)SqZ
z{?zAw^UG$ZmJa>&zxtoQ{Hg!<hG%zt;%`28%U#<~{{HvB{~foz;q2T`Ow>O7!9VQ3
zdF3B=zWc}z-~X+@{7a8*+H&x&=l|q$#~!Wx`Dg#dN9rHCch`S;&ujnS=AYd5KfeE0
zwmtH#j~@HnHE;a+zo|cY+XFLieDJ3~azp3-UwPM${n?LwRsHZczxmgm{m84w7k}(O
z-1q#R$8P$@BR~45ulu?0-FolApK)V<P<hS&`nwH3^qMDr?O%M;+x!3F{{MS_<(;>^
z<<;Nzz;7RzTY1m__1JZ{{LjCC`oCVTocNoc{I4JF+<EWY#((>{KmEWbA3yZW@!vZ5
zckO3?{|DdtzrO75`#$r7{Ubj-`-30<&1*mL#!t9c{K4Yz>~rt<=1b2l{OQR3pKpI|
z!`+X4=ZRnct^f8_CqMlU=ic>+YirN_^zZ%KU;e-!jQsVZKl-tET>8sPr+(zjSLYvl
z?Bv6*|72z6@NfUb&bNMY)4=v!fBN+g-}LL><X-ckefR$6AAar9-sf*_Z2M2IyRQDG
zTduw1JKEoQ{nz~Z%fI8<J>UH99q(BA&E1>c`Pr}jow0ZQ(bI?ic*i^c_P$TP^1Ex5
zL$Chi(|_4<BO983;{NhK|Hi`~d*@?+{K&|wzWn3Q|L^bl#h1>Ud93z*|LyC3=dXY9
z?$)udyZM=KzGwBqCni3B%?ID~{_7uj{xARa#cz1;*3bUn!M`2&moNXwhyK%V93Oe=
z=u=;_@ynk0+l|jX^Yef5sy(;-?LU0{)W6-c`r3~?_gzPR?a&(@`IC<w`rcd5?EUj6
zU-vsd|JIpjr}v%v-dc6%vuAgG^nH_WJ$B>I{re{${E1@+&b{xOKKqludi-z3p8oTJ
z%?Ez_2fq8~_P%9ed;cH)-p^ilc=C0J$w&Mj9lf)A26qqc-+f>YLI|9uHSqTs0t|Of
zcG~skT+Y-F;{Dkfq@A90wOdj9O?W=sXd%hXU+9x_^miUTJwA%}^LYQ=MxVR$Yw&Vv
zzTRvN9&c68<ZcSv!lsVY+j+-LO=i_rv*xBwWu2vV^RY@}DRWc9?YZ6ZcS!#3k-vN8
z?>_mvU;aKQe-Fsthve@;H+6ie(W$ea@n$D$&sM4#8tG0%n`39QW@oas)UKk-P})t6
zG%9(H8zdf|&zd8ZMkA}aN*lvJOW>xb-HBE+b7SWhvudZ(skfTB)0UQI@@l(2leKd<
z(XP+co0Z1#tTW%L<x?%T<4(3)i&?v~d^nr0oUOOoZWxKRtlFp$zf;SLnOj_%Y1FGn
z>RF?9qOy=VASds%EA?gv>nB=U(mO1iv&3RMtJSNOPUf=ni)~Z@z*U0f>dj+ypm;iI
zW4hj~W#`@WnQYm0=CeF=3-vrl=dL>Bs`#Eyr30ijT|1jYv3j$awUziT1CjDhrQLDa
zo0lpL^s}&7X=hU{2k7Ur_SAf(=_<|InB-0a7C-^aO)q45UYX0>w1>Z*<p60utDebf
z6Ekl@Dd2i(VPV--svWdUOywi3C5$*U(oUEoJ73KfIligZ)O@>j&MgRz0dioV$*hCd
z#jMh)%rvqIDb3cU(%AW|x&&-3R614g<Q#Y{cdez)sciOSrCnLb(V#-y@<beOo^1ia
zL@8ivotpyN;Pq^#JnKd#?>h9z!RhId3Wil1Znm1s3$3MGX+N4ZvN=#^D2zrrtfHlv
zO7%=a;GA5xw1CF*Bds=ALoh+IpI;sa7gU<y(*-d0scf;8*E_BDvID<?UiAt{WiSpa
z@f+D}XF9LfGKW#j`^Vv0?PNQft)F+NvW3>!%)hjR44zlrbS>+6+9f!3)9tL%00*C6
zcGCb9L<Cc2kex+90x|<IBd9wkV37s}XdzoEmJk{O*GU8lER}bd{dgruk42feDs1mn
zv;pTuW|?R{26WA02#wa<DX5-yjXWwZi;c>%e>vR@tT)`CKnS@X*HN8lrJ#-gEuAb)
ziKK9I83d>T{2Z?=%AgX`ag0<`0ckbQDO131)(QGZIsk?(n<StNkuUh$)=@y|v|BB3
zv5cvm@W0WO6_$@GMBrr=i#*|+$LhjW`4NZ;nQH+gFA*^CVU+@!wZV_IrA9Vc1(5=T
zr2*tFqoNhHrD#=IN}hq11{8J84+b!KcAu%_*`t+wzS;sK&*Nc)4<?v?WL~>seB>11
zWU4h;Us!5TC&olEEgqJ9GSSubg~diju|xmLnNuwYk*Ojtp-aRGL{|kAV_k$sL?x0C
zDkC9ez|lgz2`zIT_M*K2jd=oSfXZ(!2kSr<FT5OHUWDm^Qevyr%8{3*&wA=$NEwXB
zQlNZIB|f~jJw8A@a<sitTQ>{*A-O=-_*}Eq&Y*Lq=Ign@1fE)I=U|diNcTLfLR$3{
z><tQtJ~ZZYD9<tu)}qy%6I$!A<?&c+4kp6Ee1NmX&K)}0lN%p7Gd+D6Y7t`>8yI=2
zbr`I0H0!9z7=>zgfpFuK)ParqTd3|`ZZCvzMC_*!FG{0AplmALbai`3e1OxSaQk@u
ze7zZ@vAg6I^2ZhyJIn4!qXLb&P+43gRa?!*vW)++dYgR4jD%BFUTBBJd2sby8wuJ3
zhIj#1v))*!w9nAppqR*@w93p<y#dG}O|u!O0<+ON2SwyWm}$n85X0?u1#W;4<s=m~
zv&6~qiQ-Yf7&5&96WD-_^bJ<ECp9i^w%uBg{%7g9SoigOl6JBRE~e8_VRx|wwJlOh
z+O}F}6(_=ndHpS!){}DT$Otjj1Oap}k4csb0yvp9W)l-Ymnmzvp^d$P?;ypxO&Z8u
zGs~$Bn((joh{mi}1puLdK6_umsxQz*V+Tn))K!N)DVR65P^Wh#%_@y8w^FMeH!p^E
z*}q(sse9<^{EvgM>-8$U!Hf(!u_%g^YSl)dLe60toRC!yNFJZ+b4~a-d7drIG?vBV
zA#0pbv2<`B;Q_<F%H8Aj&b*44Z-fc(vkGa#*g?2pB}G1RF(*K%`tN&0#6(ad`z#2)
z_Dr?TWKC5S;7@U>#CHUmg%{P4B=(b%FbX{^p|+y!(uAC;FM1K&lX!puDmabeSgIvn
zruroPGf!lYR3wn(Y`a6l0Wn<~q*`f?z<Hj_6f<7-QfT%lP!mmGBBEBX9FUseJm3_*
zwz#EAgz@HVD?hv}kizQ;bfdYgRT`Ywfa+vYkeol&rM%Nxh|s%fB@Udw*_KQ#I@x(}
zRnS1{6>{1I4^a^9f4V)7>3SZ(6m>|~Q@!OWQTMK>@9~x@`r}|hDnBGgyPUk}ToMWD
zrt2%F239yEcnMbwS#Iu7G_5%jElI?`)^Y3Pu`Kiu>?M3SjIx?Rv5YnIrFI4Y>NQVN
zfT?XAfhv6z#Asl~&?9jV6GMCO=VcVrhg+?N3va;c-aYZv%O)y@AqxYHVkXeU96%jx
zm~JX-l#)#U8^M7V2Scd4pL-_t!<QVA+`ng-VvUQ=_X<<fBWkD3MrSoqAztw5jG_<B
zn<0Or%S~a5W8l(W>6p2~Fz4g&-t^H-7^ahBM}|)yo0>i{er#;|#PIR4kTN_uId=T;
zu_rWDoma1fg;3FZDdfT6(ycMICqB)&ta7H1pk<DWLwvFVw}~Z^*ACQ!Dol~cQ;*BY
zv>!fF=qi|#%`fMe&o``X2QpO<)9~X>R4m-oT5YQ31uLtOZtxn27V(dw(iyGi6;;_;
zyG#EZdbHI#)17Ke)}2F7jD11nfzwn+3#qz_E>h8&ky8Uh_v~yPE(t>r3?e}1G&^)*
z&vK$9ytkBRlkk%oS+RMC^y8IwK3{1ZrXwMJIw)H4Tq=!F+Vhd}Dhk3QK#@vg`Xt0;
zl0L=p%K7+G*W8c^pFKP`>a*|#mK&IbP$m^V<I?%8QVXovsni?cMW#n?`mBVrrZJm@
zilpBTjp-d_C_jyWQ453g{K0hh^x|B*!Z~TZ3FL^gxYU_z@!>=ZlR~=aP)vwTVdC$O
z(t$gSsS_lmlOc5Bc?JHq@aV+stUCf%x#7m>_qfL^i0#k@py15XoNHi8(ok0fRh;mp
zL%6A$`LI}Q@0b*&M@*$rb4s8NJVQibh=-|mrJ2_`2O#oLVnj@bJDIf~&t^^`Y6L{0
zUq-ty=Y<RGXkt%ga|lvll1wKvc=R?y>~NA*bAbxN9*}wlmrx-D($q{HGh%tOHPXdi
zVcu5d)S1mzm#dh+cCtm-afW{o`+!Y>7dKm<Tk>FO>zE74luxR*F&@l<a&J4LYRi|K
z)l-;=I|P>+HF)2FCxjx#I;x2iXHlqv8Se1H3_8a2?nrhnixbWfuwT8#8SU&E=`f8V
zSK^p*6fj_tG64sq%|MXNS*y#hhwRmJjR1f-Vus*1$dO~Yb~Y=iUT)<%$Sn&r7-R&h
zC6Wjtg2eG<I^rWFDz*{#ETt&YPjH40G9YeBoa})H1&?Z;VvT+*h+jd70t!Z=LxR0H
z4ETNwF6Zb1VN1`%R9m8#s}i!oOf{=4IIkC%g*qUpgoC9RT^f0?R9CHgI1scZ1Oh5L
zk!QwYClLT#$VRh99bO<PaJpUBq$71qOv77H?YWe9^DO|oNRv^|Pd71Nf@(nddL9bS
z;$2~HLE|Dq2q~VBm?a*-d=4-CfwJRI#pXp&(Ie4s!CVNEMhYU<C{X*DD<^swMpiqH
zkVSY#=t9DJxjXd8p6Q^u4m~n7Jq?Euym;u5#xxv0QLd^6#%oC2H$B~fp2E}KX$$)z
zgbB5Ch!ceTk^R%tL;5U}1-|b==>yZ#=h~IUeerR>cQkxk9SkhP;1B5o>+N-ilv((a
z)I8u0fpc}X>ie_yldkq6u8kR_#OT23N_}C4O0BX;62eT4#UfsNlkNSZvg8PYd5vrk
zK1*exUKPW{7k$W^XJBv;Z3fx_{`7cGI+0}ZDnWXtPti;ulg|ix9nP}m>70tRkyQ{l
zszDw=T$%9lO-UYJmGt_06kcuvv-J=WS1%bM<*=NPyAj6V)iayKtgeE>nOREMNTsKr
z!4Hc2ItF_t(AfmKwK#pa-Z@v#vth^?-e5)OyTDZO&F4+D`Emqa9Rd-H(^G9M@qjTA
zfS2i?jHwBmHlEw?$f9^d<N<IYrb91O;l(JGrlN;r2%Z8Q4e;$lfLdB6QGTQ&abZL}
z5?@vY|EQ=0UBozs=zy$d*uz9y7d4VXmZTZLDs-$5O%brEme89fTT4t*JK#-zNneBk
zAtJEqd^xd%IG{YVI^mh^Ow2l|FXUq!RA%ktm^QhICUbRqJErkVPD9{@G;`42DOTif
zBsx$m?c>My6yT6_OZ9!rAP6KHjHuP2fic>hoK7=lGc|p%{@t<qnaoK9X9E64K4yzS
z9HV$5#z2x_xtMZJ7m6lPSRE*f!x9cx>DsaVoPrRG2@(^w=PY(Qeb@eqYXVYeth7)7
z38nB%fF-!b#Cr5mAwHAvO>)E*YLck(<NGbGIBDml#5iK{af+>h#ARr;*D0(y=&}_X
zEvK<fwFYARa~V-rLW*-+pN#Qk`q9(Lif3CEh|(01n#Z_&!sSMw;s`um=nQLDAnUb0
zCdliRG1^La!!M+y@wrLRU=ib3gmG)uAo{_#0o{cf6HO%mMGIC9pn)zPRa(N)hPGu+
zn+xYc32PF}w5-gT($Q>BP%Wawpfo7c9}+$I$jtQgZU*vIiJ`vG-&hy#xz}&Zf(VM^
zMs}4IzbKA{9z$c4saQr?FR|y4Mdf_Kcdrb1+_O-x!*kRHaLp>s$6M_)BC4mBnjzVH
zL2xW9ZI~8YKeSaK$ZcTG!^>{4DkcC5-Y+rLbiC@ROR_GYm6GF9nqpS80+b2jLr}~D
z1J@!uP%~WgK(F?SLRf1&ioghGNPexDmOwMeRin02DJ*8V5R`Q}=4c35h40s~Fhy5N
zM1qgXu-Tr8I+mVU5jt&z+#?XB!|>`wl{A}yz8uG7Lip6PAY_AU>3$tqv&{yCB8XGU
z<_w>pvs7<0G))jLV!JG0=p*fV1}I1~#}${UmeQ37KgOj=@xX17kcj9`g?yIvW>{c_
zL}HzlolnpW5-&YW*Q~jeSIExnB28ntI10ZjV5+@rd=vZ|Hwy4&EGoEI*p@XitvsHO
zG+J;zfM^Qi1b`8?ooM<oi)!=JgtUL)!l!Z|VuMaGQk#}hXM$75G?kD8B3u4Gv{u)u
zOAf680CV?X9@pu@pklxSCu{`$A;07|D=xCnRqLsiCDEQO&CQ>beJ0WG8*N2A8=l62
z9^zDaMOMF$VeaqbX++}~S_@1g3*DGVFU^D(k>{Ax#<Z=F1Z~c!Od-vC&`hJkGF=eb
zB)4lbg=|F!YZ=hsZLWm7lNf-gU8RU$9iPCuKcW!sG*&+KDYk$>sP*9$R2MX{L@y|8
z1Cliq-feJQ2~>QRSsr<cC3_AH7=8qYO05yB<+>=VBL3iGme4>jRcO>);0tJ36DXob
z$?X|TCp3!7G{ZxZW<cV{5do@Yf?V!s(wPfk(Ow9HZm!}}3^VY}tZ{;JAGaRQi?A~U
zmWY-gn;8h|FP69WiMDvQCtHX#dE%d3%E4IvCDnZ}tzISaNfjlZlyxWym=N+s(3^C^
zPGyLm+YxFj>c+#IPGJ!?sK-exg*9rJ-WdfILn1%)@0FH}eb5e5sx(lRwNbF3OyOZ4
zVgc%kp{hfu7g~q=)4Z39prZB-7fLfZqf+Ncp#b3yBQh-;-BgDe5{qaKjuKQ2i^F{Z
zv76qVLO;F@Q<-6|30y2K#$xEtmjv1prHP=ww^K*3Vm!RKh>?o&q6H1qNGlM|F>Wq7
zRlyvz?c~RIG<LpH?KGA(PHB}8o`MO50cd*v0DO!f5SlrK-A!Vu$r*5)+E`}xWh7bU
zfsgr=O-Z8^u?6N)9r#))wp2?>Um9OTabtM(5~46@M??_23F(wttKww@%SqV5*FFoa
zO9RfZtslEh+>##Em38I4YdXEr9UuW>V|eUr@=IIrBoTHYP@+pmTk>qP2yX-uI|W`V
zwwW3+BFXw<6okPLn?y{V<J!Ok_bd!|j%83C@;p^v2!6ZK5;KtKS}5YVWQnc;2tzmO
z3Pe>14i#o$?4(V(JDY_qnOcQN4i+sK-6U0;)FNDYl6^zsON^aI7&KS)Q7t$Kb5Iy3
z5ZW={O|T11sT=wbI9;qjV^1z)%fZ56j8f!-o{<K}#h<HpmVMdwAzxS(<RgRL-}}cj
z0fsEVXTfgKr5chF4aGuE)dso2I3Q>zMU7VwFacc!%IXV6q2VmmBVXNEON7XB?L}x8
zBtG52CDN4cqLql5nk!;IP|DWGn5a{%(zdRAtqj&k%}SsjYxK+jP{fciI`?$CVa}Er
z+4d9@3d0d+JW&}^2MG?<2k90uS@}gg*4%x#Xy9;ac(ggE69u*|?V>3JCv$92johRe
zla*O5!uYZH!sAU*te7?{x&XB|jfMH0BwHjS5kQh-xY0;bI8Nad$f2j^+GYHp(E==u
z->%!MEg3&pFU@1*Cs^_0kY)O~>h*`@-lOp@0W!5cE<)3q`CUQ2t%~k>^Hv|7afW0-
z>c}YW)FKI3>hh@d#%iJN`|ddhM)x+m!i+|0RN)O+4{4jDSmW(Q7C#Wqedx_#64bk#
zW~@Ocn>uwXt<hE)<?N|E;8CtZ2aJ2w01FC7P&O1AF47(I@Bk)sbGk>Qmj~E<EU{5p
z8fAp?DK02)>H8cd)~~6G^!jIt8{PEgoLEWOu?_3*eG}v^RKiXWM*&7jibs&JbZ#XD
za(5VOmDma>vvmYL{SzS&j`z|`yX1EU5ui1)SW8WR2x((jFzB+|&J=?Ss!N*D3Jibd
zIrXMlAdp>cfvo%M!Ye}frDSt!P}AC<Tx+kSx?AJ3Tr>;aFhG&?6NjLil{i|3P~Vxq
z);>xJQLdTEn#FyUQofWVr9_>ofl^-LI#V!M^pv^M%c7!D;l$`Vfc*lmR><cR%bBEu
z$$imfY9397<?>rN8_NMp85je~IoS_`r3@iio!e72c<t*S%{n+uGTxjA9ptb=veQaM
ziEHE`k+S52uMY9fDrV1EdCDvws}`NarMJ>PRPAX_GgMP;&rQ!<uH}k6cA#K!XHwv?
z?WSC+(r0CLGDBiE-NX!+8w&2e?zH6&Lc#e2_nig?*SK^siIMHV_OhdeGB7clq#kQk
zY5-Z&V`EH?Z<E+O0`+P8Q%P{~+xcKSgQWlPLLj+rH$Hm;d$K%|VhfLBB@+D4jV3Y_
zPiUG7X(xSW=ney|SIyefE?zlFeS%s|1=gqtcJ-5Q-T0GY+)oY?NsjZ9?sA^Vv<U6H
zKUw74S1Hxpz}xz&-Uld)cuxsBs?hFKs#~Hu0YatjL?&BljUE!{^0R2NQ=pN@7T;yo
zBKz;ki8^^2X)WqG2CTGl`X;G~lP-No!@AGT_lea-Os9qsB&#d?J8}TINVpXKN+iDD
zFa#ZH6veK|z&S~7vxX6$g_hw&iN9cBABT>u`K+#t0`Esc8jfN&C05EgSYprg9ydY?
z`s0E{y2ns9B6EY0CsEv%Tq2qEtgu8ir|)X}JyRi|A}1`$paBnoIyT_K9!;*UbJ^}q
z*dC<Z!pY@S>qK_Ww-t#Bp8*>ds-2iZvf{j*CXck*ZERamQkP0<!9%^EVWi|iw`SG>
z!O}QpWAY#h(C?RqdQ33Pwj*T1KMY8-XA+3YG-gX%iaW!y3Q|%e@T2U`hDZs1Dowv{
zvn$(cUJ3h7=q?>AgYB1f;zj{SQ;H-oyeP`v*-%<?<e{+)XNVP`hOzfSKu4aZJk5N3
zBL`uiNnU(Ywuxo+J?6_2zicFDAQ~DN<CO($jZSk`gd$DZu1t)chF6(xKlihbU~Yxa
zB-CFESe0=zo)qje#^#}wqFqckK8r4CBS}EX)x`qu)9E0*ho>qu3TmQcp~bl+0j{p^
zfshEv^`OPNxhmL`Rrn@?eH9cjuJFvnMHDU)4~jHryaR|%yu?KPR1hdBoj5^RVpR8|
zVyv90ROhj1FDr6v22(<hra-`wzZ(6|VtM01j2k9V8;PobQiGt6s@p&&l1`TplA(sQ
zP^<ypAT6LCi0>k7u?N=#p3po902~VVPW4XU1EH!PFs(WxTYkiXTlze@(5*I1I4Ss4
zYr1Vc#t{dn{E?185gs{6$e>^xZq*Q(Ct37ePB6%h2Vpx;vLp{Um07%;A;q~a-I&Gw
zu8bTtU?-WBv?!h|_X|sdd04A1I@)Wcli|uN0agmAf3%Kuwsv)X+0J#)py&|~(4%;0
z%Y1K*s38(8oXj3{d?MQV7>+>%N@{v!NA+GpHky)%xjVEjXX;X1Bp*WW>1b>aRzTPR
z{;{!D(dQ4HE0+;d5dV;hV`cuV3vp67VP+X!JRB?6!lZ);lI?19P{WA>nHOJ~Yg$4|
zh6xPc3U=LR2Y-Uo{k9W<5VTq|o^PX&=oF!wIGSD}oz@o9I=*HTU0w8&8<SCRlxG8u
zz!S-vJsA@>pcKy86u43OSZK=92z+RYXkY($RAOBg`P1HV9|9U((wP~YljD^$8TM~N
zBO|Z`Wv5%X1ftYo)#RYr;M8!nKdi_S6mJCzXLGp!32PO)`-odRxI$tUnpS||!*KCY
zsAk-6ggb>bgN|Aj6pJQCPb%p9DAyI_M5S)@ho#V13PxKE7J@NLeG4M5QftX#ois_g
zz|<_+mJ2R^g>M3LNb6ALCBAbl`@CO*2E3jWc#=LD0c~NwwjNeck`yv}a-U8M)KTzE
zqtoV4)u%$qdr{NFMlj}K_Y;;Z<aj3d!C!TN=v8AG7a}MHJpM`tTrlutY^DyeaX+5W
zAaW8;hf;^}6#ZwU6o*ezL~r}osP5C+zABoKVjvkJn$-+5Tj3Gi*Mth3yJ!gkQI4F*
zI|PdmS>Iqe-G~lD)DDq{%x^)Ak!a-?|E`jpu!9$E)0skJay*xDJc-vU(z0WO-h3DN
zuh>w?^Xowv6i!{Cukt%$;_5cw{E-|#3R`)T3?Z&4Y(MuZ=x()AObT;FpjKR3sY671
zZJ+D%&m8ryo&>T5-tnfoVkip__++K-WjdTqs;Q_dpOsUCH2?wpNo-$!R3-#G*w0QM
z$KfQFO&cqvg{DgBu^}G-(oF&$svc>iY6Qo^MrkdUuwFb(eRIG97u|T;RN$G!5h+Wc
zeO7NqjcM*AROE|;@ZPD7k|9G6b}|t<Iq(=QXd#E_;u$Fk`^W=R?0l4@h8N~oT!T(d
zfy1Tf+PSP7V1o;U(RH2fVj1BeiS$P2!LyTc<}gAXJQ>8ouw<GjZz5=77GNHFNmwF)
zM~iAG?5<nCS{U(~&6kBYss)is0v!+Xz*Z%1%tOdp&bjcJGerK<z3p+1j9J)X(S2r&
zt@h0DHF};t^Obt$u^x!geGrY6dS<YO;7U!H48!wjIDE!3IH^{652#5Gq=D1MFi-Gi
zFlknm)T8tl0EHen!vojE%@SZG5U2C8mmG$Sajc^Z0mJtdJ&CnR$wpy1g8pY%gS*_S
ziQpMea>;0LYUMoE5jo%ButNkz_ii&VMy5pj$$<(wNM<ta<dilxiC65IX`(rGcDO7g
z4a)-y*?OO(h8O0jB_kC2Bu)=jan5E^d5mI7;1TscgGd?PbbDKP_2=-o1tXR_U#HjN
zE8!)ngSTE)e460LGcH8%EZ4>m9^h8O=>7I^ZRkLH&W1X~F(^Az0whMKv_Nm50X@hm
zW7r^?ZFweA5Oag&Z_4>KFhN-2_q<ot^M)*m`MI7s<clu{FDrTDb`a$W%Pzk1Di9p$
zz_hN_25*^dbKJ;*_sJGGO?DcSA55g-H}W(d*6pw}5P$IzD}S&Ck-lsYn~bskHa9rV
zhpc@Bfk9ZaLDffW2euZc_T=mo!jq2syb!I%K}X03mis)HO3Ij=E2)9$XIq6_CRiqq
zOBOPjV3~4`p^z&nmMzCF3)zxV$d(EoD$V8YcPpaf8sRZQ9k7%<io4e29wuA0B2lo5
z2Yd-ycP9duyr3qUKq`<9s9;EEeLdVsanUEHiM2(?o=@c!aWr^OkZ)`@YUaFPN6W)|
zZsS;*l)-j2IYXz!SmG{AOlfrlS{kofL|!>zT9nO8GQSiXfCX_{zK$f*g9@S#k42<C
zg+5G-b?zX#$5uu)iQ_qyt#x8^y-e0bw3!D#Q~a`z9?2|i<Bq@-Q&@&HNDiJ_k{mP^
z1PCeYG;1)6eyV{5=CG4m2HSleRsfOnx4~Wr+H@@^rp0nW(Qs#=9K}v5^vGn*g5qI9
zGMnYAX&BKsv8zI|k;NUdCym2MaXUgAydv*Zh)_VZbDO17`jgk1STLk1>eU8}=R9C1
zInsEth{pG|&f78%PSh38<+5BDnclEL;*^q#rRcvD3z<hVj!lX@V}mtWA#r?#=9WF^
zq7A$l1P%#=vUWlgSc*U&F#|uL28LE3Bbvv8D7W(ZkQ{(me{-6ij)b8+lq&0_(E!6E
z*wU67f4l);e{NV$1tSRy(xpTq4RDsr`sCi_mGXhw78(c#idi}34!#37YUG4r^wBF-
zb#Wpw9hVfaB<Mqna=4XEsEfrXf3f9w?l*R$C^lO6*rPW-8qPD9@S_bjGEN!f^zTvF
zN;$SnHzauQr!r__?Di6lP^+P(RDxj|I@ltLADp3-7kERWqPYSf?RF>QtTJVa8vO{a
zdXuFYUEZ|HqU?b|O_gSJ>KA8ca!k+LH=b+ec*gZ?vp$BRd>x+2TMb+tBuz0vk4{Ui
zN8!rIgJeR@U{?xnU*mx<?DMH0ti3D?Dt?4ITv;>1KvJB<F>`f>zJlMm*@H4ZW;d8n
z$hKah1Gpmhl{R7m9WvRcki8h~K^R|@cD(ogVt@qGd^B7nv(BE?$kgkjOc;S{tuF>}
zqAFjk#t4~cgck!cHs-a;dd)?hYgmgZaYHbmlC~HdvT{8c@{z$SaZqgD8j2}jP=_W0
z>(Vp!@uKxA)5!m$sJ#lI@)KR!#&tk@0px_}C6nhvwiadQKX$vWB;1c+rMSz{?|mpI
z9gL;ONP5DGWvgpt%*G6;V>`#iDnqzm!P;NrP?HqfAB)948Gj;Tc^*_sJ%m*|IUvqA
zjL(LOanX9TJK@|33t(GEk5r5<q{6k~DnwReag45ahHm+SD~u%>u{#QbUXVdq4)55M
zjrOW~+o+}jbidgZPvcFV`IjS6>xx7-s|2UF>^AjarSVw3<U{l*EX1i-ajqa-Y+>w~
z^vO}$#@Zf@B$Wp>y5bALSn>oCBPWCU*z<5hT0iaT&?5`e@S@=OHkLtS#)mw-VGDuh
zgtfBvzCb*~J@q$c4@NKXDsa9I8rNuYt#N{DlTkl(HSi<yaTV_NS{?3Fo^E!q7!c32
z<Mxzrz8zv0o~u_2P!BdSB)tF~mjZpXu!X7+PC<;ydxU-qV3^X3W3L`4K>t<J@GI+N
z++KtY9ZWaBT~>B9cJ4P&&4KNY;64s<Z^O*R?@#Z(lLX;8Ue)9EoUS%HECeE8z<&HX
zB91Wf{ukMXQISj2BMjW0j5i6hCi7<``Ar#ffaqA(oWo5UeB@ynUN1z4->+wLF^gH4
zBk5EZGo=}x)I}qbFwyo~#k2)p>mJSr`bMQ(f<jL?Ltyfn>|tW3n0_Vq*YjA8xW?>T
z_hGP5vYCMy5<Xf4CYriqNnlW1ajxS*@_l+7qMA<#ia^RCvcxNAsMP6uFj9n~oNZwT
zQy7poB1FX%G~-PKgAmEW&Afz8GsDumq{*5q8szk57+Zc{hdbDy)#Z>E+L!6=EW)Y9
zS)!q9GLT;99=2%!x1nWc$cJH?!2S_3!(uoBWs^%d^oT7^A<m|?!?{0YEIEV?7y=39
zRv2wa7E^Qpei^Lr@)aC4=1eug1a~SVgw;Se2Z_6QcvFJkA3h6Kl7R{3?e+u(Eg%@%
zHw7*~9^ITSy=V$%cO7o!BysS6PgKxCM2nP=4B17knI%3Wl9F4V*{TRgfFSI}ml1QG
z$><4M1-j9<?o7w4aHYr`oMR6MlGUB_?`&PlrK>D~=2|Fs8iKbs)`4)!!FmG$OUQ9`
zL|(X@pHc>JO8P`QBm<bzo@-??e@wtHhZqxi0w${C7%udfgRi8&L;iP<|K00<Cnd~2
zhqvnV_&&VgI+O)ONwE-=*MTr%&adhVicdFZTIX?K9)Edzkvohx9da203ED#`;DQej
zZD~dx5%fP+%V!%k{P6E&M_wj7n#7liX7Pt0O&=%d^2D*oLrCFhB!$C~hkf?2-yR;c
zhXeNT5FR*8|0AP4R>RI{fWyD?T%kkPIE!nj@!sM6!nnHq9B!}XPiy8)xW{P`IZeB?
zDQ=ln`zP4KHetU}UQG`aLW!n@&1Iz!HcEq@(2hk6v*ko8R2)m(J$_8c!Mij)0IG%2
zB-q{V%i-dTGJHrOEz6V)?x2WEIahnG)VUUf_R85wWr$*pN|e7W8YHRIgsqLoWI;eM
zF<v^=XZN@XtBUe~(C8VgPQ(}mb)4h~S%g=}1=Z<O$}p$+2C$~b$y@S3-jWBFkOwOx
zb(j)rowi!1t=8#%I9Grxw%MQHrD#_m5pod26DNqRe^0iWLR>m+ocIK?aGS4+8a;LZ
zMJ`m(D6d#3!}}zrOaLtUJz^DrZ2aHjO^6g;q&!Bg6~}SUh^9~%_)+^dEd`@ip5xf!
zijwRP3M9p94oR$zh!)rGCtynD9?Hb*c)+;#f2qzOBeu)wNa5sQ6~bJBN3mjh7-#wC
zO8Q)P+ljj;^zFsOVJps2iJo$Hh9|`;lW^$obh94z%KD3jScbPMXZWm*opsRdYIg55
z#7PHfb}9N>USH?Q;TK%FCMRKnmY)-Ip@}d76Q?A{kDg1Tm_YeAEtFUmYeeiT0M#3>
zFfz*^^v4ku<>j>&u$|NpFhj@8X6V!EhaEk^VEdWhXp0xyd#ZaUH}s*z4O4u62t*>z
z@b$y4CA!kfMX!V23<%4OJl<3Gem#sQ?!e^bsoum<9R$z>7wA&%LMHM&h$FZR1*?pb
zZF2%y^pwRztTglcPTp}-pG6d+rVG5u<8kbwfVU%P&^v?J6IVg`o96P}SCnl4*hGNI
zRF2f)rB3TegKN)H=3JegzW}3}SRQ5jj^4&M(bh9|tUIZtrBk??+!BvXO%)tc^P4o7
zgH6YN^*V0;)WI^>qeYj51q3dga3zh4A<CJhS7wO#OkrlBh-^dgRT|^+We^@Q?8Q*T
zl6fX)@d+y&R7r_}$q9kS`6`@Mgs;se{Kcu-2V(v0uUu$A#j&XBaU#J_b`VU#Uc<2_
zEODzzSM)LV0ja>}wJ^UDKIVYI=ao6Q`mzR&`$v^6%ho7Qzd$xvgE4}W<fu5S;l@)H
z=X!XLVM_ZpRlGwIH32uKf3VZ(SGy9^wdfazk|Z2o!A=I=?u^S&tA4t&fVdnFjba{(
zYcDc?9ilGsVU-6HJ-Dg*Nh<VKS=h~MZ_h8|;#Hlw%GYPoZ}nhD@Pb}D>^B!-)yIFj
z37fCP<lvt0>VjLy=g^;n^Sy{av{wc*9`r0dtyPBGsl&Bz`YgxdaWQjiE*@^j*QmJE
z#4sbiXi}GhP!4k>?$W?@$XIT{7@^1|7)CW*4<{@*UBd^5P*eKzTRQ+-r(NOaIL={f
z2u`?Ttw+%#i|dcoTU_{RHN!+mTA&av;RF?(esxY1!O-54uUcGhz4o_A$WklnLCE+?
zBm1I{-H8TH#8E0;&~Jk2@#QffD}I}XFC-kX&E-<z4S(SZxNJ%0QMFc89;6wgXO*8(
z!e`T#Io(XVIq&pxV_eZai(OCQb48vJS=^%nU*q77zY?nCQ>#(9xdFIK+l6{-;GCns
z)u3$;b-iN<Gj|>narum!)h#m%vdNhaF%K6*laRXj^o4ve%<(g8IrMMJY?yc98!&ne
zy*%<dN<VQUc4Vm(q``6|cmQOQDSMrJu#{W1zDyd#we}lkk<a<IHXOVS+?|Y#nHlc@
z!hOkL9{Y?1zp>-@ZsW3JI~pWk&cW@{a$pkowa>x1uXqXxO=qzr>Sh=|!vC>@pBK@z
z?FpYf0I6;JB<f;Z;mEHyosuR^`F!u<5QO-JHx`I*p{ra!S|Zg^A;BD-0h3M1uEh=G
z{!=F$3;|-c$T-i%dSLBiLR48Hpen~m!R|ENd6h@aX5}+QAbk}sQ7&igcrU09K?aDR
z05;Jj35Gp22GoX4T<fa`(mX%`n4@~c3p10J|FoW@L>z*#iW#A*C;?wONt}UcQecwA
zMJh=_Qq0!N-I)lvffFs+6`P1l4WcXFKo8#3Ch!3t4I`!_6-E$*pejZzMMW!na!1w1
zshz*Y8gzDWg5~($f(TYPE~Br8xMFQ=QbZsFs>%3}5-++$zx<@CPU9Q16h5CUGjMHK
zgbuBwhupBq4(1cS7o(Qx_YHkiQL>%Lp~2Mw{t~}G?YK&PD+i7J7mq}uB|=8~4&`qb
zkGA1dPs~bEa#e!=W&<k-GJBU&MI(BkZd<%SHGwO>V+tbQ5z?{mG3cQRm1HzFe)}YA
zMlIv%6toNY5nss!R}>?r9&<#sz$%2-2IU=fLK6{UW`%ivJOD;lz{C?<adhuLKlV0L
zXMj?_9G1gpmit$YoIzW%Dz%wV*cjSW)Pn7cHw|3=-U^hAKx|?MUFXj+)#B$6*mUxB
z1nFr86AO)L2i+<S3A@<oJ*bYZ9nqE-*uxSOscZy_F^6xWCo9y&!6*v{Eu=5%`*6m=
zQC-D%|HT&4JNbM>YNvGEuv8V<mfU3Em`;yta`$shKlXs57q|vuUbYccxtG;(>tsyi
zmm-jwJE-F-6eAoRL`&=N{lOEu&3D%3S!z*FS~^@OY+@CL)JNSMiRbVjnYm10;84Yx
z2|B|H8$BqsqtIy87993DH?uSgtL3*~E6V^joiwR;E2EX!M2d`HfzV>M7`Rkjp0?j#
zBztdQ@CBgr@)@(-En$C+r6pT(;O5!x9DbHkszRaUyJ>FoA^E#U{_d5(`{eI_`TL;!
zJs^J{lD`MZmn{e1EVv^$A8|N)4E7Eh&%WD8Hzmh5Kz@Z6*hu^y&<S}+gUX_>KrgK=
zH++)~{LVvv4+nNy%eEqZP|?ow+h#nC;l&cca46pvUe{{1P-v}&<)Z-HugLof!<PVL
z!?5{|Iy?+sm#Jm&y44<Mw9+fmgL`aW%tZwtAYSk6jtg2H{6c>TmxAS2v4so5UC;zb
zeOqNHZ7g0;jyX8E=_GA%{0?$7XuM0l`xCl0mSOs}_@mYhwh5(WV3^hUkJ5%*%qI&D
z7&keaA@kZ@$JLb#8N_TOQP^~9?ZQxh)1=OOIQ7;>6eBtrPZ-OiE<rw!2-%c5PnfhI
zO)n3X_R`K2<%ldN_XFB4Lx1<4KntYL#{<rGk6mJbBU;kI$fS}!EI;glqa-9=0zJ+h
zcHQxnWaAS)xL^aGwSeHgH*k*OLNOS02WmnSh<Bqo>dBAL4~aH5TE>!NuXsj8Pnc1S
z4m!3i?Gij;92!KI=r+P2@@>u19YdnmL(DG#htme~txZyj3vke!;xXmGJ#-$vUj#*9
zcGKd}#$wF#9Ieqmh>EEOG#2kuNgB4c<QR-V>Ms$|@mcm{jLwP+p0oh%CdeGN*$d7H
zd(XPCScO0&d=yOzS9|#_z9MY}hYlRzrNjRulO{V`9L^OZWJ9kQK=KEAFMRAb1U*Y9
z@Pw!!V!>SJ&Yy9N2HMUYcBP2X>q?DbKszRA4V2!cdMPbd4yeS=6z?oyTymx_9N{zK
zi)V~s)7w;y5o)h-I8O#Gkv$;UBSLB#vE#;jMvi)%SnGKx4T+O5U5)5edT@HUSI~jM
zHN-RAFGPNlubzeH07|;TDF?-pV_jTCwIf|Tk0l?r!U{%uG)oRto%GQnaEhGH1AyxN
zq-Tz>rmRPdU?TK*k=JzapMuWgnql#T4xHk6BxgKN&)`4>q$g&$mWq#^S#;E1(;{8R
zXS$BgXaa<SaSnCGgr`bQk)2lPGD2hBr$r#s$=Ae)`Q-3NAcQC`C~U@>pk%`lkMfxf
zeeY(Vl=Qh1b;T)d#H}2|(AtJ>O|oMaYaM|AH(&AiLugTtKEzk727sjI=NN;?V8a+#
zCTMEOLYE0A=d@cWT{tR$r0%W%ifZxKqaE?z5Ys&MTF|3hYl4r`g*$))6IO9VqTa?5
zxZlIir4nid@nUri0Sb!y>Br@JT@(|<XX156uCSNg?_-xe?9#+K`=qXVtGSq!7o#D;
z#Ea38AQs-6Zkkj#LN`o?XE-41^|bDOMDs;@G?4BkT&I{9)n5A^!F;{;0KUM+u6+K*
z8XS|=q8>w82gbM>@r7;7_P*R9wc?M^&3<Z#fB8=rQE+7lZxZ+S$(oyITX)nosbJ<_
zSWAh?5GC3DB7R>?PE+xDGuQ^XjwdbPlOz|Pmq#?pUo^?y0OhgD!c47_)QHHC{X=lV
zu%}n_rcQx4fAYIm_!YyfmL#CP32f%TH_EUX2Q|5dqf^6NR}6Z5?<(mUVlJ3ti~6Kf
z9z2gOEi5df`2-D)lQ?8Sx#;JH=yRiQm5FqQ)nhs16c!^}gA#Hd46``QswDc3Mwr6`
zEyYhFgpzJtd(mlp+L-883C>YfVboO*P<PR!2?%%hN(IK23k{NjvV(^AX%*7qicFfE
zJnM8`Ly<K4JhaQ1dU8dO&NiC`2Bc*kjFY@UEu+)HGd?`*gOBOl2=<aU`5HUI0L@_+
zcNz_iZTgQQt=FwIr?C6d@J4j)Yh3PXwa;dOKMJHMLSHCKgx3lw>sKBul;u~bIN8o+
z>I5eSOs>v8?uzEcdXgRoN$MtVED>KPW{3U6CBtXJc@BH3<yX>51)IY~Ea$_9;@BFx
zk1z4sTAh)EJLBnh=|$+ee$RV?5MZRRs<V{v&M^t6IezTJKbDc~#yLg8))w3djrl*;
zkp1Uf%LTEYJ^3J2`VuFfmMTqYYy!bSOO0a-Nm8)*mZHf|w5Tj(QJ>e<*_xvt&p69#
zSV98}@tubv%4r&ND3@UzBBo72@Uyl0OEP&XLp)+hOF+}QZXDjG9Ra~@8~mQJ5s~w4
zGbHAbS(HYu)lT9iC;hj2V4*UdvtkchI8ETi`q8Wb$^nyH5Kc=9896pYIIweqQ)eG8
zs8{pT9jx}Hgk}O}M{xg=;p7r_ON)7mBR(Jm)DfgL;yE`hAp}Yi$JJl#s^||TUUfQV
zqnL#+;VU+>;A+-HB_^nI=?siGE~4$fijqE$Ylog9&?XQH2L13<&LJu-D5e^oyL5#M
zEm?;gf=s$)K`9fq1r>QVVH9I!vSg3aOztjCgD9i*I~(A1>SvKH6dak`4^_bd$1wIL
z(H|YCrPHx5a7HmZkKc$YW`M)FB<B}Lt+h4S1RHB)VLf3Y*&=1tjN1k0U~UdmSQ%50
zNOT2&V^DUM7?il(@=hsrN0yr620gXMP4n(~MomN9!i`gJ!k589{|vS%;Sv%crTpRA
zBwxI>^RNoJTvwIk;6n!ppvZXE&s7dhYX)vzvv#pWcMB3*Nt=|Gx)Qttn5LVzQwZAi
zz(LUT`Jj)v<@h#B2=wt9`4B=((!CI+DdXeEENa&a*}XcNtaB}Mcyfxm$wI1#^6_yZ
zZcIorN!Bod4gvI-BC;miP=@8By0Y1-oS42B8<Y)}u{9Zc=~bht(eTB_Q2HzmQ6$jD
z$5=|{46#kDP}SRD-I#I=yPDdS23R9j*ZaP>e&<PD%0g`!X|LRB1s@%;EgmXa5&EPZ
z&62xUlT_?j)s`cHkYtjO7HloXLDD-(@<RW;(hy@*|Ek=NhMs%ZWl%bHhmdCE7KgxA
z>s-tvh0CKd>0sUqWZJ-VYHCG0geFp1v3VLSi7Z_AC}c@uxZ=#t$-8CZEKGw(13CY&
zIK8MrZ0^=bd!CqK*)83j>@{kbJbL-HK6Gh7#*%=Mq*_63S-OWR@=F#;6`#0l<z-`a
zH#jluElrUOiJq~_OqTqh*BOsK+p5dPF8MwLmV(z;Hkjxmo<%=6C?M3pCOwAYqH2$s
zg8O(KU0jDrW}9*O4G_kvL7PYU;t+Zi5P)dLROPQ%0vj3EEEMXo8_dhnAbxB;q=(}0
zV~G)E3eO5WvH<5n)52DM4H_W5yF!8^WJ;u?n1rc^%-@3q_av3AujmXI-XG?|7>AFq
z`;WrH4E3;G{+{TFZ3W&|)<}6v5%B%^<HDZh7GU6n+%kw)zowBU*|VvU2thA6J+@=-
zvJ8U-E8mQ~7Or;;{ElFX>;n%8h2<QjqOH03qB2rT6VhXUbM7Y-0F-{DxfL;3ADR0k
z7vs1iTTd)nOC<y*<%_Z<GeiBLUzq)b$bT4yp^4X>`R5QLPYQLd9rei5@n-WCd<VB3
z^CkB5I819y5@e`59TRoIsncr4B+UIVsR9CG5|E<HC55ENGfYO`jL3Rgl1C|Ou~=zQ
zBgqK5IGM$bhx`JeJ@d=uaLFhbFM_D(kixPaPA6hIBNM!?dSC^|d|5Y$1!FuK(@lTx
z-(;h{z!!gGU|Vhw)NB4oUU`*Su{`mTbKX`7YRG!n*!lSJCiVG+PO8ZYaHl~pH$EZD
zL5<mAoI`^~ODcu-VA=hbyu;YtIA%rIUh9sAO-z~q%S7K_wk~0U;pFp*oyx+ZytEdP
zA%|*tP2X^1uH|eTerYW*WypvFB;c~_Sbqx<!U-l<yYv}Aw&goVu6T)G%J_qfcOXi`
z=%rq~rU4L(rkQr>otx6uH#Dd<IoG$k#TF&1QA`?#-38|Cpg8N&5`&2ijL~`poB4Bm
zQztK0^&u!Lrz=IpB9M?`f^`S{VDo(84RK5@TgC^RU+y5&B}#pc>PJ$sDg|Bu(`#(Z
z55T{5!S7N?^}vcR8o;Hw^Ue)i-L8d7(@TuXG-MP}lNKlpNRk{QN-?$Y7UVzisR{*>
z^y5pyVTEjmb0&p^<g&Oh2^Kw4C^g9ADM&$tTsDh@%ddMTCNRY1PsK&)Jt>)}s^Abr
zw?%bW$WULVl$bPDSX!1=3MolRwXyhHQ2<NtNlC<DDhpgl)`G>?w48T#s6srOEaN#X
zf$NG8mJsD-ehd_=t-R4M!54}pdQoXF57#P-=#~1zZ-GojJ0u$OgaqYclRnGV)KCbs
zV7XE{B!pf<#ZrlK`r##hlQh&<wpruV>Z;M>)oNTX4u#VfD{7fhqB(P`SJ4lB5X(kz
zs@m(>n!&K4N!8!%MlGgJve8aXOvz4NFj!d3k}NLgatS7cm9S!H@uiTq*V6XJa{DZ8
zUrgI?Y5QZ^gO>JSOgms{2V&YomiACgJ7{SKW7^PeOT<%vaA?Tlts#bf=#lF5G^5Li
zGs=W#2r<yEMBIr|E_a|;xk`7rTCZ{ds;j{v+;dazWaz=3wGSfoF--JCw!13r>s6=H
zD{*KyQV~e3BJzMJ3p_I%(AI@}ooWbcG*y(V8uaxM*0#gpMzEj{RpP3rH9ukaNKLM6
z>KYr}cbu{`ErE|jw)fz^g6`C5Bu`JC1YOXJs;Hce?vZsKk%fYZrs?&mYDvopa*jQ^
zbsoU0SciuvbLIPXuvlT*Ym5v0u_IGvT_nR@S!ML_HlPw~;&bldswQhH#*9EpKLWU}
zZ^lBg#S9s}^{eTjj9)y4yPGrUzxL3RE?sh`lb;E5HfWWj3Xi*vBwr~e0d|-<9AfwL
ztg!SJwHwC=t%ws9Qqx#NUTm!cAtqiRu6qIEC~*^o9@C~<&fCbN$>}{nRfi>Wmb7Qv
zN$9<H<A;7tjA2E((0zigwTYpx$OSz(a6q=-Zye{uaqu!OU3$vq;I1ciu@)(-(h)rP
zgBpDhk6PFq!_-)spbG-Pcq?MZbQEO$T&K6RpD|J8JiePT&={pv?Fs=HaHnu^5l0~g
z3kAFj2{d>q47ykZmJkD0Dlm^N-e3e1@0l?{Jc>!gN%;r|iRUW~i9##!I3M#TT0OE1
z9$SJPq?<vv-7f=i)x>truT@3!W$F<nnGNXSTi=qsV*ds2>*3AUIB{tRgUejLjz|Nx
zRxK{^8Y;&p=uVPm8U3S#zkmh92^MScM%$~GGs~RCT1b3(AeLKrxUfsHHGPD3RU^_Q
z;su-M=5-=gD094y<pKLXUL4fXkr3XEiHH;?lAzq5CUjp8D!UU9XyJ|iT0RjU|CI(C
zlF?KAW5m#P9*r5C_sf($B={>UU`fx%@zDUTZJ8L&x1kt>stgM>WLeYiWiCl;)MT>i
zLwEZ@T;~ywpquQ`FSUz{LM*T=1q3^e)3M-(9Jd<l_8$xYyJyLb+#ln{<rOX*PtmHr
z409dq-=IP?7{MdCpNEK46hEML7;#FBQICs(G=dbaF_NP=?pbhz9gG`SPc-xdS@GL-
zZL9g|yfT-@h>}}neAt>BsKTDuR01?#VGlj<A^@zo*jOa!*ZZg{WWm%c@Mne~X-M=!
z@?IK?bwL*?DJ8Wm&vzf@GD*3~!^=4D4vY;w=rjn1{aV=7mO05dtvURGJ>w4;q*ps3
z&H6;qlf2IbU~zdcjLh=EMnES6E=B_<ccNelijC8arCJ<~aW=9_`j>^}ih<ZjP|z4d
zOdT)BpvU8kSVGQ$L%TxHSdvbTb4PvPC03bOca=Mz#zFfOwhKNLg(v5*B(TCz%VFL#
z?bW+UxgiJU4VMT&XK>RkSRM1j0GDCIG)4iu!B8w8)Oson4F38{R<L#wFkZ3@6m87Z
zLew3+DVqiJRujDG!7-g#x^5*R#v1kW*r>x~UpdyX{4FbJ&wsHA@=MY6N=jynK>=fa
zhBaV*IwbZW!Y*?H`ao%DlHp1TZEENfP{;5lqn${w*j`WqoR5lz;e#LKn4K^jSA>Sb
z{>Bd}?+2=T>=FJG=Ywhs{+a4)SVw)(t5amV3OtliY}*e7#C4XzXy1O1k(e~C<}Y>e
zm!)W$1ibR(o)u|9BYP6J&)QM3_~@2T=fs1z$`lG~5dcrtG!{c3%stxa@Nx-B#+7q&
z1qFsjT9yqFq){Tu9xr%h9EwTe?D=N_6wiSR6F6A}4a?OnP~NN_im3$>Bd*LSVkH-n
zz&b^<p4eFW9?Bt}dHsup5NsDP5Rb-uCI%aWb)ke=_au*AOe`rUGq4rQ93x>SsU^IU
z!pEC)!m$gO%Q(a_+sPG^Of`T5YY5843@`s8q8)#FI_8cXn`BOdx6~x5tp%?IVw!a@
zRmaYl?qoe*Dvot`rgV-yvO%F(W4v|&R~yVHeOngM;di=L8kl5r<63tEMBkd3a4ssm
z9V@9PXK3c=amTg@U0ttC;Wq=$i-6`aUz~^ds>QRmU!hBvZ@k3ltRvQ#;1&Le6~+_=
zBWwFWOUw}aC=;KUW`%Lv7mg3dbR5ILG2_m%k41TLveZGWLivLsyl+j5#<cEcVjc%f
zbHWwgV6ZVU^q&<FDG-vj>rnZ@_w-gtmtN@DoWUB$k`V4>3m+Ng@sS4Z!GV?MgD<B-
zC08NYhDaSSM2%%(7mRImJqV*QDZ`@A0uGqB8}%9I-0Jw_ZXP$zG~Iw(a=1AGPjh%4
z#tG>;cgRh-N8EjQueb*O<1f>f+=A4>^)5(TkeVGl%^-Ea)$n&#TEgLXysy>npc_Yh
zwx0Gjh(0rin}mAg97C(PIi*L=Dd}^-@nm<oy$L|jaf3*I+U<64!*8!qu+K%bQbk$9
zO}L(RLsEVoHO?YcN2u5;j&jhsm0vjx;8-Xf&VZY6C)_dj1k%p|{0`7fBohdt4tF=X
zGxC&4UQ19`MXn<JoRn`!ySTClr8z`g`y_<=;t%Sw4kl7OV)06JuK*oij-j;#|3$P6
z0xhJ<Js1oJzJ%W<aLi#ZA?04sYZOnoyaCr2xs`YS<H2A@vj8Wh&Y)AqxkvEY6y|CJ
z2x3>+?CQY#wl5sKC>_LA5xDi`qc^vkjJTbPz~2n;S;yc8L?Utfmax~|u5Z)bNbB3a
z2)wt1?{OamFg@UqcQc<T3+#a?d)m2;Z*y)-6D^W0-8NjT0m`rhsXXA^&1{Ks!`>=r
zD+ARop6p6wg)08T9YiP;nP~=1^L-KdqyQUdBNS%}eH2EOh$`g5a&S$S)TL}JNDH{Z
zNrny}Ztn%dJzf>u>)f?1lzfwOugct;0RtIu0Ijv~m+f)5sub#Yqujp1xlL3KZsU_c
z1k)m-kas%~P9>%F$w$gh90T(2?A<C;mxSxk@|`3U^fdmlK5@ps<VvcY^LTa}@oyXM
zTtm(@6e)4FfZlu8#JyHRT(>hqhkM-sXH@xsZHuuKNv$|_H?Vj1i~eq8ZMHSwz7!DP
z-*&=X93xV1A>1{gn&~{L@e1OF^i{)A$h)~4|85(5UPfuvnRCv)Voo?p8H~KaJeC4<
z+le!dsE~S_nuH#$zj>^r@>$Oq|8CDA6q6dp$d;QB4$@&k=%E}K$3VWOA~Oz3TcR0(
zVAZ>Oj4Ce*n;I$QdcvW#$#ca%(z;sO1oR8($?9HBKM|_FGhgg6v9CRfzZ>4*sRGGc
z`34F?YOx1EAX*H1A!H5JT{O8A4YGwA-rfRezQL8z9!q$zo*oq;Q0AaMr+|zFb&|u%
z-HQ}eDyiRKDuQAW&5rs+-R)>A90SW|V1}COyIomAmD3d9AUUY8s7|5&#-|`4s;9}G
zro<E$Vlb8^G!!Khef8#yE!@i2smZ2UQJth(!R%_c<|fK1o&2R#uq1(|nPKDVND*CZ
zZx+CtL@SC@0#o7@c(<KHEE4`s=)&QG{4wRYv^<Y?sl6b7bChO6K~0a#hVZ1YX{xy)
z1BoMI8c}r&Au`)lL?!hQP3bu}E`6`$Na}EuNi2?h9KUCgtESP9<3_b{3ZJ`!&{BI<
zP%jh5Nm=rGuL0c3?+gP;q$<&bYqaoGMHjO`C_9=%>M5i#o#+~b<C%%y+7=F^U@rrR
zCHxjCU2KcQS{os3<!aDSL|n?HCJAgMa-UoIr4e*YO>P`P%hC{TAwXuSqA$E2y<P~2
z6iK#<yDtU3y#eHa2puU+fr>6rN=HR4y#`JRzGn)wiqui5Yl8x8h=Zc$P`T~~f{u=g
z2qlu`yXRi#P=ain8YP`|X<r5`(P1JJMF}8&?G)f+4h2LR?n)-l+GM|x1Vz)SCMybc
z5k-kguaoFR*9?AjD%5M7^ebz?TDJi<Xo@{_x6xOh@`UTgba5o9S<O+05~F^zYD6kD
zGUFWJsQ_+e$XU>V?k60PYsto#wcJ^DvAR{H+XxzLyhq%^G9J<qac<x?-RoZM+-u4h
zqY8_2vEo?BV>5t@jx4o86V92sY-O9{wkXbW=ax=j#AQ2L#_0NPkx`|WMefEz?(T4X
zE8lMf>Q$*X(B&C`bsJ?<t&gSmYT5Eqbl(jE_nM0+ppa@+0lk2toR*#SqHjSU$nkfe
z3kw;HqeJRz%}M<Q(o^SFREs(tuoilQ2#x|RYxr;4xtmy@VFt!8@V<>c!XzN1fuhZD
zH>RG7yX7d#;i@={g1kS1(v%l>lct-ta4X-g+S;6js;D8;pVldDwi+f5p#>$hjA0g4
zjoNx^hn*2Lf=jC%#p*afY70;ll*4H06w1sZkihvH4N1rK-8hXw4x=0{G<5Ds&i!b0
z>1))yqAm7U0dg17o=#g$m`zbD>f$IYUPEHJSFwMlSpIS8>kJ@JpZ$<msE;_emu1N=
zjNRzSdaGm#y0VMbA#4?l^(yOZ)1H%7F5LbEx~0u0`l#ng`?5_klN;TfZfju%kUB-l
z$ubr<pcpCVpTjT3hXYOHfQnS}Yn3#yg~KS#7S4hcMAM+VUfibW>#~1FBhDe0UcIpv
z(aOGPl9zyF1_q+oliWmykuGJIL6HPTN$vq_4!DOA?Hs@p)2Yj`w2Hpc_z2@tB&FHC
zd)z)uPN<i!M~E-=tu*eb_*QMvjWb#`(uAz5j*jApmXK3k_1=299IVCB;y&PYN7s84
z9O-~S4tuilDOG3698o$_m%>m@UL--Hmt#yp@@rj<r|6(4>y$>K!CX&*ttpXZ_{1{3
z+BbG0+mSiQa5l@<83UnHw|ExtQQ8SRiDbTi73oyDuW{}MB?C2)+fFzZK{lFmqMm}`
z?j+HPdNLx}wcHwJ5|A_g$C*0+gK=KDJQYw-^mY|31X4W<dNSl<^X_c$#-T)MRB5IT
zVk_#Kn=&ESGpIrYKq+my5u8Y`&dBlN!cvC9)KdwHNm>}n)qpdlNEtj09HeSbm0E97
z(X`XUB2ie*y+I9*dVoc9qZ*0&jaq@Ej`E(G5Y=wo?9#XL6KUg$P&THhwn3T{&<!L<
znJSw=$7;89K+2UIET7Vxq6(mZle?l5Z+uDxrn76ai?jfQhbn{9HS#Qb!)$Xrg}sOv
zV=4Bc%9FK-AceGwCrUI^bJtf%TT<0cRwa7LZWbS>l2vJmYZ|?@1qo7IEb7}o2K8E=
zK@+cQ^+2|9*fd6b7%ps7Q8A7J{^AUd(+Q4>WpsiA;kb!QPC6536w{3n8V$X~aw_kn
zE%B{-!<M$XSqEOmjbv$U1#c^FA6Wxc-RPjyr1J|Kpw2U>D9t%haz&kCC@_{>i?iJW
z-Mt<Gd^oAn6H0{DdS?(5Woo{d;H$fk(omHcDOgm8s)7tv<V{0Hxg-^<x+FwsLk7$s
zi5gkvYFoXm0J!BgD$(x#q5b!Aio7-)rUjxBhm>wHDBbPr)n&iO1=5zd8oDM>7klPj
zQ*<#52iCGmYMdO9IaHT5MdsX2^1C^93T4ERTlpc1bDZs3^U95;npll7AX~7Z;bcAa
zxERDE$W$A}aEaO>Gu+mi3L9rDifAeVg2Xo)RxfnAl^-wa1k+-wwY6&%iX!*K@fPVv
zTotvw0zkm%#f*a99F%!68m-jz7vm@!l!f8ca~}rhHT>KI{>SQ###U4tMhvp41r!aJ
zWJ}_pdn#lYV#(AK?%g7BY|B2RoW@e(P|9Fi^l%s`Sq^{?U|rq>riePzQ`9Q-LWm|s
z=P=lhN|@=73x|+sL<dW8mg`n;K7k=>NU<9k1U*_uHbu8$5veM}%9=zFrv$WE#-5xi
zujgs5?R2Cp*von9<%iw_b$X`+`5ypmO0u@VgpUG1R5;)P4EQn3TQw}(k<z`PaH~6u
zg08ZpGX!%w2u3j^+MD_&hgYTrdBa*Ksx3}Knns78BvIsFxkd5;XKW@k<X4SgXbX{W
zToPcPnnE5~n<ZT3Fg(elGVh_Wvgn-YtD@sV0aiE1A|8a_VxG3>P$YzV6{i3it|+?}
zoZQpxw@JRcaU5e}a9>=Ck&_r>c>y~{=agYnqt&h5+_o;oy`O#P6h{{nbc&*~MV!&!
zCbQy;mC`$1EVuHUv5`)!Q!;9|rbra=N*Y~=(xy}Y&dPH7P5nwsN?TJ76dKzoN-3F)
zmT*BVsypr7!eVAhOz~+9!`;#gl~~uoDzz#gT2iZ9bfgr`?&<FFleMT=Z5=9I`cUmr
z^h9kh2-)74g_uwXQnuk3lYIr)T2W>Mc!yimVjvK=g&5}Ay*qOZCDq$Z+lwL>&8x9E
zSD;gqsmg%uDU(p>xk$ux?NQU+0cGqMcA=FsUstha*m(e&R|73zrB_k;lYin2eJxns
z>$~AqOPq3<1}Fy{^<`@42oJ~MSH<>U8Qut`X<9d-zCm$8)=bZYj4H0p9Z&i*WtqZ&
zZ8F2^|I<*Kf;4F;mQ=1F9Hb{Di8Cembg~TF%`-1#eN<JZJ55SxOV(QvXH;+I_ZFqX
zxJT*C(U>WAD<4l$MuJ#`OPMHL6EQJZ!~oOSm_;hOk;RUSi>fB-Dg^99eMUoTH`&*R
z$uv3~?M;J3_!Fbh@zj-EgQ=o-I@Q#V|L8cx>s2jvM;h3&A(a}O3X)=&E(8}z<?{8~
zDzj0sZtP2ysVPFktPwl)3Ru!@I|7K*iqzd(KxypLiagcJ<6-eHEOcdjN}nnkd(*Qz
zH=$+%!B$^E8<%!txTIfVd=b@;<wg-ATkCqM3aQRPs0Nk))~gW}>OJ6?ir?ha%Yigs
zhRQuPs77(B+;W(*=pIgZRFE^e-9zpaNtFsC&h9m4D!Yy7o$yDv+Da@9i@LEn7IU~m
z1@&(yfe9^P=BOAqjt0#QMJ$#LWW=h<D&23ixbk~1w8}s!m~PQ8Lu9#QatA|*1c0QB
zJFUvf;V??1O9xaybSP;d84=du5<$ucy?C66iMv7|CfLIk{gpU9a|d5o5R?87)nwbb
zom_;i75t#2-JJ}Lo?9#T72VN9s+*_r&utn2k=-r5JS=!i*ABS*QL1lyF9vZp)A|*6
zowz5v`zo?zR6Tc~Wn--rUrMnkaMS~Y7qOGu7&|E{E1$Cwxwp_dlWwF(P3p)P_n#0G
zk_twI!u-K91n!*qe}p8)56y;~Nnme-n89&fg8ix=%!vi}DN;x&IvPKvct4IbDx|?+
zROlUYmZv7h-KZv#ill?({X_VNHNZR7Bq{fD{lS)0DFN!Gx!X03s!%;Pi<Odt;6J`X
z^C!@ot$B`0FBR|?*FLF+de*$Hm}@H~XmdMrEM6KGc!!v(Cf;Brhtj99P{joD?HTRd
z!5YL>8pWFeP7b3Em4}nnS*kovR@};ajCIU<M-PGlFNWP20a1bw#p9Ug5Co0!(|Vc9
zN9H!BS{p^iC}tZ;ptk6GDi{J;*4=L91792<iT}C`kX@^9r`V?PP>v(7@rk%A4%)Cz
z8R!+4ciTt{-D~SP>&|it-2l=G->dS|VYi=UA_p0dObd5L>XR4Qx=x~%?<fyA>>9Yw
z>bh4Cqjb6oa0=ySWke*buGTSRsDUh60d-5DgKwrZ7R$OVq2GtuTk0@aj^Q&#vb+0q
zuU;=#7lt`bT<F{l!{Z~MUeqT_1NCocR%x+161P%!MAvLcGme)fQg_;*h6KI3+q~<{
zX&gKdcRZ*WFX3e;ZJxr~1L7yiN5wG6l&7ESQQKNY*mYjdxj}RhNMH5lbgh(5hH+tE
zi@01n45Rqb8Bw}+r20{py479oH5*s$$T)*30w?_~0)C3R@+F=8?sx&ty@Q5a1gD+j
z7`Roy9Q8;+QpQ3!YU{{D^f)At^7IIBLG^$u-q990Rdp=oQ}>3eZ$a7?!=bbroNdzs
zrX)sa$tS88*_X<aMoNq_gwuVI`sRpr3?`{P`o4Eq;I_GX(fZQbk|Ss%-TlLWmC|AX
z>$1mCD80JraZwjU3YA<LF~yF$11YKNSyX`*uCa+c#fKYosGK+xxKhh%N3=%o-BoO(
z7%)jiOC6u$%17LcmiEpm&&~hm(9n%!<GEhLBpMWH>(whG!fK=lA)j#~Y`u{P>PcDY
z5>hHtLagq7d$9pE3+roiP9;5sT=$WY&8&Z*eW<9t>9vu=2MQWCYG`ox4JMIXi&lm!
zYdh7OMN6Q}pthZCPJfA-lK63Zi%?LG)ZVNE$15piYR`|O4Pub3X{bENqLk9f+B&7~
zJ_$Ca&q^KldbEav(`b!B>?XDc*(#!2S?yL8X|p`1x0Y$q6Q08$4~<5;U)I#}JxDKm
zddf0}a;y>U?S{Z|wTE$lTU2Ilspw`$=S5f9imq$7Oe^}-l&dpOvq&N<bgJwa;-eEq
z)6cCK?ui%Ht4>Q)SLy1GvXS*pJwgM7mhXQ-u6V`pW5(S)UTwdZ&g}$ufb6MjDC&|C
zib0It+7z?o!`oyQ+(+f>y6xSRg81B0TruIw3F8uO;|WX}EHBn9O?faqA)e@t&|or#
zhoJdRgEulQ1&YoDgljv6Nm)5b6{ncyn}(~&RyN|_YRfcE%!(5cwSCktrmrHPW;t~~
zt8IB_*RgaoZS<E^BSccB)0XwxFULkwYsyKDYB&w?#MX5evju?|9wMXL@XM@WR$e{M
zUZX5S(Ji_<K82@jdKsAH?%%$<d)1>|xI?xj2F>%z*UHF>g56c>{$8clR108?INJ_v
zdpntg8kiH#K_90glhCq2_-=?|?W)w^W$hoA9J}$BDoaMO=tt`&)owhH&kzN<lQ9x=
zA|kx073*6)VBkk)?QYOkQB}=To>k8*U}({NXaq6cDc3y=_M*{5Zie6)ZGuBqrx7}b
z-w_;hKPB%ZeNB+b0g+ibm*=nvfii5FtlhB32?oW4+W_ts7c;urHv2b7BI~OF>Vzd7
zE7<QQ)i{F~4@K6ke5mZxYc*4uM1?BCbZ$z8Xwjv(x~d52RfB`((8(!`<nWnpB+Jr2
zx*OgH&!lODkOqZ{wFnuxA{|WMo#QA~K38T6)erB+l;hp~BOn*aL%r0i_EaJt?p`ZF
zRhshg1X?JRBsbawQPD>mQ(S|ILbL~Y^v5+YN_*0+{8B5xS%OZv=qs2SRb=1o#g*l$
zeuyMnp&|?^!eS6vgL^vrND)L%v)bfat{-U}iaBem#$qpY<gE1it2lkzd#NvXd*tL4
z%_i|~<-1a9Fp@)o(<u)1h6;IcCYsu?)c51SPKdTCr>Yn;>{i@IMn_0{<X>{{EPCX*
zMb(z^%~i-LYe93k(8`gdjT90^B)!~jD50BgXS|GZM3|^#=orMd+{#CaLPS9%D*oxj
zTjd}w!587{67m~z=uHhGV43zP9;rLx{3NP>W87|Gik?c*A5lgn#t4q8+0;Izh&m%E
zJBPnfM69Pp=&m-}&|S$k!&^IU3A(L(12qP%$fPiC8q>AF5*d$!Vo-$u>S@=wa70kZ
zf@u&iN)EM3?}1ST+R!kiyNLs`U?@TRi7yUl1hs7TUO2erIBpsEAN}G0|Ahe>hn(tj
z;=X|K`;UUUxErmD6Ljkwm7Q%f!h8akK(MqO^eTh~@6eXYLFdOnalKi_-EOrRCbeA-
zN&X##0w44RL#JWuq{Ln=!Jc9`FIC9px`6ri+{3&^uQ#byFe~Qn97Ef-{;Yj-Ss=9r
z?rt4x+Oy589~E1rKA77^c<I{OwtXI!=lQ^7Oxv`rB;_U@Ww1FrInO86IA(=5>M(bw
z*0<6<;aEi+<sauHq`t65kyQMPC+lN)kkeffNjDc#Zx&}~DO1yOkVp*-lHOf}m42Eo
zs+%R#V1^#OS0{ptPqc)DC%Q8>ab+rVsmN)ksbqetNO3*$$qF$n&7$dInt{(UX;hQV
zt71u|?2A1Jo$Z(1PrsXlz6h1OZAVepDLQ=|O7}5D*0HIA&X?6tH?fAzL24M6l!~su
zx`qtI=mH>n?OT0Y(Y+=nX#{mE07*uFvRFx%X=oY92GlpiJ(q^#IbGhXp`kjS^j>ey
zVn%QrnxxzpH<L3eT<(b*2pQ(obh<ohr|y0MZP0&EwvN(iuqek}-EwZcv7{GKIzf=T
zF^M_W%DaoMzwP~C*8`YF(&gtagGfb{OI0r%c=y^+cl=k)i25*PAWh=B!Gpnn1^cmC
zSSjkTWGbxeDALEVcqu)lTpSZlF;Xp36krXv&4G<#08&GRrEuEHx0SnP!?7ag&J-E-
zXKZT=2T5VjnC6QP)N0r^M88_+tg3Zm6p1vTR-*#a#TTY<?Tl_)v0S&f7?sFQl-sye
z!kn_N6fdYC|5(t%W+^c|F^syZiOVhYqK?MBG;*c;hPZ~M+KX_h=HdtmVH^?Id}n+c
zM?Nvc(p17Q`NJc4W12>liV_h;kpXmWRZLTO*VGx<h)+!dfEaEfFboZ-$@#}NZ`wr%
zXdV{*0!0Q<KqjYa&ml$rDh{P6+++p|k6F||<zxz^wr_e)H7yR__TdoiVN@s9b%?|s
zg9Nmm_v5eL3#W=vH;htD7#iZ1y>f|Ey;AQ)^hLiQikJZgx<0{~Cb@C#-g~u8&c8y-
zr?ur50`XO}x~&V9EAN}aaLFm$=&a!+rFXP#L`f8>UQ5|U!DfA)2-3i@M%q=(bmFNh
z+fFgrWV9Q>QI9cP(06yr$7NC2gA(*&ap&Mrk?W$k9K|?sqbkUij%^RN*i&}64#4{g
zOCIoTYgv1TYnd!W4k4blMS9cEN6;cJMMjTB<r3i;?1JShAQ2io)LBmrp$uhZN5!vR
z4T+_piD*;Q1)-}EcRx}(ikgTVl4`N&<7#^mG({Di8ghHDr7&6Cc{53(`#(5PH8C;z
zSzZ?7vWx1x7|%2)j|XJhJ~gwK(LI4T{Dj3)tLWMGqNJ04vfT?eiD0igx-H2RNEmVA
zZi^*S_Zh?=n}lso!w%Fu(FiMcEs&&YG`3|i7w-K}=PlhkM!M}{Z|mg_D3znhCrwD9
zA}iwV^3n+7Iqy==O$;m<Ct$=6-wjIIUYBB74NMicK9C}@eBW1)Z)kfBC&Y$XMfRdP
z);K`DLG>tND{9+$#0q?YomSDDSgX-XR7oLrRh$$Lw6|0S=9#D-k2{ah?%S^1t}4HB
zUDBU+gmcOCux#{K%PO}RM&LeJcW>{udxQ;cIE%h~;Nk{ilg9bHb0wvjPHv6?V{_s<
zV$boGLDc5EyNP@3q6Kv~(VsaN718bSZbdZ<ww|eeRo~G1`AW6Dpc*~1efaIeeVh@J
zpzz*It|DdVUKl?pA2Bwd7j30A<MF|`-^3!@Iv;0k@`iFAosWj3coln7aq{QZ9La*`
zoAd@gE_wA$uQm3yYUrYuX%p46-54UK_Otyr3<F-}G~#5z(~PE*3klsC!^TfjL{6kJ
z?u9!@^i88^B~E>vU;Z-x*&WpNB884LXAVa_iI#P_opTjE%VhTwlFso^0`W^dsoY8b
z*IWzZp{O&HtKVRP%k?z0>kh1y6C*peN=!^s|H;iQ4^uPJkyZVvvPxS?c_UY72+Uj*
z)8EQ5?lzX<a*z7@Y*qKgxLfExwBbf^8kPYYIt_ELB+WR6ajD1l$q}p>?W=pB=(v;}
zm1v37I&;Tt(Um!cHd9BOv`RUW&&2eTe#dND7P{g|^)Pz5e`Ob+wAb5bi3@Y%P4DV#
zma<7J&5>h|?u}Z*uQqOZz_*ZIJX##h)%HPKCq1mZuZ$2bm6F+r@G^3)MqC(5pc<!%
zh>lgSX&+ZA*$X}BhLoog*7-LLCl3MW3I^HC-AKfcDOks?eE&!fEJo`^u3|{m_%U_H
zwHtO|{L7^f#vM5wi`=DwbarR-C3Vcw(qD-KWNXUv)F`xA>;*p3-ZA`=;&h5NQfacG
zt4&3HBUE`6$7V2<iBRNFq9vBar;boh?HWVcj07<d$2#ORYC@e{P?i+cj6cvVSNqN}
zlRL=*wok&nvdqil$W>Xin*m@CzhX=zmHNmIL$M{D;8JUJ*D<f$q(D7mZg~(qT>IrX
z!}<U$EvX}9-+RPAt&bIzVK2Aa%FsKcaPopL;Cg0_5|#SJ)R@FVxqdg)kyG4l<<g;#
z0|xumNNJ>k8)7uC+9ixdJ}8X%fiiX&TPb^&6g6$xId}c`{!M+``?vJn>^AGqwcGnw
zF5#8G-{^n8-v3_e+r?tn;Ro5<`nFwu*Czh%xOV%t?R-P#w!Z#b@v~1`{EEK*(|9|n
zZ!4>PTd%oZpSNgR`}F6e{;WRRw*$pje}GN$XO~0yUG6%0>A(E>P1pC~FJ4!^udjb~
ze)INiEAQ*Oj<9~HZ|4rCf4;B((xZHMuCIUP(*macB1cE{_xNRjzh_A_-@lV@pW4tr
zv=x1C>Fd9Peg8XjyYc!yY4bzq>w_%x7xwVi_JCeiKe*|7R%TPE3QY8`eAsvVVIX*Q
z6LR}6ega9)IJC;78#nZ?Hg>r!_Q>Hr<MH~;OHqjLJN)kee%U+0*k)jC1FXRH5SzGd
z!;b#dQ9j)(Pwe5g&?!(AF!;<}Z1^4|pv;9G8+N&VBweq+Xh4#7^`Q`v-$&&0<(d1m
z3CZ4p;qG!fHuJ9*eHNu|0D#{IR`Rr4`D@SvH9-cU3r37OY-%@};x8%B--rC~A^io8
zcajIT`Fgi)*xEmYL9Y(;0ljc!tAF3WdI^=mFT0$u;8wo<fKnK#!p@g}pl<_eUVe51
z`o?%K|JX(W`6YP#@HO(dYr|H&d~B0{*|qVdczu3zc-?hPKN5cR+9YAurk5e<6W0}z
zc5Qw+68~sRDRI}ew<7t^6jQr4?Ao~Nnq8ZAZQgb5uIs)88K1eKtNgC(c5UHM{+$kC
zwcfV_5R!#<3jghtSD?UNQ5bBX><O-1`7}{<Z$uHfW+w`fcXwXDecS5W$ru;zB9EZe
zhx;$Cum&DieyacCF`vA%|KeNuh>olT9zzNCj}qiX2!KAI{flp9M@SKgV$O<ZSAAg0
zF-wsLq^xe!AzWzq-=|cDF4%8FS$u2%>IYbtqDLuM#lS9n+CN-;sXg3fS)wIS_~NaW
z#Rpcu$TEDmU}dBo$$F_D!4Q8@WJp!Q5QTflV`OOC>iY;2aJG7IgF?qARsj}-TY;e=
z>JAnfg2bS+ZC1Vi!ngRxo$2F6>P^s6sD-Zii&rhoW<WIp4xC*W4Gml*#4I+-Jam6y
z^d<p4lA7<&^~HA^z0@E+gphm?a`8d<fMY<PI>77tFT8il_H7qlxxqhyk@QKpWT()a
z{G#Fx4ixzZ1NZOrD7rXG1q)aohTh&TKYTk#G_f!0@e5BV&H*sB07xKML~}#eZDOq*
ze&iQNNe{x)?;pw8d{ij$xD`*DNbP{0gw@cpC>}H|zevCIMlS-FzH-~8r@W4lXHVu!
zUwNG$1D*ixg>OKmujIqq`Jj1Q`!76)elV0BRCF*TmtX5qEe~Ya%db^PE|GCb$xAR%
z#DyeC3AQf}FY`q%%LAw)4;MG#VSrhGVGn3VQ&@&sQhm2QJfwrz+J9M|s8BCI1f_xo
z1V5TVO!3KDmIpQ{5A1?<&^z?jqZ@8^H}|1g|D>bdicymu{G|%gU#M+)--KT%-q0xv
zvr9?z+__aq{ug~@6BLxJzxF_~5tvUg;jonY`%?eA!~YKGFAS09-{XJp!!OZsBLJ6%
zcKZyvDQx&5|9c3(%60<7bA4M^zT4g9+%+rCy%YY@<_-9R_fwO@L+%<buk^Wh@A%A*
zzoC8W`-h*c{nXUSm%U=w^zdijv*Fn{zvV+`Z~uRO<i1CK|7WIt`u^*mdiIIm9sb*U
zo_u`pt$%fB&-LH`zrXHlUiG%`S$^R8H@){yZ#aJ8o!|SpWA8t{@$bHC%k4`$7e4lH
zW)?b6z5H80{%?Nh+^wHF``(v4_$&YV^M`-(z`vaPn&ycg`B$&0J-nFR^(DX2e17}F
z>JI@70NBSrgzg%?UvnM*+=M^ZX?%0qZKZ>1N6DrMJW5Ed_$2i=GD8~Kgr^I?P@HO)
zr`F|p<Q`emN;ezog#Teof_EbbvQK{byc^FCC2t1{dCY$h|Mny$iuLy+Z@=4%T0{6d
z<jbY)Tblk>QF@;{0GFB}n7w%7QhCiC#D7&lQp4LGX_LX7J^1&aq*qW@A(_R~jDKTZ
z6*V8izah!rj}{0aS2rr?>p_8OAKKZ6lC$`?8+{U9=I=$l8T@05vq*mkHQ46?foKnE
z^FM`{qhxP;Q2qd@$TE9mlEMS4yQRk}daELxJsp&GhER_99zrYoQHmuiNSi?lVdmfc
zcsn3HF?|N5IqH3Qs^Z^6sIv#<_-`-Xb|bfjXX31eQV*g%Lc(|c<v;dDY_Ug<jyW7Z
zgFF?1i*KYn@k30r$34g+9v(z_Vud4RE-^}6k*XO|2nRzZe9BOo<EbG{b28uCL((I0
zNgmrTz2o_XGV(S1C<#$IqKJuz#Ec*|U&dg)#VSStVGI%;!^G1<$Vr=_YLvJu<Zdnk
z6&m=`9IJA51kMI!;>tBjLXrkH$}Ptc^m>w(Wz76@YoELM)O@|!8aR$GD&_-w2Ok{V
zJ-FLp3IH8Awc+KDw=0V$TFvlDQG7DAbuRDQ#B7JZ>$P!vpZgLvi*GFs9BJc|s^?nm
zGXwbW=D^^Iu_>H(>T~^%)@QPI6CcGy836==*u8yjuseO=%Lay*Gki93;8bP4o;3&d
z?B2a^;C}ubbnfMSZkq>w;DLeNv-ofSe&=4&=dKN7QgE;9bHo93XrH4#HGLUyqUw{c
zTH&@nVHcv~#^FYzbxyu7zKHM7#**=A3rdf7GJIjI*HdVb&G%>#`N&zj$2D{M*34O_
zHDF)`aIDke7u4(*0?HRsN01(|9BEL>ARnI2vw`va2)=pT7;Ewit+jzVKJAV#H>ZS>
zidQOrrTjbk+>WQiSK8%!uWtiSK8<f=pRHFjtOu0fi$jP{aWK8oV(vfBr(Q7kO8e&t
z{hCm{qR+jYjKr_XRy$N}k%{i^b6;A_d%WJ6KZS3oi*5_dcD3aO`rIp$_VB6fda=VR
z7Fcr_FFa$tfnO1hD;9X+@O)8f%=ft}F+NghG$!!fXngU$aXjnHw`%v;t7OS%sPloA
z{@y##I-9i{tx9d6(;CRm<7?Mde8hTrAYaU?_1Wct&U`jdMUz&c%ijD`^(#pHC++-;
zLdJiBMpu3uhV=bY^YwgSK^SIWzLF2jWN=azDsWg@{uA8;wWW+)QqS|HEFU-r1u?K#
z$#XhC)fUWA8y{DPdsJ!9EiGitPCkHU?q00GcgpWZYP+&LI6xL{fvMUF<IPt((hwS5
zvz<yaaHnsoixaOFb#%4}hM3c+0@p~ER$tlY1ahr{G0MXc`3QS#;c5Yh<<{tPjpVC?
zVvWjcBwt;d5#s;<=?mt&f9|MTy=Aa(<&yt^{3Jh5U+*jrp3K?{koY<Te9#hOTKN9_
zeFOHj`TGVQ%jCoM5AWe*Y;gB|10%5iOYQ98X13I6R~q*XoLriLp?Q6_Jk>grH6NZi
zaG<iky8pqUgM0U7yB|8Z^7g)|(_j0-AUV>g%)O{UY+{SKdnu+`5+TM?;)c!FZQQ)=
zWg9p54{g}I6+gFb*u3Lf<Z`VNujBal<i^eNyoBdv{CnGm%^O&R>x`SFp&i$3?qB^V
z{;a$m`8%)KylwS)JPdE#ypvg%9^Jy?vX*$w=AHewvgC&egRCdA@(1~+A;n~AktKdZ
zN^m`qmC$Pc$}jTI$MNUVD4+gVD#)6m!rXrc`>x%9re#S0>wze@`Ysm!B|d#4|7_u(
zKjNRS$DfP8fj=vs*|7O~zC6$5NBQT+FoFg4Jam(9&K85DSA>~YKZsssX;e}Wy<Pb<
zYZA8A0sOh}Eqq!9Oc!f>y^GL&1E34*Lri#wfy*_Zm-xP95y&#Q3dEM)t#s?Z(6EQ6
znEV9W=F^3*<e&F$0?_if`Zm6=;Lqy&`SfAQ5m5dM6HhbollXJ-CHx~Ge}+#lyPjY$
zhQ0a$)>-`kQdf!n3q<IJV|*n-u`Ys=2*MBX<r)s>eSEr3dYZ@Mg_Hb4lwZ6@TGjO&
zR>PVAs%^V?NXDt_Am3uoT(t2l(!Vn%UL^Be_&l3yu(zM$(_1~bST5U1Qph^T4(4=N
z<~bwJ>Nci<3jHhZM#jqb5XwuVVAD-VyR<vhy^cN0A_>x0k6ZV$?tvU#BW7E_z<LDf
z;t%ji`urf8zVt_Uy-b8&Vs{rVdxBkhBQu{eD$DAJVFgPa%={?J|1fL*DxW?SNO9pg
zzT?lfOP{=U^X(V@06eX~mv8mIFY&*l{`Wrrdx*__+P@H>OT^%%zvuWbzYLF;+4bd@
z@(;&w36O8QZ1m!S1%%;YmV>IexsQV(cd+PXjHv(eTk+?@_wmoCSo6Dua$Fw}l*)nt
zGFLy%KP1A1Q9gY;{#<;mQRl*_JYh8it8BzFo_3<dGaz*TGmHEKa`s=o3$SGPcN<<V
z-iVUA!ojQ>|E%!OxA4z*kjv1_)~#I9h?_9B;GP}bf3cYv{kPueHXwl;G5T-4+1-F0
zp!x>*r6{*%AWYxC^4@D-+J^-#Y+7(`1OD}Ga(&o}aSi_N*z7joaR<VGJ9nTk^qgew
z+&JL+t{LdtumcZUuX7vvZ{>gJnLj9kgv|pR`nLApdfmWAhy)%s@qNd&`nqG&0Qwk0
z6MZ|j;EyV2RN2};_Wx1#J^)ruY5e#(@BF!U{&w%3X_~1!HTTY)zm=_36h$$JLZ}Ri
zVY7-_MM#RdckYZ(nW0iDVw0j$3ZbQ_givH<wX}95D}=Hk+wb#v&bjYgcE7*h_s8_y
z^EuCR&Uwyrp7ZxT@4a5(oekgw&NhOhBucXM1`0jMiM8S<%VRFNlJPXhK{0%a#>Arn
zqtf|YCom1k@%RQHFfA|*;=y2QiNXX>f>}c(tRS<*^B&d&HOLKmRSF8|3AF_W3Nvhk
zR1y*r&+8vj^J%ELu~xzsJ=1(RfGo^{g#&n?FIQJYbd;n-Nf|yG3%4m)ja+7g2WCey
zShe~^=+4<l3eV()md+}Nt%xur@W(=<&9sn%)+te#uTUGrZA8T!{FBJ~nG#t)(_4Zo
z9`Qk#z93o*dCX{J;e#;)#l`~>WM&$dD41n@P!_^)9W&D*?1*mhL5b4pH;B%-Qlq5x
zve?2b1_CG&)z}aiXd?py5t(fTVA<$KQ_&4{ER<Hi0Y4{!!gwVo)0E4gR3JXcRBpW_
ziLS@oY9hwvq7)>ONfuKqVjU>pE200(1cq4+(zH{a@+XAZdE{nKqCU8KLv`bWa!tN{
zpmY$=vEwyJp9-H2iow^zVOgu!F?B;{%%yZFIIW|-V%nZkS(}cvimuOs+tj}wgiY$-
z@|Ga+`}h+*>)%4AxF7MM`FP7jewYD&Ljs74F7;nzQWqG#*tT>{W)F=Dh+lYVGlYUL
zH<E4e1z}>E-N<J$F9SrIaqv=Hhyis1A!|(3!mCg#7^=T8`WqX-<|*279CSvVi^uXZ
zQs7g;m3k68@JoKC$Y-Xa#gJKXu$_oPFMDB$E><Mvx5CUObq|g^c<OI3p2~~CCAo<U
zG#;g0gHnFbpPz*kw$j0@l2lqGNR!Z}Q8rT!BO8xe9i#y*k_;IZk)9Bea!fT_>G1yi
zG{wg9AhU)&fu5+OMhmRQC+-lS5Th>C?4fb{Mv~{F_liQe4Aq$q#T!%Us5(Bp;Nioc
zj{wxerLFcp$4GZZJSJn_qUx*zi9CXC4tWwK-N23O?9(YIfc?RZlLAfK=a|y03K_~8
zDp-hQQktlilpr^ez+A8@O2`?QB-jz0K>e=&RjAagCv1k+#+8=Eu8iNOQ`<_#P|zO|
zNqQ6qIqn&&h`;sBfS2}UZyS_rLa3J9;4)*L1i|!R%%f0tn<wBd27Clc$N-N#2w5Z=
z4mt%fH3-{`t@Sh6u5=m<Y+^dxNZ_y7*l@NRi<Q5L=B2Q<Xbe?tDFXxBx$?NwfNNuc
zgkl_D%muRi9vq+0K_$vwB`fHWk`(D)Dl6=fniQRMy{uyoUZ6;1@~ewx!5-;JtlwNY
z>)gYW#Qd+zXC*znN$me|4K3UwBT3+YUPz1d$V?LXKU_`oC)vqNCT%9g_C`jA#chU_
z@!!@rH;Y5LRNd>vw2%n5D@mmXVQ+)R#}J3U%+)eK`Ui@!lJQE1UYA;eks0HNH;74v
zomBQYoDMh*qHmJox|)nja18Mm8EAE2ASVNOT(PKzt0fr2i_M@p4kLh!4JZ?zx%4TM
zG%zp|F6TA-D2~pup+ZJbceDA}=I1O(<<~<YnWfU;mvB~$HpQ4JfVhs~*mGszN|UH2
z1Bp;R>WWd!4C*reVc-O^Lm`|#jv)0$AR9(9NfN16Cq_*S5@Jf21*;SZb~Xz|P9|`F
zJi0UjCV(rpvWz4by&yA@97ak6O&>t-w>c-eKprLvlNDlY4``1`!;N!0KnI`g06|D5
z`G1km`ak1;<^G*~*8R!(jrSM(toM`mU(VmfXPuwi|Ka-~pY?t6|EKGh`mF0y;{V|J
zuFdG?oM9HbmcuZZu$*0VOgFyOihVp<j+Z4db)#v~nrPQnG&EZkF%ITyvZF`1!e$GP
zO^4GVAnPl77BXp-0>@!-L1)WRskvzUKvNBU6_d3f1XHmhz+#uvGWa6hGzcTIcxclg
zuhN00p~yfcV=TjU9>y}vu7T)HSYAgb!tW6U#BLmG7H^F;3#j$6m&RHV&FwGxjMPvf
zMAO)yKx_>DvY~yTr|F%=IjpCf2rNtvmW7ENayWgEzJ}qRJ*n;V!NK8!>E-BD4O3+V
zXa6d0i>z-84iQxwmPw{Kt5_z=@t|TEtJg3Uc5PUOO$Dr9hTaE@<Er4YoDz60bB+43
z<1=mJhuP3Xe#tSqNCvb;T$r$e<6t11Vk9bmfae}k4+KntD2EIjtiVWPByAK5aO8<z
zl8}kjiAC!qWvmW2OeG61#y5>|kru1N#mZV^;5vjP>)4XEtZQwlv09Pmgo~h(f>4yv
z#iol+6FsJxOh(fQVx#c~?}d`1`H$lfN`xw+Y^+|wY#7EGJs2mUVx&N^sAYqXLDR-{
z78zftgJX)`%%P{m$#N2Lu%MJ{Ds8*VaMaz&Me|?}1_5{%r+@k60EnV?V|y8h9Yn5T
z*4RPlf+BPM(Oad3C4|%%Pfe_>9Z@nN!?7`#XOeiaF|Z*#nRm(|B>{hQB}`$$j$|7_
z0e`U)M-bj*n;s4mFEn*+ruW2U-xJ$UQ#WJ_Es<6}B;kD0=<syzGosHJ6GWfMP%t8_
z4ktp0DmoZPP<aL=6dS{iCJlv9$TV3k+0q>wwnKa4!9DX!(qX2g2!Hf-r$FH-WB7kX
z=Oy-3J$-I^YFOVW?Hb!73b2V|dvLZU6&WH`c#HE8VvQ--EgF1i0t8sGVodQIOp0+h
zHxc_Qi3DyZ72Shb!kpXXs}zcJ*c<-8A}{&xNH-=BJL-W!a$%TuDwU2xUxUe_&-j%i
zp^z(#f+^u*IKPoV6W}<IyC<|)DkzYId60nqdx`0Xtmm!mO44kVZxyGKz6T5Kp(wHw
z^9+@?wSE2)!wDsfCCPH3E!qOM6Nn`N%2~wWnx7a2&@rKFB8~VRvu^N-N)0|NpNzFp
zrgdy+2Y||eVJlOKd@z3Xg|FC+bI)u}F$q7B%wl`8IbmTPB)Y&6Q8e0`yGOJN@<bGR
z2ONPLOh~0-X`!X&4ckqX8+Nn#W6c=fp_v^>d!iFV<?Wz2JZ;C$)Y|5wR1`15)R=s5
zQ@g0dL(Ln;agt~#l-%l&5Gyg}jbWryiB}|iQ0liba5kwpI7{FQXbTQ(OCZ_cOUyhn
z5;uz^lB1H%aB-LoW%@Yyz@+17ObpN9qv|qBKobgc-td*AiDn7xi1Ns&RRS!_i~|sW
z0?lHSgG|q!Vy!N^#}4{raBnp|7I6nfF9slQ8fJ*}8nLQauMYY#TN;C@QE&wAY~KdJ
z;Rp<$K!I3g06r3{X`4ndi^_^!rcP6CtcJFQ-s3uoV<)C`)K>b5nD5uKJzfX+ZA87O
zjvB*CyRnL;W){J~i6BgbF&RP~O0elo=n3o##Jb^Mk1$6q>7n9_)+O6SQCrhUL)Z)9
zNl+Vq7>Ln9b8`)%vqd-2e)ypO#g2#<nuDbn4=RwfekP6@SQuLsqdQt&nz>;&CJp#e
zAqH3)y4X*%7zp2l@#~~%8VW@Y>BUbQcGGQ=Dh*(IcEZ_E4#x&8ab&#xb?tj$?UB@U
zqID#b0~oA>Co$;7SezGUNelvrLN%mwV&q_VMc$ZPi>(*pEe*N{mNl_R2N*TURDUt;
z9`%b+tUc>7f1-!AV&+0osPA?e{&<oY#Bn8D1l=iK<1g{xl$9Zr2sMg>MI{-(i3!Am
zSO~;xa!Q~*1mhwv+9HkZF7=IO5;)uV7~ai*`Wg>6FeRpC$+jI&SrE<s6WxM2H3yRf
z7qU^m59=wPN+m);{W;$v(v9eABCslE>qh<9c5$kdLqCWzh(sa$>z|IbF>=9>1}e*U
zJm~4q2*<&ptqce2U>TYhevJla2rVMexWRUNqKRcAGeVP~%bMX22Uy&f;>{Izy=q#C
z6q$meT(ln+MHp-0XDBsShRk@6R0T`0iK6GCAW)o^p@qgeSR3Us41m*g&Q5)$@fw!d
zWe1v&(Pj<Ou#9=cxzj*Y(oWel|2BzlSTDY?9tUweyTYmj&DTSx;0--gn+V+ts!B_m
zlePrIAecmW7#$%-WYb~L;?pzhGngZAj)GJ1cuj@`m^C~CX&7Y>4C6KEN+uifF#;Q4
zvqXOq9IxSFkA$UclgJ98)3zlNHY<vUU8pE1SDWY(>?8Ov(Rc_Zr@daD+?fV+5596s
zutG6T&rjqPh)1|K2%N!#VimZWIpQG)*9kbkjNnh~&hAB7^U*`%CK+%*mI%y@_BM<9
z_(<^-cwu~`i63dZo>~6OQ#f=9JeWfg4rKVC9$tLPaxjkNV7#_SVH}Ou2I8Xw@iF+r
zsieH2<TLA;SW6ntnR&tnsrB4(@H3YqH6fnt(diL`kjQMXG8>ExU_xdCWzrR#aZWBg
zGbpR}BKDm?e08o2LiICo#w?-OBM8ZgrhaBXfEZ++&~-G66o|ILCn7;PNaF)zd;Lrr
zmth3iQtY8<zg#@2(*D>p;Lsp=>uMAQ`5A~UVtO0&TK4m)*cbEI5QF1im^QxAAKN0C
zY(ZE8uOmRMVjprJ&e0RS6)WPMR1zNqjk2(BtYJ8QP#E!p!srHyN1vubvI%GucWCS<
zY@Re~JffF3!cx%^nkVp1pmBg?g~M@Vcmy5=7v_1UaYj=HC{+(MD(sAqM9DbCPmYvv
ztQ@{V1x&zH@hdbd28k%2pNdcM1C?m>iZXCnSh$h9B5a5iLZWsf)|ZKb6A8Gf!BbZ$
zz9iQ}ElS`RSPCM5R8WT>jOH+p0!zf^UIfhM9M4G`OV|u}WGkm?II4ijaKItYSa={7
zXzasB2ONj-ycd?}FKXs{$QmHWc{ruW!*fay95!NAYu`GfTtkjfKaJ7gNBc{T!(>d2
zjiOgaZ{lWzeE5es+Gs>yqt^CgDiy?oVli-RR4%+2o-&Ft7_oDU>2@5aX@_WEx;iR8
zl{q#JLx9o}U^?c*$IS}QGSQ$;uFp;ic&W|I4tT9iW)Sme7(vHACFaRVu?>53WhQao
zeUs6q&<yI)n_wEA*W3h6Xc-KO06e&v803K>Pjd`{T^Y=CY&1e<XO<!f^Bk<IthnKz
zBbfwwDVBvKdB}bu{4&)h%1iN=U|%VvB)I70iG+EnmMuy1pbynba}(#K=3&|2mfT3>
zmZY_1ke6mfY!-RYa$>L@)-}m8?XfpV&c;ajN^mELb<RscNojfMRxBxonQ>+FYq<_3
z8NbOc54D^a43v0&Etu!AqDfiip+*yfc_n-?F}d(OPf<zce`RZ=^Gm$H70&Zo@n2<~
zhk8y7w#UlrzvVlXWc`oqO^Sk&jQ>uMmtm9qrieV$eqyjg3BR7<*EPuV=4BL@WdF}%
zOsc|?%>R`rFViObucGo`lZo<tlid@KbxjZD!@q=gbM=nLKXT;O6u~72K%vl2R`St<
zK`uz`xv9)ENR2s}xgjwQA=pE3<~fLcwP^?f?x<u|!%;t%c(Dv~%ENV@ICdMfdd27&
zUEm)^)E^rtiykE4pZ!-VEy1+^n@_dOx{$X=L^Bz^{0-d&G|nT}3=8tKp*?Df(XH6f
zKqwt2y}3a=0zo{UiD2!>aG);+76+7D1e^@>KSuYL=>Cl6%z|eTk{(Q^l+nDWKZd~;
z8x1o?U4ZZEV9K$Qeyqp`Q66Sbti3T(6f?6x!yH!F-!LE3zgKeO0}d1nSr{5CbVx~{
zuPHk)7B~5z;#f#C`xK#GuX1pa0RQtDqPLjqP%?@|Z#m%M%2yU$^_#HPP=PXz_4WVY
zU_zY{lqc($uY;~-F)-rsY;k9e46zpfN}kQ8v&zM}e7Fi0;(3FErsZVAU6T>8<LlM#
z3g7r!;7TvH5NPrs&bRm|rAkIsDih@v02@CE_ch#s!sYZu?=X4cEqLUmbfzzp(?xVR
zEcrUttT=Z-=+=b8up!0Bc<N=F4_P3c*N4elW4Pc%fDg`C@Cz7+X7%E%0TceO8pn9r
zw>ZytLn?!<Q@;svNYCw*Y%6f|#q99m<vc9sVw}ksh(<H8H9`n~s3Q(Y6C!<C!RQ)u
z9x9@15-jZb%=$x4R-@Cn;*PEqACGRq${I(Crp~CF%w0QSgH5vF@<-pN96tCc8cpT4
z7N2t`K{zosPpOz@c_0Ie`|>oKvZq(<D^@L#!v#94`Qr!vNj-kVOc#j$;`K*=%;gwh
zT14cmF_<}@H!6QDjrWBHa+AYzDV(YB%negLHpH}oWU3(79vgU=48uq?nyGM#fU)Qd
zFI%oSi2F7$zBCfnKj?sT7QQXdfm6bG8J=P3Io$8F*TQrjl-)De!Gj_;UL*IdDcoMw
zH`?cvu~F!D&;~0$I&hFn7uK8@4o=dS9C&*)3QzXt=K32Jr7PLXpdJpPaZ}tYq?^L8
z`ywY~l#A;}nYfeXElxu{z=)0Ku}AD|Y)t(PkHAM^#dC9W<vb-3i#!==_pB3PM~7=6
zj4QI}8|#6Uu#JLUunv?BiofA8tUj@6nThiAlq~1{4a@xvE2YduLLWmbU}euO1#$fs
z9xnA|fReodd?659!-mPl?m*m4R)Dhbi=l=%AAxCNi)0-f<4F;>0f_d;UiZq@g#lw#
zWU<9$VNR6Z0>HzNofwk57{8oc+{2`Wb{ebvT{Qd*Sz_@AJ$cFiRRw=51s#^~kCbc3
zNJV2{%y4p3QjlQ^eHH^=ioe0A5A(xlL5_LFDQu|Ne6BjRzd@?yZ+M=~MoVRQImq$r
znoLM;1A1YcB`IFq9jjEisg)2*t3;D-1oYw`ql1j8p9v<Onpg4)8G{2sU|fXagG69M
zMkVv-Wffrb9ZK~i3*UJ}TH~bvpCk($C$u%qO94qMU&RAmyb`xA)8+>@Q~LSkO<pgv
zz*A`vku31g5xL_rlZcxqfQevnTV#D(aEO$=NRrh_c$$Rwlj4aCX^F%fl5jpLp2)CP
zxJV38-zaR8(OaHMGZ0cIJRtDO0|JJ<A~jSJ;<%r=TteF56VXZu?-sfp6o=WQIG2PB
z&Lt^1PU1&POhjTLl9p|Ner78gG`5#xCZvk@pk(x1Qk?WKpJfsbw%OD#(c6TweR$3R
zL0tB&<kdE&l=9+}M16d33Cl8v4>Sa>07Ec0y;An_B0o>)I#6zqkps5E%u+0htuXUE
zC^6kYu?Lp0l!DDKB}G@<=cVKk$@*X}K{P5#G)hZgZ;I57KA}O_0e2;!1-6C^_oqBI
zhj3+04aM0SM;c3UV<jfT#!B*~6|kma-R$*SuJrvLb1=m(Tfy4}_~Z3l3G-U;!hqr9
zdZ#O3FM=1QdvLHB!Zl>jG!K?qL0s|e%TWJdiU;3l=0X3+^rQtw1+ETU?KljM^#-mE
z28tj!*6T?{*ukY>j}Bakm@63=pXEtIhvEu0=;U}jBElp{<iQx@(GJRmK+il+2Ir;z
z`16v6kbt`M_ZvoEjPG736?7!JZw{hG53d)aqbP&HCD)60D2j8DZ!itT<3t5Cx<1!~
z?I(Mop{&%{+#FB3*NcK!>p%z^hrGCdAz}~+1|}kEqQ`^L80uxS9u&>RsU}r!s>#I-
z=cXDdW;25In<co7!ELZc5Tiergn=`Vn-iEwbBq;{?G)KA!5s|lkm8Cnc>4oxT7Qt2
zuT6k$A`>sG(F4NK9!wYQ$6!BZS%wnIGCa6a^A@%Oy%^sMA}~5s=VgpwzP*GEJKzrt
z)WAvH^u_?@!66`OR_M)2SP97j9+-xbpr%P2QFuc;wDVY4vpp2$We?+D2%r)?5Mw2p
z`2BCJganwbDHVz}r5Y~308Y3J2sfMDY{TW(!U>lF;qrcbQ@#Xw)4!?E2=aU5M34a!
zC0`-OavAWTm3WacCEetMV_IwBp6!fRMmGeayRrL{yYL&3b#%86MvK;9Ho)#h?A5`O
z+E&@5_#7CkO^V7zYf3!$)+RI@Rz}P@a1&2ek$-VuqGTrJVCKbF@w7>qu$8O{dNN^g
zlU_^@-xD6y^s=egC~WwFY+rVz_UH-G?hMwiM#mb9<$A8%&5w3RmFicsUOh#@aion$
z5z%<mE7oD%5!ch0uQFj#2~dDnk$q@!382E513R0y4;V11<V*8tbOv(ibi2edyck9W
zcCnFQ&*GquHj{70Lxg-?ACvK$@<fC&MucCQmn=eTIQ$yDWDc?6@Qd}5Im9I%Y?E0B
zvgDpvl-H3UCU@iNcd=_Qo;He$5@h&19%E;5f7n~Bx0phUGd!t==diojYoEFDmW5pV
z^kG=U^H8?0k(2IcZih+~V{_@7^*cH0d2vQCoP9i$NWjr$pcyZU{p^Mz3~|g6gBw=3
z&=^6sTK|A29qS_wuDq;?dT_5~1JJ|rYy`7KPsV_ZN0p(#O&Ddx2RJAg9!4OH;e5JQ
zlo%8+AD~+YG5RI6<G6y0S=f%T!v_Ys{h<CJMy|xLBJW|<A4I<N0+}1&puqrLDUQFk
zF2$iszUL4#4+6O~Z}cetq3PuP7=-AGN0F=uGl&G*(&N~CHJTJ^;&lobCCV3TaL<ee
z#`v@v??<sn^p5C}0B)HT<uQ+>2!x9=S#gml%7wfHQ6!{M1L$$20DbHx$I2jIut1A2
zg`mHQIJz9IG&ayQ0ON36CWir{I6W@glgeyNIyOFf=@C))C|(%~j5V%8n_?N<oaIT8
zhxfQM;KQ^Xy|vVnjkDS@_``$RF^I(l0EF;R1drnRI5)P0=EF)2GbWam%%v9IK^e>-
ze5e^)g1@jQD=8bfXjB`BEo;kW879|2>>$Z9%&8_V_BEVPuu$dr$%pK?ss=x^p+sb{
z^dE4G+vMt9x%#%qA#UW50(3wwU!Y<v0`Ig_P0_ET>o;*jkCTv14l7vCch2fJ{U$BC
zP%)kqJMCdlJd|#jDvyzkmUzyJwt;}<6rgGdwiS)if#F162NN7zsf`5(4>S!+<b#r%
zhM}ME-fJK_A22#!+HsK>eGn}-h|Mnc?%<Ix^W(LKSe=<PW4Hyvw+A_a;s%@z@C~cj
zxGcC~Pn<*Cg=M2;S4X$Tyo^2(t3^ZC8W*1?%+X9U8lDB_XfK*7Hd<C1Fh6?P8i<c}
z0(PQ{;w?nx5s0m0s&(*<<S~lvjFB6a<h19<U)ut~FSWrFn1c-P9*d8~<EtpSIKcyC
z25|BLzoW0Nq*Qbo5PCKsEYU0pVc-Y@u_O57fD_$9XNzu;%IudsvxSyO%pnQOw2vJO
z9T0b^%-~8baX+D<5Pp*wapb+khQe|TiKZG2kwEN#3C51t&x4lbb5liVjspo8JK~1i
zp^Vi{@p`e|g`s=W&R7i6=3~U>V+^PjP@C;ZvBhKFmi_=$xn4wdhv&g<paAzeMvsIH
zV?-u4gq6l!G|>7+s8-*IcnknsCDZtD1t@@T2*p1d@0ko3vI*mWz@}P(BNK3Bu_p`a
z7U!BYIBz0CoAt!3!W4+X*o;*(Hs-dwW46QegkFYq2Bsud7f_z%!~R&AJVRA@P(~+6
z1x<v#nHb8EeF#ZRZHAh0V~kYl5}7%<)OKL9KyMs4;V;k=>(}1U1jkRXU7)Eh&_u^>
zsw06zqmasUtftW?bFdT>4@CtWrwhK%7w}uy4)>Ym-U-ft?2?tW;0Q%7o7Aw;gzy*$
z;Y5y}gflKLMhP!Q10=wULt^CJQmCxYW3A94)`~fV=a;ZQ{@4tCJo)Ty#ys?JoY>Uj
z`brFkJ4?`crKfRpW`_eCqbdJnG>^5<HJuV;Hmn<~l`T>TBM;KHm-(L2V{qOXLZ@R;
z=Ex}c2RTCE)a+LJ1lN6-tD~17?8PM^+#10kA<7prPdPkBPnN|lAC%%;4F6;Zwd2b{
z_^UA~#zqGVO4uRR+|dpWv1ZrYh^12ULNJy#v1T_R+X5W~hj=t8Z|2~Ft(PODX$<M|
zHMp*oO;5!md-}h;RXRp019PG$`>^gs;8#{IbWM&an__KTBtX8r_Jx<Xv5iZV1!rbA
zso`YUP=m!4s6XBdDx$Grc&wc9@@_A@R)h1yZh=@2>lqyWW38wb)WiE0xLZa)Ynubw
zLM+s@3S`9+#zrw#(FA4kk;w)YKmq)+SSW0n^?`<Z8ytcgXY@t-ST~X$@}9H3^(G^c
zDC46iC##bfq#C9sUW{e|ZY<xwZ7?%02g)IYL)aolDR>CZYkG07l5|@OMX<BjkG4S!
zM|^E^Zm&T@bF%cNv&-X7Ge?0<rqj!^reR#flPx<}HVylQxliUUV7LTrDD3YMrxhc?
z^Ol$)2LZZrAckkm=r>ECLE;N}r6G(Y7AWl4MReIEv>snVPslNdWd&K#3dYGTgFaX~
z{U845++ZF&)#Inuv069h|9>jgH+hNzv0iN!L;L<;I+l19%l`jzEK%+M!lim~J<5I!
z66;3`^^>L_UEwibl}p_sNiA(UY@6=19O5`?Vr1p|sy(-^;?RuXY6~Ah8DQz<IBM{6
z?Zl2@mt)}D(WDs8gH@A^zgW`P;}k4!IAY-fq>Q~0tU|0tvJ8QLadzS|2%85FZW*$}
z@S|ZQ#(jGBNIGT1AdbbjZh?qFd7QrDHElJ^4fHjYfYvww<r1<HOQk?x$(Wll=oPQw
zRv~t7Aa+4922Z;@iJeQsU4ZRYaT<3o!Z$X+H9p6>AcmRTju^o(Jw}<-&!sF1!xIT?
z2DWhN02G3TCA2-v)1MUcmIS#L?2lu%AOx(n`r}igJMloEZ<}=6IhZTk7rR87wZC0G
z2XO@uX2iiA*21O;%Q1k%wIf?lnoY)5jM+3@od8%?KF65IF&;J?{zL0x@T9F`!-b%G
z4VN9qa2jbix|nHuJL+*>#<<1DIGl8$BM;B05@Y2s29tr*n4fZ*Agd!gjBlfx;K;5$
zvT(fE_%cLqiTB{y2M2YweQXq-tER~}NW?~wjpJjS+Hu#yW!Jfo#knLN)v$TT;wcUv
z>_nwq$5QXJIS=6mA{sb0HUo9VWPWyTZmB2DAMfTiwG1t2XAVZ(urP%6D?~5`bJ&p>
zh7(*=3|4Abott1IV0f5^XtsvccEqCl*b$3Cqjwo}i<U`s3rTSh&Z^_6lbbNU73ep8
zW*b-iJXK<oH<;DSdN?fJz(-}+U&MQ`iI>(9rwei+nP8x?<%kJx<i=r38pLx!jO(~o
zDE&hYK^jZk6)vA-+Z8Te#A8Wu-Vfv+7Rv~%01zVw!lHJBEf$aP*qDpStMOc$hYU6m
zItY^zNuA;mo)zP{qGS*_gQp!=%VIKKOUvO_AaoLMj*o=;)PJNfFdATOj@yIy$L$4f
zAcF0W*Og)G8~@F{L9BwUBm?}%6kLAB$8b<Hw+k_hwh0>bHc$j7o@kHt4Dt{aZZ!vg
zfU!A7YCYFJ@f}uXhoIdSv6*-)59u&q#CZaP4AwC98cx-CwuiBU>*8m)(&1gcXQaG&
zEN`9!xs{8rE0)omXHT)eAlVjtFo=Vk*iIe;B8s{0M6-DDKo6P4<UXLybxR`q*D3ls
z57J{FLZ@7wV8lK&dVNUe!ujG(^V!Jr+Qw`PY6xmXqk}eztC_}bQpNo?iVlD*8aWX)
z_Oqanps=$Y5(2mg*Ek??gAiY2E;k9?ooM3#O5@u~TnRLhh@eX(;zW(3LXY6!QpQkR
zAB-PFOYmHsV=5lypye7Bvr}x9Mm%>>g;-9<kK$~bmir0^sfcZ$FvJ=(Q{Y(+x1o5J
z!{nT|_$-G<To_E*`5N=vrmx0)z{HYFlHiV^oFz<_@sH1|u)~?`ij-jQCLNWYj?C(J
zifVlVjeV$SA1O57pV$M5tx)6u^o=}?^5v;I4wKM@&1fIQtciz6&=nVOsPRY%`&l2^
z)HjX{G;yuiR4*j~#fjnxG@WR=@qkh7I3+~;7UPBq=Cs%-@Nh#L8zVk*;cSwMT_!gH
zID6=e2QLUqp~E29I7~8W943cxeTy-tW27pA8hBWf0)YmM1sH?BGC6P&f$=BBo8qLW
zB$Sy!Wo9H0jv4|@a<0Hi%qE(h;IW4^&EpIR9TJfX8M!cl785OIqp>O&ONz}81z?Im
z<KS5vqd0rvX`78g8*|)s?<(d{(nalA?W9vp^B9T477i4-t>pm{7UQ^(#cpVhad0R_
z7WYJ871Lbt)zB=y8bLhULx*hW&e7D!<1s%};1rS@#L+J9i9km_5O6x<(g=S11wZ?O
zpL@ZNyx@mj@KY}M>6Q!!j}kGi)u4j-tZ#&PaVnN(SS+O>A~qbPVYQQo=j<s?UaFIa
zLt~sNdz?J4lZVt?-|(^@KK$~5{v+rDd|)kzuOQ<mADS7At2h$>7yEe_pIGtWh7$dg
z>rQ?bkqH&KA#>HptV%5x-#1}GtT01dc|I?>CGL|TMy_)3^Da}K+(7a^H)Z6AqF#IN
z@~%GhiaY%8XX1A=)$`|kviV>A51s$#o4+YMw<YIOe#^6ie-~fzY*q$;LEtBSyei;#
zP%HH{{w+sf76jhQP-;t-QuT=InX2&B>q^}S9_6mhF?leb1^D+ABL9PbRR~{!NXqbg
z%=vjb{@rJJN;QmQ9Jv=hcEw|v>XyeEK<^gX^4Pq`^3>YL@UvCwC5d_CvG>9KT<Bq;
zYANN@g<d<A;Svd#Ev4k|g!Yq|GeFbT;H4~Oq{NI~dh613H4icA>cketuUNW%X{LHp
z=m$dox%6Aa{379$$C+pG<Lj5^s*1<EKc1<EJl^nFuBv@}9^&hSdmUmj)r~@@3B6C~
zqe9m|{svNgF7$}R=w+187U~yTD71JP^DGm3{4$o?U*d-@yL4HmnzC#r=u^w6?TZrL
zEc88*`9i`+g=Q{qzdTcQS<X_rE@z&7g`S0&Ty??ni^08C=uHyeuzWpia+k=TGL)&B
z5tFGN6z<~^|B}#6pq=!4%W-v0{bTue%X5|giSLkG_=)N#GS%5nQ0EJupv=f8*n;Dp
zn1uL7p)F55jPSGIW~xW0GMqJybc4ifdx9mtE41|q>U>1vGoPe<q0q7?ng0n-GS%r4
zzUWEX_DTu==}D%VCgE8^AD2`wi~O5H-;<axCH$SpI4hW2JE2`y+zK7~tY9gFg<dA{
zH%Rz%(K#wHvm|Eu3hMTh&}W2h5c;anZ9?A>`d6WUmsH<M4$exZ%@7(``S26DsyUDC
z5?)D5_C|a_owV}2l>v1PC|VyeowVr}%_~{!M})p0bi2@hN^buanz4$t2(Dr&zgxvR
zp1O)&F=W-qRhjCZRgZ(dCfr>T|Iw<Wi19X1Cg&-p?f4YaMkIWK(Ed-6dz!>w4w|mU
zJT(cLPkU+}{OWGdOtnC`D@5`cp&OrKZ+czgKYZ%5r!v(~2;-|`R$mPN$r4%$idwI3
zkC@XW<~*U72^}N!7NPeFT?AU7o?iX(>H_r!Xr}t>YS!qZJnHk0)!!`-sKcv&SshT`
zHKh4MON5>%^eoU!HEa#*c%{$@Yv_SZYgoq?p%1O0O;#b?QN6fk$C{4nGf-Rre3~-;
zrzszLnszwxX_kJ@)3n<kBpgM2rh4FMw&s%(|BBF0gdP!^x0dpKg^mz9aV_o8xR$v+
zww5`plkhvj-6t_eM8?04+_H6)@4s%yx=b}jXk6%mb<Fuuq3c9)%esf3NLL@NV}JZ+
z9rZsVH07Cw$F4~!c!s^T3}KGTcQ=yqw+Euyr|xgm{5CU-=3C@}gikH9C<7Pslv)PV
z8}mw@ih{SH@twvTe1lycQu@^AK!re^1pNXORN1PFpsXhHvQ<b>XP}5`r^*Da>O@{U
zRUznDM<So97E~qa{HnX4Qw0U^Ga)Q*sGvOPLv(@Ul8+xGAsQm6y*gP?ok$j_Qv^*A
z)B!(5Psyo*id2oDt0i40b(Wxeg;%W35p<uRF6vxCa|M;)Hz=9Q*OD%*E)w*apokhF
zXpf*Wb%~&zg38rMK_5tME7TQ&<_WJ7KaIjXACwX*@$(~WhgE{Q;&)2PdlM)JzpXh@
z(0dle1pVEjd!%i@7Suz{5L8vfbUpARNNo2Ww;J@QpoKAmmJ8}_c~488KiOQK73ADW
zf9awAB9hq_y`*%BPZi#I!ksh0+bHN<i(V1QW%w?9rrWF@L7i^Cv*At!^qTn6gLkgF
zlf2KQgx7#Js#6tSutIJBW>E)0-v}CjFY6*NWjZAXsxo+|Pj#Hm5>8XyHB0C}oh8($
z--~4bZbPT%039!A(sZITRBu7E1)Zr*6qMeMyg{n3pg#+5kUCk=Gt*xK?`+jy&_4wY
zRs*EGU#92YrSQwhrwOmmU4!q+0XkjK&4SKVX9#K$biO)E&|?;zEoiMpg9YsoG*q1@
z=qHPY3i92}5-v~|3hFKBLN!cu8GbkGexVv6yfJs*cy|uaC3-RJ62E)l-Q<lDo4o);
z-sOUJSag-3eS$7hR}1<P=yi3mnk2|`57S+uZkG}&?qLa+qMaW>38&w~(l1ku!aGlR
zm#JBTE(aQ<uTo0|-5|WH)Jn-S1~gP(t)3U&T;W}<UJ|rc&=~cql<={XFjl>euXj`G
zTcF<fsT?49LD~#@!8nTw1dUg3O9^FyCaY?vUi(yELAR=ISj}P#v8cPl-th-PQ`GMS
zO`g#>BS%e9XFDum!Hg9%J_R~Y&?`VUI8)U5f?9!Y)>G6_hnDzp1}!l~T_C)`Oj>D*
zx=>Ix&}=;wzca(qhYD}18X@VfpUHH0s7pk0s_^bmmkDpW@S^HULGvw|CX#;^$*778
zS}UkYtrE%CMRK}&PIw=Hw?$1?ZwUHKB=1+B3i=Xgke;LV336r`^e>0De(cs8@9wSU
zsIP=q1l~}+(4rm|9TeVKKwH#8^}SfI7AQwOtPTtBN{fCH&2F5<+AdaUDYSgUEVkcb
zRge;eU1rRBcotF56k7g8pac4Gb-tkYfDY<q>T*F}h~zT$2SJ{DneIt-t)LEqR;ufz
zgo=Av!c%IZpyLFsRyPXjD`>5nB<PHL+3suA&63M7i>3%~w3VEiLc5Fw8n4%?J4ABQ
zy?B=Zs3C<t?#_GX0k2i@lzP<Rc_8K)#|t7p^)67Q^NgAy=%Db{tNR6IH<S0gnl0!!
zpd9t0nlI=)K^xSAg02wsl6qLs1VJyWN2I*z%?q1z)K;}tcsqdxId7;J1nn2}rg~ZQ
z{HZyuMX9&cMoD*KOIk|~&?b>Q4XD<6OT8+*$y3RDTWt|^1$cGNJL(;g91k?w*`eMQ
z-W`(5PW7Si?gAR;>{K5KdPvYN^>;z5fa;vTs!s&H1T@;&t^O(KEkPfu&jsy~bbnI^
z1pN$D>+Dfq3(C2VC48d36BGifbM~r3f_earc0N@<3OWs_7U-Cuiv|4?-=)h|xk1oA
z`3XIrYL;~Sl}C6F3-1e+E$9V7U#UDnI|O~B+6(%ppl?+NK|cbGa}KMHg3|A2>4#NN
zP<uf?s4jx41pQlu1Puln?Hp01g02P{2UH>GCZIa!C)HI@gYbS<{2l_Ix(}$<`9=Lc
zm0q{>{ul1gQU6iB1br$fU0*Dc2Z8oD>H2a(zW|+(ny&wlO5e?!{lfj&$?MU=3j^f<
zjS<uv=(N-fJwebJ!pqQnSp@S7(0JWWPZ8b~!fU5*2hXRj1G+ZVukRLAFDOsnE0PZY
zos`;M&la>y(zVxf1U(CMPHHEOS94LL?Ld2+PI{@-=o69bq?ZZrUqGioa+RQCmiLsD
z*KQ6=@1i%Rat<g5%26S`MI?Iz9dt_d8<OV`;g#y`sZrEu_?#Q&<fu};Q|ebW?S?tM
zRYbopk}blk08%ABwM0-a?Mb7aD}e^2^wC*@HVLnf?wCf&oj^0yDY`;<t-?D+R|`4{
zG%V#b-9u3ET;_6`{=J}6fkvj(=mBZ8^=P2psz%oc?>6BL0$Qw;S_-7pAbpnb)&gN|
zqt6kvQP4U1d_lVf4b~$BwE|5}IagmQ=&<n4(<4P|?*qjT<f!3#Y#J?i>I1bvm+M;v
z-6*I|PZ888=vsZ7pa%qv(^CaKBWS#yCg^QJH|X01{X@`=`i`_Htn}3bYF>`IN!Lq_
z^5>~}m>cz6(WMF~2WY<N*$2q4@6Znm?|k7!^%6-pPSQp7I+2`Wc`pc>B`BshOS*@E
zW~#W}CcMvXX9;orrl2j;i0;(81Z{%khLrpDmx6Xny8HE4lFLiCQSyHMweY@`5*Fyx
zbhf*iujXNH)Me@HoB8uA=KJ*`eL_0@<#?dhl!tU*yfuWqjPMrgQv{6>^oSlHXu6;!
z`Yb^UEaI02`qXNm)|AKeU_q~1G(^x}Ejm}w7Z#l-NIhuMoiE5IXt^Gi&X%qM%27|~
z5$TJSQl~sP{6PhDarz@b<1MO{`o$ic`5+}P5%j2_m3pGo?@2+c^{we%<hc<j>a5k%
zg!j7e*6BNh_p$Jv(M^KB67-zDOG^JYbWv)(zDH1C0d-lgXNWFk7R?m&dy8fntu0z8
zymKwWt8{3UtAMs3mxo32<^`sNKMU`6Ao7;LE=o;bF!RCQ>IJ=0w4M!=qh7Y?Awe7U
zYH8ai1#Qx6CC`^7&rSMSLAxz_PSBSYtrzr@Mb8ULUr1dx=@$g~7nUp}+90TxMH{8O
z!3)PO+ydU_^m^3jPVk7{7CjdMHK%UUyCmIeo9+Xt->X*gLqYFa$&UqnDd-jb4?#a!
z)G8=<5%YXSe=d1;0aEG}{Vze?E&5teKa0K*RAUidJBB@n0rf_@E*`c+9negy-@ABN
zhY3JifJ%iI2ilhUroK$jeHLBmVb2+JcgeyWwOwB;yd}bWOD`1O8bNRC#{~UF&<?#?
zO79r0nBQCN)awPkwutCMqL5Fu0*y@l7>GXq{UYZf>^JlWqFL}E=b;>+JyPE9fxd7K
z>sCP*0nJT2toI4J4(L$oVf}@aUjNV{q&uv?72b;vu~!||KM2|Z^k~|@^^c;<KSZ-1
z^)JHvMkIf+=orvaeEksKy@Lgd9;VjX$@0>IzX!sXDOq%uAdgcZl7AFQuTv?KlZBUM
zQL~_2r?>DH18q%f=bR|$1>yOezJgu{dLu2*IYrQ?!fWrGFX(HaS!o@d3%zWW)Wy`L
zgEP#_F(gY+k#iYz@u?z<MtW)8lNQ(DqoXt4%Te(Xpd6ryqV=^v<8>$JR^d$ss!i+U
zOp_As1*%I6It`M`Vj!iuIJ1Pe1}F!pMbPV#u8T8A&|X0yXMvz^M6%R*)XR2HdxYsq
zou$HS2UM5V%~>NTD7@pG7p1m6fM%-WoR@`n8c=Q8an7rPY9-z8oYw@6mUKOx9a8sO
z9-&=&I=j4Cu*954l!`jPcfR$epf#5P^;W%|LtY2yd7$ySuSFXzIwHKW*jbQwRM4B2
zr!tssmqn?9KC#FvXun0-g1)!NC+Mg}`GP!;ni2{H`78<w>SR%gpom2gLBF%8Qcxd@
zx(Pbnq8@^VSkz0<#TNAuRA*5?LE|hMAn0a`Y6K;$G$<og<0r2zZ%9T8ta~3&j_T_S
z74*2Elbj0$y&$NcGfdDsg8Dln1br%KfKw~z-+~4@mkP@IGxMx*Mhfa8=q%@QLA?bH
za_TZ1c=BLDXFFF3&**Zt^9Mo0gm;c}wIHL*VCNb^V}&=w87s)>a;|fopxcFao-;lp
z1trWDbiQ-FSmFtw@%kcXlCg_LlQW>cdI?CWi=3&V*>*{Hkuy#5{7}#^Co1S?L6<vs
z3o<sl!kGbtr$b9vLY*^9N{Co=pGckxl%wjLxuV%nLDxEq1^rRbb<Pq&w+I^NJSpk!
zTC#9SjvDW*65c-H-RL|cJkMjy^CoA5ppJrWab6N+T5O85F-dZ&^GcHB?at;T$*8kc
zP<P3t!P%CSuE}{LDcy8udqx_pJ3u7wao*1GtC!V%cuQ%sS`Zvjzg;~9x>M-KLcbB3
zrWs!V8d4qgqo9>~DQF+P+>JTijnQhT$PCvjgIZmxS3_pBUXSoty}_lEgnJuu&{%yg
z05#!RdZQb@U*zZO&4_tKB$o&^;pCXdQM$$x-EE-HNO+UbEkfUvvUck2(Bvb%19Ts#
zR^Leck0RqZ?;$4F`3PSz(%GR75r<m!c0L6?#bI5}aXtsV%sBvhmBSn+ItM{x&SB8|
zoF73S7P`Wrebza@Am%lZT!-iXezgaepF%1ng_6D$rYcIwE@mly(6W>Q(34WS{Duxn
zi6F+%i&Lr)u1h%{bYe;$(Az*q)HkIpMH@AP`qiS8frw{5A)DKiDXjI6`b@+>ld=-w
zS5gKe{1!9`srOQbLUON^OB%x2!*Fm9qudaF?vDE8q|zFlQ>o{1sXI{09_Lcj=$zEi
z#i=5hswRr$EvcU)&t}Mk)FPozfTpYGQ->EPJnhZYanSig(2)8v^_O5z^+W1Je0fMp
zS_I#&A4uy`+*6gNO+(J7rNuxmOuG}3m!{1C9i7$!Ix%f7G-*g%0Qz9sV#KUNT0_yH
zp-D(>N@J_-NP7%2yVI6|wjwvJeo3RZ7;Qc2tWjP%Thr9HB7G%d$nB|)OMe=5JTZMi
zFl4zk2y1n2`g4%^gV4$8%=0eLkXn%bBIx7k8xiwjI$L>1`VNFYNv9@<B<+#(zqxie
zntl+imf|7J5Sk;jqtG;cFqkOUwC0JPPm$YT&jHwEnCCgr(ViC28->O|L#hSw&|mDc
z%Ci6mGJiolYeXH4_nKNK$9y1ZX#v05>xrOs_Iv12--8yY|9HMFj;J*6qsYPM{Q;%)
z@v?n~fogS~_h-bA8&YvEe|-Hukuma5NvaP)3)GL^w9XgQAM<8*hI~dl(3}kB(>bFP
z!r_b((C!)CKzn8MMLzw&)v6}r41~|iI0tlC#zo*>p24yVy(VKMVs6T~vU94s12iP#
zk5-KtY^hm@frm(VdBz{XeM)4Wl`vBod3a04bqFudVDH$G!5Y1+CLm@vB(?e&C1QjT
zYSMn5aWlAwME~W;Kcs%ixD7EWnanegNe$a#v?|W5?;H{PM<nNnXscCqCN02rF{7(i
zCuCCdlaYfNOSL*9^TlGVMr2NaCUu!V7oVWUWj3M|qyNk5Zp1UJ6?Hp7-IUo3?iA5s
zdM3vrGbYc;oP+pBG9Lu(mGLlWIAaND_l)JBt1?%CK9ji?`E1R63E|zDn?d(xzK)nL
zGT%m6Wiia$w93w6Kk{e2hnUV;yFn{K{i=7?-$6%$_EZg7pMl<$^)Cs3W5djut!8o_
zk$DJd=Vtu`%5pJAi4MCnk0Jc1l(<gve+iU%rgll>xh*RL;XPR^gU74Sv+}znMwsui
zf?d$FvV&cEsSernuI|~(ibLx7>`<4Gx*)rI7xdq3+WAJIw`czV3(pkFQN?(BL@m$m
z+a;o&%Ra3ON4&oyALHk*XTONtc4aRB-IL9>rZtS6VXN%(P|CO27lHm8RI6jzwFuLH
z*w&*E_NB1JJLS;ByXO3W5>L#z%GLke9MyS5eXY<xg8J2zobk}%{+yLTw*D>1!T8Km
z8EMe!VdRsnLr6W5!_wCX{XA<b!s~OQ(BzBkdyvoTIkd)(oMy!THD?a!CppyZiyYSL
zFiHujqd6R1^K+?TIp_)Mgxmw5H9{{FI!5TNLZ=IzFLbTYS90mA9}7)y$F#XZON90o
zdXCT$LPra|QD}qE8A4|Z{j<<DpdlH}Xiw_-YP$!aziF2p!u`9@5t$r;&D{M}JGS+|
z+r5ZUojoX|a(#=DieBMY6}}~~$*H~!#9ZY22zg%aTP`iWw#x}>yl*KqzXMdOIlc|B
z;Tlkk4~Pk=cZL2_=pmsg{!QTK_?Lhd`Ke*KpVm9sPkWy3Xa48--|7-o*ZMy|Zj=0b
zKo|J`!JPg3K;QJUEq?HSiEv7QtB9fcAactLFg_4qxdjMo)jh!0IYa2B0k+-sfy3w#
zw+9wrR=pQAq!tQYA#}Z@dMoe~a{imp&k>KgFTmO1sKhvV<Qf^Tg#CH+u8w)EQOCSv
zLYF`$<i=~&GY{Vzq)q}&^ug2fa!N+j4;4B>=w+Z<U6~gU+NI=z`fKu*y6exI^Qs{~
zMQFXyCZYETZ3e|CA(VYBsut$`u7rJ|7vjH8>08oMJ(hP0!cXR%jqr1jOlb02-a(88
zJB5BE^i!b+gnlpdC(t(e^PtIgMOvUqz4@f=^XUU-++$myU*tauO?u~FgmO>GKM0!)
zfuvSfAYQBMg-*}E3^9*n{sA<caUJNK{2M`+<lhGRRDJ{KtL>(jMAcs;pB?$M_80l|
zoX@kGOG4_q{5g>MSxWb|m)37jAD*87AmYp0(+AFJzu2wsRqY>xw$}=s1gcdWskEKJ
z?-Th&h)>jaMf)cp|14-oy&&|J_Vl#3rL2$IKjlj9ZNCnZUxND8k@oZ%r{E*d0BA@>
z3Rsul6~u}YR$89Hat9zjq=pnc4{GXlalvMUM;B}Zy}n>0(%w|?7Q*3-oh7~0)B>iO
zQSdk9HebR^g{}n+sSO36Kyph#E9ka@FF^l>_!HDVp+5*s?Z6xggcb`83$5rtTXh%O
zOX#T*Z*m^whP7fmb&eIMs|z}OU6L;Qopc#b5_Y>3@gwT%gkB>uf9mif*1DV@)0GJ)
z$24_#5xM=p$D6eOEooA<bod^cB<N8I|C(wwuLFDZ!$O}Fni5D4Y4uzO?jv66kcIG@
z68~4wboFHiAHK-(;)3>|hdYpZ3R#Q1!YqVKC45{VC3j=}KsvHB^Wi?|*ZFjWeBZ(@
zpaX@TSIC?%D?EU-#}!r~Jf`sY5c_ODp#z1U34LDba2S1uxly0Nki4<*aF=w|P&gFf
zS%t$wAvM3S7Lt2CqY(3Dhd+YS6Mh|LJGRA`@O4R&ZQ+C@W0n-QNt$qiJ0U4;TiAHZ
zn!=l)&+~;-Kwm=+TD@DiGB~J&ClYgUgc(Ep1cSWZqLz@OCcC@^K=UkWSM+EoMXj(X
zuV{5BO>MO4Iuvby2HPwuDcTCO!%9{aZ3k)<bicP-(XJ4VW3fb2>VDO)Xg5%{MW+?*
z0g6~OwCK~2SM{^#ilWa$8ETkCe=7Pql%@7s6fOE5XlU5vd4JK5KnqKWTGTR>kge7U
zYASrW=opasZ)@6?qLi?Ua^5KNhI7;gk(}%OYf(1PHj7$|+K1bz9Tt5Do=@$u=vYxO
z98h~L@^%b{^Hi&#xRjT#4hUlD;c&h>;-ac>fhvqpo2`nv6sfpDUh2|OEfd6azXw|H
zqCVlE+UBBgxQp85qN*@f`+`iK5jCz%N{~FuRI?zHXPH{;qCVjYwc14k!qsY{Nhg|h
zRXYrlT)L?PuH>2FZt7@~WOtQa-d5gmYKS0~H#mHp8e@2p=kL_6B*`8swSwuQ%GYst
zxQEIX#B?LWzgIy)rbfrB(N;3j@v3kywb<}PvlG;6H{ICq32I|fx)as($~MjVsLCoL
zmM}KlNA(e8O6aSW7$kX~q-v@Yl4pibQo{rp$&=L%gG92Q+V4tUAMU4)BuVyHJ-W7)
zeu^3-h^5~YK1J0Tp4er8T9+g_P^oT-(x-+8szO1g^wZTcgQWBtwcC{(8?I4@l6YsR
z+1;gdDd7y&d|V>Wc=$}UOpwWQklJpL<axF_=t^E6K3n1XBmOgz=cs&xL~^j|CWtkP
zhX<>gB*}Btm?X*b)C^a0M)*9nEJ^ZwwK++0sM?bxIaD1;lDt4=_YhsA^b1u)5KEsC
zzEJftJgMzPYG{(=Ff}Gga+sQ&BspBoPLdp<R=AR9hDWFkNs<?<JxP+a3X53RF0~5F
zIwH~R5>+XPnjH&WqI$TfC47k*nv`y&T9%Y<lse){o*5pcN`Bu~!sRM%kd$zRnjvVj
zKE31o@D*yeMI(T&R6CAmy3P7Zpg*YTy$qTNbhWDNO%zqrIzAk}M%A8R(9DkB@L07$
zP=jbaR&5s4q#o}0ICzIFdJ^bb6*-aVn$$X=>(nrdHUo`Qaf?3axGFqetrHYgfA6?1
z{3q4wq8G#0tGYfWmmeTGK{Z=+3}~X-Xi;jXRpA@deuKQ(oi>JVRM~wcowrC(4~xQr
zhFNr+pvi)^s=l34kS=b~fKFS&lhh1BrnZyRY?BT*npc6h!J-Q~y&k?vwOaH+$JfI*
zt8Bgogt}kcX-D`L)ytw$ojwRpRwFIC8tJB}xFA#dZK~NKmOfR@Gm>KKscNyHxoTpk
zPrzH@qJ81p)q0C=>GVxFsy4gm-{A(e!=gJo>Cz^($3>pfJJo)RW`TE?I^rTv>D|hE
zGV3rGZQHJNhRV0-NuZgk#G-XTvs5>WHUr(O`dIWq$AZ#kHNc`DfLhd0i;e-^r)n)q
z?Nm^DzZzrFyiUQ=*=mACj|iG<(NaOvEn3wn1j%L>RhG_CODuY(({Vs6EE<9m=BjlT
zUC`;I(g)NAi$3UhQt3Rk*`kX(wGYo%+btT^X<+GtYPXBdE?uZvExH=HJfsd-#8!D&
z9dXgV@FOa<pRpiYWr^~+=-=U`DrgZ~Wx1+!k*D+t)ypEb$_iEEB2Vc`HO!)yP@|{R
zNQ-tta<v+5(H@{RYMe!%0X?lIS@bo~S~XRW@#}ReE~rWE>~vA-IyKv(JwVT>B^G@K
z^sHKE(bquFsm+3n@2*!nETZo|uXY<r@!jXuUO{u!_nkfsJ+BVBsJ8S473@zdnGyO$
zRVj!oq$^4{s9s6Dm(+kH-pgu;Am%x?bdwt9qMJ)!QIjn?(kWj0DznFbTho5-bWiDK
z1Ju@>^q@Dq#YG*0Ev0QJ5_}*D^$czaZ*?Wl3_euqqO?nb$3ia3xhD8%8!zXU;F(G3
z?hGz1ea+2fVQ@toN?Q|LTe{8Vy^IpxaM7;dh9vY!a8nXG6nrfSWfVVD`lg#M{43PE
z`0XU#*~RZAp;5&jmTq^`{i*olB*YcxTQ2X8;u%Tkp5oThw}n>%dp=tHuOzev=$%Bm
zv{#G0;T;K-^UvZRO54y;=($tPlNQ^TL0xvL#THSQoob^+tkJt_n?<zCyK09;)a6~Z
z+ag-&UA5ODTIpSNz#_Kvd+LxyZ0YxKeTvHM%V10IQeKPL(!111i)h_lYPUsf>0N5C
zMQrI^3NJ}WF0}Rg%4-pA{l2QSh+gnl)x#os!C%z?i`ecTsEroU@*k*e7SZw_s9l1#
zD)zD6YLDS*`rvMLz#`guw;D4*sS?zPt+HFiEn=&Ds1^gEwwhk|H#H7RNh0=+J!*y^
z_P?J?|E|<&<PoJsK2b{q?aN?`?Nuu*Vr%ZD82;Ow*1q#SrT;L%_OVYBD3vqpr)s^)
zQ-wQURQgYKKoHKLI)7Z+s-~V!;i$Tx^Rdup%3EX5xXzE3ex@c^G^O*I;m=gz8RW&)
z%+BwX?o;ywMb&Dc&($G8Eoy7$?8ts~L=eZ9pG&_`sb?}BQCj3n<rB17QR@RLU(i-B
zM~1J|FoR@W@Rgcw5iS3<nkT45z1ul2^0itlh<SF598~KBnLNK&n@u{&^N>nCOG@{C
z()q*ELn>R489xuHT8mi1VKqiji#muB4y$2<5?Yr>{;kHj=y#DHRa}rM@2J`=$kgE%
zH3>^|+Vdya^B1*3kSXsMb;Kf;_aB89tMDJ|aB}27D&nF+5v>OaG9{$wWr9ozsd~Sl
zsLJYcER?Ei2b=Q3U51BK^%y~>ymY<JB9`aT8w53ZI|MI`c=TqABEdAE9TuI`r8eT#
zyDhq?%T++F20_nbp$yH^II@rHGCq=_54gNZkxYG5&^}FGmM$DZN!D*tBwJSsGQ1pJ
z>+)`k<mw4YJfB{jg#3EFD|svw&>LOU7zyYdNs@Uw|J+1*Ga~uAn?dTfE(;<Bx}QaN
zLbDEfh(-5xc{Ea}H@fMLg*v+RTia!Aq@&*E@}7@$(t8E%)8rNF)bm&#(Sk^4JxCC1
zdo0vN4^85A(PNT$C3-><uS8Eu;)V3oBwk3*PU402LP0Hso4V`{g>|>{+e#1XL4r)_
zrFy7~CPhkhU6N!(PfFsI>39;aT+d5F6*_xp!k))Mm9Aa3b$K(=hCTtRc6mQ^c|X!k
z=S#YMnv%!qLW?NbLkBIQ<nMJ!QVG4>TyjhP9_ghk4Nn!6v_^XCse<OJs*;0|K6-^k
zeM=5U`szJNxtye14f0-C@=)nX`hcK)nt7h2k0eQ+tnum?{-e!~Mo!j!1ntYXqU6KU
z{(68#<4e-Z`s>LC=`p$4K=l^IN;Z_9qGww)ThKzA?%9$@!CPVx=gm{}3X9$p$#phe
zdb?wxQ}jm5+b8LESi~9c6usLb&UmNjR-0~muD|S5eZcY#mUJi^s1FHZje<bg7fSuS
z$4V;8YIMG!7Uc^a2h>Z@Ruv4LRCbn5y@--gRT?_IY>*x;s6`zgI;ZSxz0so6fX>mW
z!zkIJMuaXX8>|NjimGcuwPizev*r0hSCpNrmk4T-($Ci`1eta?UvDrx=_^C^W*3bu
z8>)9%NqWx(I(s<F+o$P07wH;{=sm+-f0-1TP<FA4?g$+VU7A2SO`+S$T$DEVS7_0%
z&=a9(n`F+*p&4x`?fuY-(zaZ_MG2SbsiI4hH#dA?<T4$%C>%}$nr+bu;Vt2jdZE>t
zC5+UE49Z{$BlS_sV+kYiz~0oBC5+NOgECl$QMynN+xE7|C|zSES@$b+_QgyWRfEHG
z%C6FbYKgXL)^@b66|`B`g^B7ck5(G3$5=#5jMh`F<k&EI+XO{bV|Z!lXg%l>Q^G^x
zhalN1XtRDc+){dtJ|w6`{Vn`t*)_V?rIc*&9t=NQHdgnuXdirVtgaE%qK<_(01dII
zbLlH(*Xm({O#QCYQw2p;ztU}G<Mpu1m?!qKrSFzquV+|vOX){t6ZJAdn-#UbK_3#d
zRk7|j=+u!+w^>oo8+1g_KFxNxL3cAq+TjM>OVC!a^$oh8AnNiDNRG7WXzLsG3PGFo
z;?fCaH|qnI$M(BbAF+t-H$@*6v{lpAQ}p^#)Wx*Q6ur?RT7HV&B`B&^mM$%wqW20i
zrBBfZ1Z`F<?>0U3a>+$8-R*j`MJ(ZVJ;op}{pEH&P7re;Z-$HZgSSzT8KI+i^vFC-
zA8XJ9EMgyP)b$pzH{Pi?3yP{&O1~+)OCPdmd+D*zJ=#~-mdibQm_^KGrd}w>=yI=K
zB8WTT@sWG=I>YmF+-=sIE#ipTtan+&aj;ppTEua%SsxNKSAA0YLs^TCT&eIM(SOSB
z(<3c90N!jp!$s-kbM!VB<(ALYzN<{S1EmG!59py5{fKlA>UtNYmoLy8T$EeBP^bRE
zr27%+7U>BVWk-G}TdbR1lwSUb-tMB@@<(<4Xp=5GQc(V9J<OsKq+6=v77YM;T(1+<
zqOOR9%9rWAf|}F~k)Gwt^?r+P6?9NggEtmA0ld_!S%R_ka=p+Xb+1Tnu;>9ndn|e+
z(vNvsv;yc!UHC`IMLh?!Qb#O$8|W$B&*jyWuhD~CUQPMadYna{MTV5G)srnc4D^hi
z?(&A0Kc{EAyy4|9=nWR7l?^HXi{9>{;pH#uR*MSC`jx+;^RF?Qg@HEfZZ4`R->QdN
zbP{;4={k$fM4qqf2`(C5{-)k0D5@?lt1Ew7SB^1x&JCRz-l2O5YE+}k#+Ks_sO2pJ
z?>)WSMc0?_(%Z+Hba#OFS3Ticq6T$++0Er2=p`0S3dPEIYwvZ2cYE23;XS&Cps0Gd
zY*zW-bw7*N0DY_nS@Z_bCwiDg|13Ke+N&p7^h4R1;k~-qqO|e{%KxFak7Ef@)vo-p
z^3U|7@dg!_uPNWJNB@Z^uByvlDF2tPyx#CmE<ZE;wH_pBj=Hq`aO4|ZZ_%|t2laMA
z4XVEUSm;}Qz@i!D+sePyM+G&h`QUx0y%U%x(L3ee>9|G9!TVn4Pc*!>f+pNR)ZqO~
z`3dFU>&b%d_r6j7K2Wou&H9t_kAOA`nxnog|7ZCjoqD6m<&j8D`48G>(F&k{>v}<0
z+f;m6enc;`yn?ct@}G3!B$Mv5$oJ(x>xe~%fsX2a7NwPaU;c|8X3?2I|Iy>zbVtjN
z>B(-oqvhI}?WQ|gp5m-_(;Y2ObGBP_5=!?ttrk^O)RcRjqb}-Kp5Y9*$!ONCA|;&V
zEEY6Jom_D+lI`pj)TmCYm=wuz)XkKPs!<iQ%5$A;L1rJ&&WQ+Oe{YPmb9xEdr^i+t
z3;CQOg6>xnD|P`*O_KCEGm<3z&Jsa$)v^jth2Pm_(V|eWBG1|DqSA_dC;t}eG8Z#!
zu%f^jYSB{_-6}dblPp?R(YvD1Ibu;o#o&sLPUU2it^&NEQ)AJlipwiHJ0o3mLq&-*
z&Z0dPEfu9sTu_TTQ1Ng@nKRwxEw3ndN^UiI?x}dCqROdr(awsl&TNZPDqAX!b5^)$
zc|{MW&lHm`rSg@E<DJPa+F8-tSs|!J6;ys%(Z`v68zo!Rah2(nCp$x@nsfszKMnPB
zCRucGWxLA$&UB0ZSlOlWRA+^YdRCt9Y!}p`##IiiJk#km&E#@-<>1Oe&OD1As=T1`
zY)9R0%6p>nvdY0uy+xZUudO`S*=y0>%E^`IIsNXSq#5VWcWQoxhWrXqjyv}6JJna7
z?~HVLGb@KWlLT$m<Xz~@Na9`O%riWk_SRPpcUBmlYF9O<a)jfnXP!}24Ro=yS&-4C
z)**-G{ju`n(qy!-@)D=Dp1is0ys9OYmpQlyh5wjtMdc``m!N%`>8^0*32ITptJYQ4
zIomB7Q}tryl}=#;(@}C^<saPgqE)X}UhSgkRqs^((M9vBK1@Onfp<-Um$RyBUmHq$
zzUp8S+EVpP<(PzI+Lo$}s<BC^sOs7z)UE2eBs8#UToS6S8lQwFR{bdn&8WIQ2`#Uh
zkc75XO-w>xRNat-va4@&(c92-l8e@<p4B(GXlK>2(9KEc^y)U0rr)W&#pSiaE^SCx
zznX+Dt{hrD*_AA+9+8Afs;{cP)#X)Izf(EIMaTUL9seto;YpS}wR(JYTe?%LZ>^r{
z=8^)*Y0d!C?ip;cX-<tGdQZH1nlsM&1lup_Y_y2&7jyQzD5I*uIpm_Es<?w`QG97j
zRkx}}C)-5>tD2lb7u8nX=|o&Kv1+>0!$mWy?sEFMXnED$&L9_UtGdS-=AtjEW;k^&
z%C4U2jI)UCH_Mr75!>%xXNE=e>t<)MMfB?yXSGH2>lSCDMfB_Yoc$KD-S2Y_x#;xj
z`<#)DrnYSN`<?X`vEA=?nwt!d?S8*gd#6Ec_u0;Ni`ee7o&AEM>Wu1Rp*hZk>6DDB
zNrHA+G_QJg^&DsPU52-&dO`JE=cq-mLGl4-(A|c&zd9}QfYT~ypQiWBbJRWL?bGz0
zc}~zGde1zkpGEYEdCqE!=!5f|jTX_f<~xxYCKr0vd}n}*ZmnM6j1)B2`*Zc9)eD_5
z7G-x`3N*n=4(PN3XrV<#UDs4Ea=bG|Yk1wU(8G>T&_3O_)BNzmPKls@=up@B;YXYv
z7LD$@qWaHHKS5^JUXt+ZoE2T4t8POtcij?hL)<~TDDADTue3>~?d`g)`msbVX}a6n
z)k|Ge-0hX>$6a(>w_VlCT-3kYp6VxDbauDa>J=^;)$L!^D_!)bZts+@N}!xuyQP;s
z<)T^LJ}hlRk9Yex32p55Xz6NK^22UthFz5QUAJ$m*CcpplR|r{pLT|dUD%6%sb1$S
z5wtIZc6ruWVG-@}th3G{+T~eigF%{hdDhu&5$*Dvqh^_Qr(M=N^DLrWo_7lGC9g%L
zclUIC!C5B=eg-RTaO#>(I$G%^XT3$V(ne>uMYPf;XF!WcX3!F^ID;&rC0=ocSwu^`
z>Ws9AmUz_}V-fAS*_mLFrd>8W^DLrWwm1hZVmrL%Ouf%&UC_N<*KJOp`-!3|+`U8B
zH=KHljsx26Y!gI#cIo=Iv)3T+iQTt^cR2ekI<<Rs*B#D5L0i>X-SMQ*nJ}AqGTm*F
z9nMrin-x!u-gV*@@f_t{XNjP#at86Pvpy-^yUymMbi17GNs_yqy{_c(U3WPLtR&Ah
z-gk!1Vd*B%-Ogx1)a9hEyPXMw%n8Vcj(2XG<Q^v|h>`=l?s577m0;8u+I@WF6KB8h
z=BinpF6z41IbzYJ-7o3-sgwEubD66~cfYc0tJ6zRiyGhkny&kt{T4NWx8JFpM@g1&
zeb;|E_<jxiw@=QAzH|l{q<J#*rBi1SPh-Az##qFYsIQ#~g0^a&+kEZRTOLoMzILV?
zBqvc{JI$8I6Q!@6*%t9c=^JOBpr~r;zO?ikw;$aQxw&f_TGqY3>vt~i<?ge({@|kB
z-RF1x(M3nQKic(Y7j-!9%<xec{Xguz3s_av*6=^qUUxQ@79|>;WCMv8U<=4~bH50R
zib|$N3WiFBrG*|XN+~i+j%ga1l9`cVVMoi#I#^mjT2xwAT2xkORF+m$cC!4>F~;1B
zMP#S<J?H)Y@Ao{P&$FlVH^!J_%=?;q?Y$QrgEtTP#Y??X!q*2$GPE4dbrZt(T--&|
zxXxke=7%pI(nYJn4VP-^9t%Gm*hRa-=MU+kcf-|S!?OIGN8mq#74d!ve|m_IT!(G1
zVJ9zW8giDr2Wb^MC*t)XXUivqu5!?oL1)YS*&_U34XYf~G^DrOTM)le4(THg5VU^K
zks;^ELy3&X2Yt;cPUxN;^dqMnLCu5Yq36nzEIMnbpIl_og+tGiOD&2RdcHizqKu(^
z<pmZ^9_lYIwrK9qe)3X_mJRJMudwKmp%=(&ENUJaAaAhf$j}SrdW-b1zsOq!?H_b7
z@FKa<q9I`y$*qE3=WQ4uw+Xs5G&U?y?hw>(a1y7Jf(8uE33JKDTIxYnIx-|k_CtbC
zq{oK^$vGBH4hxniAsv-q4qhxT76fx}kTrfV>%wHuI`DZ^f>{?K?-2y^%q=UmpsQpT
zMqCjVEl)x^D#475lUs>Qn1k{1F`<Lm6EElAPd;Jxc;s?HFh7&zT0t;BljSBsFb9+6
z6M|s2Cd+fylNXqEX;!Ua)}>nnGdWvOlbRH<d`K4+M$8|QYw2c0EFO|)(ajMXhvZwd
zE@JbLabD`RHDZ0xC0<fnBGlk6dM{$n#S`VFShFhD5iuw1Qn^;t6V~)3x%>g@Gui#u
zu*>A&4M4C<O%9tXyDb_YRwR3nni$lxSgsNT^(>KFky;pxQK?+}Amjg5GJp3iVOPlq
zk(wB^p-f)A5p?`_-@Fa8<-&)M3~0k#`6Lm8Hq4a^>c|p$={mXNVIpYJJozM23xocg
zFK^uhx)ug~Jzs8p1gMf->|PdjgFLAoh+1@$Tw>AqutoA5q$UOt7R#qLgC%*nRbKEY
z5k$CM4tNX*yv!eRyIe?Qz^80?$|Zu}Uh|!DnV@+0_~1L`azVLnmD6G*`c!?H+$IP<
zRj-zf25*GbVbyXp5k^=pdjvs*<#Hwxd08&65CmTClDCp2ujjh3yW}<`x{GtSd=ja~
znCz|(yIc0#0`XQEGu)4J3P7S$<tjN8iGN?wePz%p*&_(Pk+oVb6g1EMRM<WIv7z9l
zhRt)o6n3Ay0cj;$>OMEPR-W^B(5+<a-LHqOm+O&g*c0xz!XA(hB0+zi4t!8PEOalp
z+rl1{*;exTg8S33jk3q0ufpnZmdiK}KZHFjs6`40JQencMa^zGyxyYy?z6)mlQYo^
z#cPoBkYFcDbv4LEq%+=k_YL17FBbHJ`$A4o6Fyse^%)i%{<vI?x)v#7*kDd|<b}lz
zOALQP4&4TpRqPV3+wLu=mJQ1a-yyHw4myZFKKvi@L8K-FeD0J_A+<2@xl>Mk3M`u#
zl-n(LJPlOIZXGr)yh-+dhUhL%FU#9^5N#bcJNy;-;IlvwA=T9?A494%4h-uX{+jIj
z9O{hrVHa}pN22Jj%O2A4ayNv(F6WaDqwkZK{-ew1TXHRt(K)Pd$N{-gP@l+D*8zEt
zpzz4PA#ckag3`F|ZMl<(N4Pco9l3WS_^jl_zxN~uAknNlD2F0J8<vG1lot>g1(ElM
zzc1GcDvGS<v`f&O$R{|p3tAMplasL%Yt8PA+`}mtsgm8zsZCxWsE*SIa;u;xIDIG&
zcphuUc1OMu{*l}&C_L<7_{VbT3#5B3@{{mSW&d47??%2j_^4be=$FW^!#|Td1^GmE
zhIhy%FOp^7s9(dslvfLiit>%%Ph5NnbSv5TsB<H}l7o?8M)r^RS}s6ZVl0XZj5scr
z6S2QV4dhfOXl;}`;)Hxa&?8a&&boXU=~m;(sP#eL$b1^{f4B0P6&LZ1yaNe(H$CDz
zxs`~$z{`Cvw^=kQ;(NK%qVW+w$iB_w<?X1;BTmYbkig3ooInF7xv!(*B7W{hzsTii
z2`xGucv`No%3T|AT3&(F!k`>ewp+T>fexkBqH7}@$}uA2yQujQvf|qU@s=1`^tGJ)
zky@mF(ZS)05+~?lq)CDzhV_q76etDt^hEcMP%WCkNwcV!ldcp}1YYY@m!XtdR1sk+
zi;0Xm(S1Xl$_7i9>T)XEExIkjSJ{VjtFbV;*>#q3LeP@v>WH(HQ%EfgqMxlayo@zt
z5WTl@LJ-umk5x11rE`>%sH6V$Q`jCT2jj3Z!cQ51ME%)UDYSI85&e_}Hr)kEy``&&
zxKJ6em!d<wixjsYsM!FeKoHa{P$@xzc$*?zN`<XlkWy_c7p&CU%7rL(R=I4~#R_|c
z;=!m4R1`rFFI4dp1n~wb!GfS>gO#C35PeI;5M`;*LBE74?UrswM1*q6qTLb0lz>+$
z9#}>zb*(@v*{bN)h!`dRH6ZZ$ZbZCNf<!%-pe(R-A4YhTMk1pw`bb2Q(k3jS)=A3H
z*TG8*j$g7;AqZ-nqO>AGgfAmf75_KDl3)L#zl}&!@-6x~B3)U7L~|lTsTTx2k*Vwu
z1U|ErMkMfA9g(f<6FO+$2<7lThyXgxovWO*sJA;$@!t<RYTsBT2MH_#+~brYi-O$~
zlnR^WB}%=eOLbkUY!^Bhze!4~An1w7O1mJa^%UilAgJ|air<^wnuWUyl~9Y~+*6fQ
zi!$6rN`Xb=+*c^&M8@;c>w{)0s|CFt{R5{BNYtWPO6XhO2zv%!spKG$?kc6#(oJ=j
zDIGT5HA?RT-f~+a<|sogn&G}q$wMM9^OO!7{Z%<>S)LADsIa%e3$4wCiZ2qCTc`ve
z(KYTyB@_vI{@REe6_3rbLdmmq*ST+2ifp<?%8GZq^-OhDDz!*7Uv5!02!fu!RjCsM
zJzu3XSmjO!-lpuZ=-P<elva!0jaZ@_7Uf_r-L90s+ts2wl*LFC?+#^!Ac%LTvOy5U
zTc*?_QERJ}?MTqt8{E~(K4A$FmMf_TyIQnDDL|q=Td7o7x=Qyd<uDQZFnXzbwPGB?
za_mI(-`w{oZb9<!Rqh&Phehk$_bLJJk!Ank54qPUO9h1wKOK0VQYUD{@JHSEDF*~i
z9=_eZR#D!ka@P)jj#IQnP3~Hy(4u|r2b2{SedK;f*=5l&_a^0-po-zA+>a`~+sJ3d
zaCKONk|}68*Zo~7wW!aqZOR6V)M49|eS+2wzhKxiit+(@**tvUu;-LGK~D{j8n#m@
z7xe1zq+u^8TZxSJ;UkB=sO%F|5Sh>EgrGT*6FK$%5PcepA`3aW1${q!I;VU=ET)vx
z9Hd)~-Z6bcUQ|{K-GwpNaNTwy78Ns((=I`IF?$BTq!=GTgchlcmupg%A~i|#V@?M)
zDWM;Ou7=$cbJMUUr9{x*V{RYTqSOm|EoQ~AJ<2ITpTw*kwpYpggvxyqQ#b4tWrd($
zVjds%s&WvCR%5Gj7zyU!v%^}IlNP-)Y@bs5DR^1QT(KVwdq-(Q0?SHwo6>>QBt^&m
zFzf?mYdcti?sVWs-YavjNwGeWU35ik-w=z`h+#HM^}1M~9q0wVvDBNF>qNSZ(*=<q
zE4`0EgckGm*pSFil~SZ7#=WsaI4wmwYC^nEm3l!C?^C6f%JKIkrvpD#Is`$yPZjsk
zu3CSp#91_qds&P`K0i}x1%c1cltv=-`I(ac8G2!l$0kR9rYyGTId_M$PtfyR_l3eb
zz>?p^;nBZT0+5!l=VPC9e~EqOedqR-Ab96CBJ#LJ&F=ij6Bg}v7e;=kl%bazwm)`e
zWT&!6&=;}uBY#ko&mmq7`yzH(<WEW}(n?MnB2OvDz5pHnj$rIlk*AgDFNu1`?Tln<
z=`o-h7900kq@p$o8WZ<Xq^34}MY`g+<B^7X3W>(uRF$vE%U|P0g_<h=`2hd7lHJY8
zN6kc{cQ#J7^f>627+c~_Mmp7cq#DC_2!9Nax<}B{aT=!%B-$~3Rdxc(kr!Vz_?s>-
zzG?{)c=3(urB(?7FTK<{B=XWrZKQHITYITZNHEXN;g;=4FbDfZouw+@LIj}Ts6J{i
z(h}AZm+CrSjV3Z+h4)npgzi9GbW~rJeTOw;opDJ~{nRofn7f%#{nb6B<KM&^$*Dt-
zBYqqwqZ7&<HDR9hSBDCMdEH;lLxOkL{QL82sUVn3{nhPAOBn2R{nZmlmCP^x(x?D6
z^?R%fw)R3b$D*lG7pi4Qu)?p73RKr1)v%EG8=^wg{2!oP4a<zbC2F8rE2xyyAa(1H
zq+7yih`R42&`S1j{IaMpwc#fq+F!!e?MO63!qrBL?v4sq3;zk0ON^cI4@5<(6@p%k
zf0)x!L5H|5O05_48P`Rr+lkosTo<h#wy1%V|Ig@?>vlxNsI`LBga@MH)jbw9b2@2J
zLsWw5K1Jo!gdI^Hbq5ly{uK3qAQ+Vt^&}CFLyB7d3zVZZouW1&(Kw{2{4x0aAI;V@
zHTX0T&G|I71PNyAYf<THl^~d{>1rJk&DM0ak#y|5gtxeED3iFCmF!|p8R{IQ8WxxE
zUR0)f%%USvSt|c|3s~as7)GcbB$&zHMvYJlkXjhbo*Z=rQVpA!@KaQdnh%e3<>Njp
zL5t2+2f$-EIo+JlJ9?B_i?ov6lh7}EwAzV8BRy6<MLLW(R_(1&xortS(PPzAiv~sK
zs|A9NTres$UtNF%Uc#ftsRxMo-KN;+396q8UaHtr2@km^sCj~3Nl1z=P?rk&AR*Ot
ziMmTrXTlBciK?MdxpNY;qbI2gh>T&0<D;jj+#&zh)GIM@5~nq&Ym&w%PVLgEC5iJR
zF85lh6^ZMEE?3)x&lQQ+L|?8dIz_lYaenkv)n8D3;-csxt6XE^ebKYjHA44x;)Btp
zYNiv)Rq|ig?u?$J@*nJQTFHDod!w&cd-o!rF3+Lpzp52y5yf~ui@rfEJe$g0>iI7E
zCiOsXpeE@W&#%#oRQ@MGI90LxJnHbpYQQ-}k9*D;eyf^^)FeIbaSgv+Ef=~yo~Yr~
z>S2pK!<Vah=Tf;ZJXyn6s2ze%d&Uo6r5b*u>z8!d@YQOOp!lR~hObfE1&vBtG<==9
z;5@Qil(cO4dUYvMC4+l952&3;bWdl4>VH02-kWsy@CVfcNR@0;Qg-x4HM%e8D%tZ%
zH@NH6dO>d|)ehgJdi+7xBy}V;4BxD_B2_Up`Gw&PYP+BT$@_*st`6u&5n_`+9lq5X
zmGtEAhi_B!g{~m^m*G#S?Se{@{bQa{=UhPLu1_8m^A9!pLZFrGw&YQvFQ^4XILmjb
zRY<VACB*Dfw_21P^OCv;iGI=evRcZY%meQ*;g^Cht8@4>b?Cel9=%7cCSseD3u0bT
zR}27M6NC1(s>hHj+0)4l!{1Ot13_2GUP+!7^QKyUF<C;34yX$TlJ4E)ufyL~;jdtE
zF9yu=chn{#2J`wIwOtU*>vvTC&{&KIv-KTyC{iUmom?98uG%q(eD+IO9P^$!34emr
z#9-DPRyQD3vdENQqd!)SAz-<Lx9_2tPt@&5)Y?zgp+iAOJ<+c2K!QGdG^Slu!YIO|
zl;>hTSF4bg7)2?~F~`(8(izvLyvk{-(A}K!X3SUW2|;(JGzNX8`h{b3V+~TApv@@<
zx#c85Pa-WKVlSk8$aTAjcwMSpU#qPa9f>)vwplbS=o|HzMPJ2yr}{-uYa@pJ6!W8c
z*bP+0_NS<^KdJu1fSROlQv70nQBOsY?(EcyV;x!{{`{(nMW=?v%347Tdg0N(iqW+a
zq$URCoLXtTR~H`LTU$ZIXNV{E9IY+^bTA8YW6#rer2x@L`)h4P(zw)uSbuFtD(V=l
z{tL7YK`;vjXhs_8U=|F}f(5}W7@*|~f|(VlRS=n1rxwM!v^9cmN?jl1(zYX2@%b{7
z>pIfWr?e{dhS*?D$pC_p4v!Ae{E(U$=mu&-1wlPSwQ?c@A`H=1*vbvjHV7TW3)32H
zmSGxq&;Pabf=_<B=rOeP>Yhzq8XKk^#Bw#PDRnug#hFku{#%;V`(h(B{^!z=zD(T^
z>(-i(=)@AKwUQ3kd!*Km1m8nyh>g^$v!PriJC)iH8?BX&AUZd#AvQ+qKw8Oy(zeIO
zX=OQ}J1V7K&={Mb)gn=ZM6C{quG5LyRwTF@z8IURwNg0~+Lxpq69nx`()@GLrwQ##
z(&CW7=c}CZh>X~@^+BmxnWcL>HdSjxs${U@vNg|0@Uq0n=9alyiJ<XF)q-}$H*#H*
zphHNf1l^qSRcx;28AV>Er5%jP)d~e&g;YVrcZTn{WhWBt3?sF&JSayy!zgVJ(h@c=
z?Vquuw35-Ft6_Jh9Sj_;l?%EjO^F+=)e{-()0}Z*v^_}BXVZelXjNmNTqS!v?QiaU
zZ7Wifv?pz2&^XN)i}hshAng<M6;fF~=&JZH!?RuEv<*l{rL)uf#EsW>35q#uTF?Zo
zNzjGd@)GUjIEojMemZcXwqiU{7S~PG4htHa?jLul=AHmL8tF-zryK3)M!WE5cV5fP
ziS}|O-KYY8lIOJyo@BRNg9QCDAa0U&!lKByY1+`qU|GeV`*}LBR9lKv$)=^}#g%Gp
zNc>j@XC*~lrF9@3HQ_g!S8E3TK<}stpY2|)g$jb-VP37}2!dZpUagf1g1LLOR!1bk
zuQ{*QT7?dNqj|M<Oz7aZomXpqmqE>rn(%9+tF>rB@N1;2wNydyE2c87h)9CpXqIVZ
zg5cMq*JvvQ!S6n=)uQ>2{$TyV_+2Y@jV5&gAF;VwA?hmG-_lnPhQAyG|60@y=~Lpa
zv*_vc>2c*2y~WGT*R~3uU^!pweK|z{%LSUBAh5ha^GBjNe}k4U2tJX%Q7cEHz2HWz
z0;z_zr(Yd+qt<EZZj8H0Gp0g>CC0Jz%D9`gP$FhzEa9{miDtpgS|id?X+Xx^Tvs&>
z%B^HWGuFi|(%J;2XKaqUMcZ0Lx`K@7;+ANI#Y9(Ryc&0>wp!3l8HeJQYpv5scSlBh
z+)AzR3ZnHH$KzIOTLnFq@k3mVR!~B^=QB>l-K(_<I*?I3WQ{g-2I;=e(Bs!?MM!XF
z=oMe9RUuI?-LIVz1iiFg8!!{fQ7^6cjzh2YY2%|UQh&|xi?@>}c7xYaJv;L+@%-=W
z;J+3%GSd_Lh((h)J*tJ;B5cv(EDDR?qU9kSH6h;PS{YJ{1o0l%>PW}Q6T4Mw7X%TW
z)P~N2TJt@GM}Jx?69n;|(;AQ}Syg7LYo}IK3YL{@b!K$@^V$id8uoDJTTw4)>?+XJ
zu;(*V;&*A8NYoR%wLBym_uX2FrK@)B*5+7rB<4kJF%s>OP1*`emlfZldCIVNjlG#;
z<6qVa1s%wo#Az`R>&TqWsb0`enWgc2w0(l~tZU-;YWxp1@Oskty`t?A1mpLrmU<27
z;JFp$@vmxSNYsYcv;`LZ5cHb1#-fV&*EQo>s+oV*ZSikup+x+-NY_NarIiQ@%9<a2
zKwE%R!=kd5#lNGmIaDq=YXzqPf(o(>*E?FKplgtp3i=yb)(d(Nb*+M)Me02leX@75
zYPioFL0|B4?`m5G`DO$8Uk8?zY-n~3r|p8`v+s{Ts13NDyyRvZu0z^(i|XPJX$|F6
zZesT4`1iD;d1N^&du#mrTF!hR8tFEz2#I>IO)Dp2;ImCzW9h0n)mg+p)7N%bbUN@u
zZJ$NY#DA#y{}rR-RrIiS5NQd!Df@KbCtB(P(9!<+iMAbSiLo?$cYM2cK+wkQmpL64
z)R_Hx{1J^U#5Nes*?Yo|Xug78&pr@;R2wSj{p|NR#R=-j=66`NNrJQysjkno5<$Tu
zK929uss!bXIL4`oh)o=k?ds5iZ@_qL)`&wvpKGN=#=H^hIn^Q2{QO+oa3fgK$>R&H
zumXsB_Y18Q33~V2_%E~yi}+nzt(wTVb;M8cUuq3Vl??7We5rK^g1Zi1X_IcEx~v{?
zI{vt}+9GGdH`*SH`XzK~CoBq1_)+t}*;_6$;b$$=qSS=bTIwRuRk9~Xj7w1T3Zy0M
z)e-#?biK}^-~=DN)uPmdv-Gyb<ny}`#R=!?zLj3OD#1_pSX7>Ho?dRzO$mMV4Hn&=
z&`;lE(dvW%z5EvP@@vLb2?O+ci*8Q{)c09bmk_L<v}kL>Kz+ci-f}l34AyfjYD^fa
zmszwrAwpkm(cXk8-F+LBt77Nncw*!9NrGT+P1LIdP2!ZIHwc1VI72^x1fw}SI9u-^
z9nSI*y5AD;c@$3&xq7G|I6;ik^NH}>lc$#p9h@if^eUl)Q&65>F9=RSd3viLI0fbD
zCj`NXB~SOe9pmA7K2MJ$!ZT5xUMO^MCd$(n3mu$^^7J~PgELW{zDE$8iSqP=!V=Cl
zqjk0vdx^L2{e-c)AJP(IaLy+Q`FgaVxSaPnr4n(=YS%bD-=dC$@p_R(#}f+l3Q;aQ
zr*Fumdaa=GIfm;}z0tDdpMdN8gl-DAoTQ(ybf*I+>8FHlUe5ZUNqWE?P|qdC@|+(y
zg$jCv>n7_tf?ndf$$EjHk8-q-Df$XQCv%dbrs%aqybb(W5qh0P)vn9*MvGEih57+e
zu21ey376}gmX1FGLT7hkUC_(rx^Fk~??%Dh$kRpK=OiK{Ft^z?O<y2rIMNy<+Fz#W
z^;Wr5ZrLa-vvT`}6zOe9HEe3GnpmXsF5>@MR5-~^w`gXrf8rH-{<5xG&(sTvjD@)y
zgJ$ZrNG;MWx!JCn`bj~{avKKE(krT=T#K|Vp<!^Tp8q$XqtX$6U+PNzm>>`D&#QF*
z<z%@k_deHE`U0e*(mL*?OdoI;=^o1M6Ea(GK&oVq<_=7}R__$_L~eD&9NoQwEO+s`
z%+)Ja61~iI*XdPAN6me?>w~V>HwgL&sZr3DINy-#^(H~bdAxGHRnSS^yYuy9NK2Sw
zWO(9yeZk!j;i%*@a(Loj^;$vxBNI5)5t$c_+!(Y_-z8}1$n~7skYJz4b}iJ8S(KJ|
zgYLTud@eCkM&>2nqz@I8GjcqqI6>pM?q+?Gps8GUvtA<TY94QqUL|PW$ZXdleFYJZ
zH$HK(-hgyeS~T)>V5QzfWKMQ(464*Sgzh$8&q{sLYOD({H#xCVFGHg5u->9qkd7_q
zUT)E=1=S+e3VIBwK~NJ?qoDmrt%5#6Y9qqcaf{w*(d5Kibl-chF6>8cd8;0bM0L4U
zFCrb*^H#mwrmOPK<X)#o7A0Dwo;xbr)kW~@lG`jx*lCwo1UqdP!A{#nu+v(k!h6Fm
zf}MS-<pti+-eD2EPqj#e_o){3f<4(H74~F{@X3f>1bebYDqJn@^hQtzkD8g-MI%OS
z3|eOCCXbq(xJ<7Sy##Gvrf)!MlCB&zJGfe}6I9OWZ+blvodB16z4Tf<syuPIzO|dK
z5$UK&x;E0W6{BwCmPQSXU!`&Xs9O^6(sKkoinJ7IiSf*+YOZS))Qr^oUK;lU+{;~h
zC{iW+l+y}5j&yw7S0%30tAyouqt+$ft*;UE<EV!dSL+8YOaA*t{e;k+9`$(QJ-V`n
zA{cp3C*G?MMXF(E=j}{fqqichWPW*j67SPX?*mJCXTyIf=<Nx0`gxxuc2WPl&l5LT
zIylpIQAnPh!n#pZHyShOxXsI$K|dxwX!#s7=-0%JHZnbRHagd{$wn7=9<h<jQ*Wa%
z&!hSrY*C9eX3)8w2Al2z&lY{FrE_^6x9P$>TlEvD`&f$0JD&K2-g_<d3(${=PwH-q
zeofr27g%I^p4Jy2t!C5nVm&+bJxJ7_&+7Y-pf1M~pVfP>1D`;@CO&72{$paJjZDu@
zJs&N}=L`A<B=WgSuO~13*Xchd?$Y;IWO{b%9Y{2<U-J6wwIwdu(?!Q~BVA4U3A8+l
zHEYrRYN2L8KPJAcM_cr3;vT)wBGdDVUV%grTJ<WV7OYFFUT=}<c}+iPvwTB8Z0UYX
zd_!mVV^8pMre~i%0Ev9QsfSv+9~0lyi!3rdZ|NIsmT&9zmhQ*IxAi?1nVxs_4x8mc
zt0&-!XORlm=`Na+$DfbswN%UVGCUUX9?bO|vUDrXt#-X<qa!iz+vs@62No^NJ09|p
zjq*Jo+h~fX-9{yz&%D&@w!HO0UwTPh#^c%PNX#*t?s&-87Omm&PS_~l^R11hc)qt$
ziRYx3dOgJBo$`{pgvYbfkr@7$ZSh|V*BuWzZP8Oao@97+Pvzx%WE)NKXf`VGm|p6&
zi^uEbC3P{6XQv}EXW4YeLwZ~ECXaWHjq*KyHk#t;YoiiRe=qg=kjMLrm(&}0JUbnU
zxyYtF9>V{OglO$IJYJBE@;xCon&RPqo!7D~@eJ`&uU~k)2rsF<M_0S-bR@=Y(;W|q
z^ir=2Mz0Tw_L3Sk`o~0zdS#8C>*0U#m*VxB(v7Yi{a3C#VVm>AjZ+p?yM`OadRTF=
z#*W0q82(6fKP%1%wdizUf{|lUwJX7xW6@2XL}Rr@RUVH~kJOU7cr<?kptojN>tv$|
zbxVx3qpLkBM!TT8(Km5AA?WeZhAY+R{Q&Jfu&PpxREv(pq#1Jr!8*z?8Z659WEmY6
zP4VOy12&MCg?S~OQN|=eEBI_3YpfOo>u8+OWYLkB@kXa0SUClT`$6)uhR@`QMwvxZ
zJd=$&i%L9&Mw_5zJVKG-zmdwp%9(EDSac-j3S)sFSSvG(?H1*GW*H|en&P?22z`jW
zJjL5E+b9wQD{ih)D+t!g^+u~jM`Fs2Q-WZ1%s1ld$jh6&4GWBNi>7#PG#V@_@!V{*
z3tG%0++qxPn99NGs50^`Iudi6u~-nShue)ti}F2p7$+^7;;A;=o5;&IybX65rGjqY
z5mp&>f?z$|V;r#PNKB2PJVNDqk3Jr<#z-YHVIN#;lnR1fYOS$C5bPmqjU9qug|9UZ
z3xf5x)-dYPrwOZSt(c!p>NBJ7_N+DBsH<ZC;B{GVlps~IXGX90JYXz9qU+H{quQdI
zJR6M-7FD|*GPYV&<*74vAvJL?cY8J&Ih!GR3xiessIe6Zd{(<2Gny>g>}fE1KMIzh
z`@83HqX?;qwTwO;xXoCDMDGf=84aZ4Pfq$FXq#~Yi6T5<xE}*A6#Yp<X#iTu-WdI~
z=NTghiCVP7C_p+Y!HU~qOtR=m%(F(JMaM(_VH631^|#X~u_)j3f>CPG6wixBnMEa@
zW@8Q!j^AFRTIgW??KM_dbR^~#W3@%cLt2eBf?zeiZq!<o@7ZT;uxN_sEu+q&63;tE
zJ&_4B<UONF=wLOzXY8?vU#E>$i}-cg*e3|q=10Z>i}-cgIA{^SP8)3&@$0m4n8<`V
z_@!}5=wNMrX|OHO^GBt{=kn{cp;*MP(}p1kR_Y1E*CKwMHhNpcuhWK~Mf^H#_!F5h
z%TF26LI*4Llo4kUzfKz-i}-cgNEHO@Rx&d!;@4?2$0B~6HuEgv*J(4K$b@y&%PbQ*
zShu~*ITrEjv{`NuzfPMAL^)V-=a{R74pzW9=2oGD>)5&GK0$CDJJ&oR2(Dx2n!O*#
zxr^T#IM)n7g1P$w*SRfv*>j$mY0;Y=f3pyYR!)Gq8i`g;fLTvETsZ;eF(kPDedxK+
zH2&VTaxO9(kZ4r}nT<%aZiCHJ7FBsdOwU#*N0tN4awJ-Rq2@s({<l*2yQQIK{S(+C
z_TlKGo}p%kpf5&$=?OCnpCsKcqrdfpn;n9D$NcPxF!Q#PE?|t3<TkewVZRJB8<A*D
z4>MaWy2&%lJZMq1E7Ck>QI#jkJcUH{9B#Hh)zyZ0Gw*4jCMkSOucQQXDH7dxOE6a;
zLA-Ohu9e7uYj~1*Oi;#{YECBw!5z<J)BhRpxx~mDlj=$~g9S|*!@mt`W(vBR>r%{o
zK{t<CACzj&5wvd151c9l?HCh~lxDIW<nxU&E>6CJ+J_HHN;g*sniCnp$?sXRJUV7L
zr)WVZ$0Tw}734EEJt@O%5_I9%PZBcBc0mzi-{*8fP}<m>q)fB-bL4Z<*fE>}1YJ9}
zZ%CHu5p?U=R9BXnBj{eP%Qi~|ZRfgdvs}>rv6m!`Fi#5lWb9>}D*izcz8PE0i8T^A
z@&h<k5wU*xvp5aii8@Z#C*_!hNc<bg`3pGlZs-46dchdwT6FbDI}OWUoYbW&N?FoH
z>aAy2bE-z4M@{fD%4|TYGGL@fnLC6IeCC-4g>K%+YEJD)Eha=5Z7R=0JzGqOFxm_z
zk|4rpvkHmc-;OowkZ4|yHMd&2X+dMnT{hh~v(=(iN#o3eMEqOv4<wB@3tqr};j^{c
zHNh;gXtSrlTufv@ttXlr1VODQnhi+s?6*xxmzu4lW6Akjk|vp*f^zboN}6H@@1ma1
z;kwJr0zn1&jY*fA<w!NGD8D&rs(E5JSk|!e{G*;}=71N8Zq0u^smLrqqSh9hg%-V?
zRBSFFGM49G9&v@aM$k874<}t=?jT~@5<cUU{}R^4SfBrOQi(Z7&~y3ggG$U5M7$^X
z6O+v~7IkvVUBdE{{L@LL=3znK=c~!3<}pFWIR5vYOy4Go(0^PtCx1b3@9-)!PSDVC
z>w~T`CkaX%_XDRABzk_&)#i3V@VWNYre8Doq|X$uHcuc?Pn4ObEb>h*GuO0WbT)FF
zfAVZ|=*vhrw%3?*EJ}4<Yi=hpCXDMFGRHh1=nCG3IcBGz@^Kd>&oTY>fR`G!WLyZR
zXhDA)H#B*!Szu9g@^xkf5`1qhk(1xvu3BGj76^hCm77gS{4Z!Eq$ih~2L!==hIwYY
zpd;MNJk$3T@N!i0ADNpx-}Do-D>pHD0l&?H?PIs(rYA2n^8_v9bc0za=%L*4$v2vF
zh>Ux9&);OO5jwbAf0MZZ>8J_!JQkTvg5a})MP`R62Y2!pnZ~Oa&wxAmi_Bmo`UGH+
znL|3Zd0cw(BC`VNW9j*EQ<4{(b)>_Ywb<OzjoL)H^Tr<vT5S5aQj0>73W$uP@$0#6
zv7iE^24T4^VFr(2yyoqR8OgVprAW|c35iwa93pJr5_5wfXwedLmmp}-60=Q|gU>XU
zm;tYYPr9ltF+-7H)+Ht_F+D`a?D4~sZZ``BRg4edRBKtD4!qs0vuLyDc5|0Svy<;I
z+eA6oF_)RA1i@~z%nW#g`g$dgu*~!jVGk}dONjWI-t1XsR#-GU`ETZGLGVe_UFI%J
zH!pdGxknJpv%AfGg5VRQyUl|{#)IQ;OkQOk7W61mhai{}t4!a0R5SSeXq6c%XiMB;
zUTzW*gPvb)76~29tQxaQ5cGVFStkg3zQ)`o%0bW9n8%2CYj01kF^&Bc@2T-ClGm7_
zf?gbd52qX=wtxIOPEADEOZS<r7Cn@FpV=YGwU6KBT4x$>lFzTlKbE}C3`L^7XPsGs
z1gm%}*BuZ#_(plH>Gu|tqwh1^Zx$leu%E_{3ccTKK!O>P?OJc<9{@}G#P0#Kg2>zw
z_Yc<wvq8}D+<D0ln%jltwuE`f51EaEV2mC%n~*-1j0roFA2vIM4o2)@^CXc8Beuy5
zcpKxHFk+j`R6#Ieo6JH%Fk+j`5+Yn3o6ItygE6W%R|tYJsyDX^f-$N$TSYk-qk8L<
zFnof+%kif2e=TbEgqM=-wAV%xC%l=w**t|_T1+VSXt#29+MC=(Q0_4^;2r8ucouMj
z=|<w8+3@$b4Q4bFoeQ?`o4R00>vju9@c!b@OYn=oL&<*^x)!O~{gI9KyFX9fX691_
ze0TkXxfE%MF=N8F$xoQ|g62;+$!R-M3xl>lX&$y{FDKu3p)ORj?WP|RUb&LDn<W-$
zDNmV=7FD~RF?|n0xfTX(-(mU*f@j-3YfeI{WVcT^E9F^ptDyB0&QJM=*>DKTRkH09
z2BhpXd%s7td&0#j&zl8;-kmTZXt&vbw2~c}5SH?yH4dE<qElY7Xw0C*lqMTxrZk)E
zeeg+F-<M5aq@xm)d)bT=1m*Uag%)L|>@`<+l}morthZ=PN~_s~L_PSrS<psp&z`V1
z`E|2g5cI?wW(5+}dY`!uiR!Z7JlsXe`^`>^s$FlIg&%l*zLflyxzwV)oYn|}2nWm^
zf}pS8Han3h!rLbM5WG-p-!_K|g4Vuc=2?`P@~&Bi1m&t-hs>o!#?KS@T?eyXkXit=
zM^JC14nY?c7_Rrs6N21Gy+6X9HxiNDf-;fvkt*5f0)8jMEc_TOSF+0sCZ)V@ZY9EZ
zgKg$MBy3S~n>pYU^vUa~rF>v6u&CPgk-5jB&7Q;NfKS1a_Q+4n5+Vau@h4`L&_NG=
zVm2UEvMUSDPx;ggZijOG{cXWnDM!p*Nc`8Tyk?)7y^naKpAPIW1CXe9JIowG(7T_T
zWfo<od|}qv${jPeT2$>iW;R-MB<3r#6$#egw4mc=o29FEePf<LqFMK?>35Xc2ea;5
zGe8iu=sPnQiTbS5EVoEY`QB``sM__TdDx=Oo|9%LQVaIdKTW^SC<6HWr<p1U=Go6?
z6%zH?&t_%^SW++jVlG9ZIryu&8i{)8S97}{=%v%<0gEzIm`|rw&XwfwF+K;MA4?kx
zmbzshx1eteB3+74oS=kDmbx{cR6)00a(RmGQ%z*PeMz#%^w}=RH8IlV<I^bU+KDA8
zzCI@fHBOw(Df$bF=e%@2Cy$_tODj`)`D6<E_R{K<vwZRd&74%3(%Yv%(0h~aOX=fN
zj<kfqX{L`)tsuBkp5wC>>8J!(N<W`nLI>AIKc9U>{5{@3T<7_m6a?4X^L>23gqkhE
zla9ZSTM%3~{e23M=$kVBJ`02nuABZowM2Nf@%Py(EaAG@-{*j^gzIL1pOb>%y4l|+
z;26ZCb8>&5R3sS9Yk9dz7S*R*;4{afY}bW8yb$wVx&9&uu3V=B2UrAGt}fc|{(Fk6
zTe%?1G9Yl5E5srw*G2o?Pp1s*RxZ@C3<!KaWw1rf?&g#s7D2i2Zsj5@T|nSN$-^va
zcJEJ#vIy!K+pS!jr3(oBC?&z7W_L%5$0CTA+O1rgr3(oBAtl42W;aXCwg}>l>Q*k#
z(gg(eP90-Wv-^V7aTY<miQURwYUu(3honxnsM#Hxdbvdq?}~2aN-SMKU~cM6i<;dN
zQ?IfJ;?3z+Zmy*Z2rNy#-lAsr{L}>&LA*uX$}P5Z0fBd>-eOU+`@YoMErNK<yOq1k
z(gg%=NnL4CvwLUiy%s^d2fCHpVCez^-%8zRQM0=}wca9#x3ycjZI&(|@SmwqTGZ_J
zO?%EFi1$*ra!r;lATT(s#UefqX|GuX@!siH?p;e45I8pNkVVbzE7Cr;2;zO&t=ut7
z7Z7+;+Se8}yYEi>!6Jyqoc47q34(RokS1Hy?0zxL*CL45w_7=XOBWFMVOoESn%&>0
z1z7~~!n>7=uyg@|ebR?n)a)LVo@f!o8_}&?j-}(z!bl%!QM0=!y}%-fSJbUsv8983
z=?aTrf9WEKH=|p*nU-Zh;PQ)0Eoye(oPMQ6``ydZ%beBLu6R0dwsSQRyJYg}^x4ks
zHr+MOMxiU6T$_H4bDvFjt@EJJ-N?&b>+G=U<~UCX-Ev-Tj??!mygu+9n*VOe=|{vK
z<mKi%gKfI&oI{1~IbQBMXO2yGy)$3v-r~CJon<y%xwBm8zUDs5omDp7JZH7goi}B5
z`aEYX5<S~szO&9|Ip5hJEEA_Zls@0tXw&`G*(7v1QyxqItMh<Ox4_vZbQ7j*OJCqT
zX45Tnb_(5<T({7veBIR(H#mKX*dngG!5LuF-RKM!x;0#PqcfVw*fxd#6>_IXP$N>N
zpjM<jBHq`}q*pl0kSbZ*l$X*McbhM_T5}>G@DkT;7B#zD({HzEzxz=7vTo(7Egj6y
z<rcyG>>`+-D^LgTVHX7+PG9LvJq~S$Cpp{}e77?nX$d<z<+Jov&JsZ<IIVVWN8;Zp
z<>l^i?m_xkQZGA^UgJzX0bV|q@-E}|HJn9);2Wkj&WdkPXD+<#XKq<bBt3uG>A)Ii
zouE&VI)vq~m+?C%PUBnes8mPPI75*t*`PxHR|uTZmJY~6#9|9aMBeKxvFX-0%Y<$`
z*RAQ+XZKmX6c8w7th1=u-8<s}i}t&NG9K<$Zj+@82ppPGZ&9;5FJqfUP_EIr8l!(K
z%`TjivD4}MT~{ydbPg2+y|mMr*-5>$tFVz%2@&?vPG^}Q=%t;`-rtiY^wLhJ8wt)?
z)e$?L`AC(l&*i5BpLbRXx(I0p(oueICfW16^MD}u_S*~2gGhAt-t9b$M0XZ;JC6xV
zI05c<8b3gEI*smj`U-;YitToW3WD#7?RI7gf;$;6I`fez!i&yHNEG2kX9-#In&o<4
zbXM6cUvgI4EMIc2LHbyNK6}YI=SS*^u*-i+c*(hf2>Xm%3W7d+$$3IpLZ7|l?0pi-
zQJ=l!9Dr2GZsEPu<SeyxH)J$9E0B(w<8w9!H9I#5g7059JDUWpxV$o>*?EEpYu4=a
z{6xJ3-@k5l<`LodubZ6}NYoR}&MG4QTed^V&CadebUTD@?d72B=%za%bem8Y`cH3*
zAfB5@_$=zCD-}BOxu%<LgV2%Becf~ih3*NAXZ&oB*PBShOYNr15ju*uz|!5$`>Yn}
zDE3*4^OPXyvlgfCDeOV)vlgcZ>0|Tx%a>=gI7>-~e=n<ruQ-WK;l>h+vr-33c7TM^
zRb^dTl7OYx<}$Rr7i}Iyc^&$Jyu|F1b!bCrC|Xj){+I`eEb2hs$mV`5Ww#+oMh_1l
z>F$AS>>kL5B>CK4Vie1sQg4vt1wPXq>@loEiOn8t9HQ)%Hn}}tZj)0>$>%TpUYVm?
zOV2syw~|%1vi3eC57f6^c?Y9DC&?qWvQOFayKVVqTb@eU)BRlQz*~4S->bTMX}E2y
zA@5*o`hxb)<hSrXbg*66ll#w*+UxLV^3>auQV-kv);<=0JeNrOA=b)1(?|kZiFL^(
zd`L@o$$zy)H23T??T_1HpCM%V$8(#sowgRy%qI!tz4fPjPYI1R%@dkAG?!?0ok>ok
zrq2fdx8Q7nzqKQ=v$@2<{7~LgVz&=K8(4P|+ss!=_Y|JZ=U`{j_O$<ZB=%SoktBn$
zhC2Vvy0>nmrMAcQsDE#{%W?#2d-}0^fV_9lAxoKikQv22lO@#0!6+7$g8c85B5gmL
zmdb)e5`Am01GUTEli)#OW30CH%sW^PdLv6pFSprW%C!zwgf_Ena`5RbOY*sBd85se
z<ULb+tw@{DqZHUU7>!-eJk89Wa=Sg*%*7snRqSBb@jCNBD51V0Eu}YOi>MUrPTn~~
zI~Db6Pd^}cu%+nvZk|f422;wPDWy`RrRZN{5B!-HkqunUWibcVVnnJT<)MuZ_Px!g
z-CoxmTuUc}p5D4761yKgZ@|><lkyvF@_Niux()MPe!TVUDWTe)$^HfI$H89Zsm$KB
z`LvI+J>PRyz*u;9A&UO{_TI6+2CtGd%9QV!l6DEVlvz)$-NV0Qa|GLKugRau+v{@z
z+YWV**zf1P_3zU5l-SF9wP&h{z3uiq)uCs<k>n?ADXm9H9Zb3g>TH)B@a>Z9=Fg;)
z7>y>Z9ht%0R>WF356i;*<V)U`lD819bufr4vlyON#0dUYF0n3&g!T>w_3U1Xd{TWV
zO~U9@TZketsG)=9qTD_@)ONdsdg=F5ho~oL|5e`Z(;j6O)`51LaJ(i`|IjW$DcCsJ
zN}MxfPZDZTmqcQ}wX~P|<GjquuqJj7UH+-;@7Z+O|7W#cZ#QABZnshgyZbkJnbmQL
zccy_Q*?9N2$565jOP#~-B70{J%vEoGFKS6bDV?ccEF6qx(U~L%uq>r?x`6sP*vBY`
zF?FzCaCOkEqdZxDiZ-xPy!)ZO>{qBI8#-Ok`Q+bEX)aMpqx=)bs`G<Baa;>&C)WHV
z&dI(gf!XL_1Gz-T6{Luh!2ev`>^;!4p3rX+?lTg*5Nmj*n%|2jc{jIlut>B#Q=TmC
zo}<yeOX3|V`>4^F!YN&1R8P9@Q`)mE_2fG2+b*rd?6Kmpwg>UdV~=Ie+vEOmM5>j&
zEaj7}*736k=I!H7^PhGhd;UykgEPsgy>OnCSuFp(B3&uyYT{t<8I8o?l+O2LtV02|
zy$JJmx&58;D9eun=YV&;)9HoQ8njXFc3uT}_iK~gl2&Dxgsv3!)Enz6UN?m;#2UVf
zHR&qlt%+SiCmc$bVyQD-D`~f(nQx!}|JhYW^MQ5%`>LOdJJl_`MGi*!o~<}j&ATlB
zRgcl!gWi)F^(2)2y;AmmJ5xXZaesEz>dfQvM=hdS{oc4!-KbVIIHo;gy?-9`Bv{Jq
z0krAXx3=rTe{HVPzUN?@thoQGo;~YEHUFcwdt3eZpQt&loj>D^`i=H0+Hbq+<~?E3
zjsZ248J*wAp02`lmxE$$<8|x4qDfBuNwtF1dryGw$I=-LEG4!BTSw=FuDrzF;Bx8#
ziM@k1kkVZO8MP8Sh;o(xp3(bm<#T>2cCeSuhFWFxfn8!Ro|8%b5!!d<W%do1cx?{y
z^9esKaEZ*$o&!F?vx9B6dFbi6hVP%<Oa0cr#7HuL`=p2xn~Lv|$+Nxw6tN0h)YG%w
zl15}0_vv6GskZ2|7f)sO7rb&!MtRQ^-jg~Q$)}<R%G1sOd6|`9S&(?I@}!-MTC%_N
ze9+#EmXu~<+@&a?)BfLh-oaL*gj!8DMR*#7)WP5zDBeDqh4m*JDtj-Mwddzy6uV>*
zO2n*2dn#p5*P$FN>HUtxNCK&Y-S&qb?6H=khqXMF#a%wqQXAnrw+{9+db5{;I(y^V
zYeo6pXx~%*$1S1}p;cy&MYD)bFO>g~`<EF>?3VS|cBr$=D0<JDe|CntZNdJev1r8n
znd)zkNcWCpKH@T?cLY5pzi%(GE=!5oZD^+Tj7}1JFWK`n6F}m<HuaQH|J!4MefQ`w
zIENE)4%;nhZqw+{tjNMv_Z%;KDSN)>JnvbS=5WupQ`w%Q+0*g{tpCy;^|!BID)lms
z@>{m_Gt7U7>8*G@rL_#FN(cK4&z6*z=5~$vZzcS_4A)9{7IomPklA@QNmp5=n>^HJ
z19_Q6{zl^UN!r-oXuI1(ZDp2evjJ~1-s_-U&cVi^b}CODxbMkAQiAeIOlhUlZUE!u
zV4b*vXzY5XYtb9@iHz3;@Ac^S<tp36?KRebvHpw=jT-H}d+}O!7)P8&it=#n<2Pq;
z)Tk!V8;WQ<_3Cq2Ps&re2PHJh_UrW_tQ(}icfI}$<xgQm=rIR_=ra3b320^ZJ$gR-
zI;bsuk_#SW7Rn_GOGo*oJaq_fWwt!X>7K*yrPKq|8`J|Z>m>GDiGuS}6*HE0u=yAT
z+9k0{i~?6f?`)xWrglFt7T!@llN?qYKYLhvul?Hbd--aNyRpXz(tIXAltR1sr>=On
z!M+knLMOC8wz0R4c8Pm1I;C_E{I~N>Vk8H92V0N!AMkUUgVkf6&PX&T=`2B>!|+5$
zCm(v>1eOwe7E6)0moN|h`PmQi`*`YLhj=QB6CivFDKYvil03Jg4S18;37%INoDWrY
zn&&lUUeB1$`ta0y{u#jY-ZMFrQm~YYr%jE)4zFV=LzJ@Hhohf#^Z<G9nHg-n=fg=T
zFSSXoMG2f6p$_l~1&o)sKGb6i(T3_t66h<h|0<ieRcHy<FNJ|zWsjhiP6$wzJUj5b
z>a7)wqs+Q$<vkTgqx@O!L18WE2l5U^a+1*17V<I!t;9aYl*X4*iu)~=b(Vuo5KkR!
z80N_XoYH0NVTt9Sc05mIrsC?DiW0hi3lfJo{l@!)HyCAaTVQ;>XMXUkvUwPV`pvGL
zihbTwPM_w``w{B5y*PhpX14LX1K%~!tW(7OD0-h|pUF_lA+$YP)KgN0ZG=+Z7D4^J
zGhweU%#8%u!CP02ErNFh{2LBDFSAE@s<0{NKzpIDG+|@+umej`J!wyXHNyLfM^xC4
zJXO10%|R}s-22Xp#+N>Cg4DsDN1ygj&*>Bdab^6pS78_Q>KYyD!^inPPrH-MhHx#-
zRf*Z<;K4hG!G^RFdyPkQpryAgok`9V_m6$jc)?gm>;v>{A8XoSK<?dPKIeVn-5)^i
zopongchvthKWPMM4#OBpjG}*q`G4BHQSXs|yAADxa5muIj+h7O0G>Kn1m@3l$MsBd
znh6lgA=Vw`AK<<1U5WO2@+gkfHlETv(bx_g7qS7Z%s|WE?_*oYKkXQFrh>L~|E>k?
z*f4gI`1XZ;F2TKeNz@JAl~bPIH^Y03AW?87s%#(6YYeV6x_GBa^Wk4x8Z3qPp2>2s
z4<XM#-^V;%r|5cW|1=!(-CIGUOrx_9cR$KshJMZ@r~a9V5$B`jB1~z|ycgv+&w=&c
zjPJqkod-LBi$~{oy0}(h^=MCW*u8%%hqiz>dhesKCxv~N{6&;N>R|9rUuOHrrVJ!-
zvhtpz-b4Ad+{VG?VSVg*`-pd-H(KeG|DH=^u@m;04<1MYyQ_Eqw9Bb%PYKPRKkvV%
zpFfUB^U%d>D6w!%X=ML+$BRVEv>qvquYL7h+y^{E%0J`i4Sn({PZjniPgT~*Q#!qL
zKf@HD=jpa|F6QYpOXo4FA>FZo)P64Yey_>Cvg~I?d!BYDsyX?m+1vB<MeEDHDxtS!
zJSj<x#tv+LPXd-oH%poiV1H&gl%kWEcORfTbs+!uBHBG)HygZByQmc;p}bvAb?zy#
zw~n;-RbZDuUS|KmPpQZT^4=aJiQOJNch`2UEN{QrV^K}Or?=mJtM&HVAFszhUNtg5
zb#&hkd+wGr$Luo@=9TwcVL!L~pf@_hLtbV#;cP!2<@UKs`Pa__KewYzEw^#72DIFP
zY4N!rp-*9GUlltuo=>Q6d-^2Fz1*kw-5E)Gwu`O>U0S+-<-LnVa%$;1^k%mQt%E(t
z<ucoZ^(T9K`WVXl^H%UHzAdGliteuWtQC2%+mI!t<Z~-}eil>cC5gdz()fETlyrT2
z&B6BCB(Gy0Jn(m3JeApDo+|7Mo~jH!i_wJrH(cVqcF;Q->iHUsMP~-eQ~&&*vH7R1
zR==%}_dXKUiY%#C_S)L#D)sZ9seeyD|2+xq^Hc}>Rf)dC0H4%&KRvhSLF-^3@!kcM
z|N2`A*?^p%;<%;v`yT%<3f;~7zpKa2;o~SV``Gn-r$#gILbL>X2kXjvcV@eXo^$Nq
znOFAt`TwHW*XEg4;{UcDgW1CG<nvU<nWiwBA#fjqe_sf-FtYrVi|^wGaS83Q-kp{t
zXYxaHI1)=i%I|*I@@YIT3(07dll_^z(XRf-GtJ(^|IXb0e^LJL-81Q0e<{wWt~~$L
z=659un}u?kfn-nLX+P6Eq*+RPFWJ+~{Nve6_B8*=-k$bcSrFa32ElXp71~t?2ct9g
z#eQIKKY9LF^VeZS`p!I^tSV4q_hXma-wTjUSD$$I2YcBrt@ljcQ$i<ON~tX6&*$e-
z{%ZwnBb{uiCRJR{?=a(Ch`aH9ggqkV?=6F#p|X_HJB}C8o=#%)p2dC-r0e|5zk$Hd
zoDOye_J&<fc{;sQ-u@n8HQG}>H}}ZfErZYZ?yL5mIdh)ud!A#vB;GpHyA`-E<X|Nj
z1x8I`XS(wPwe{YwvwMTQw?4nkcaKG@tP$I5&(r#{fBp#H(RFnDju4HPD226c#F{^8
z<t0X*N$%<kwcX2O@w;l6e+%Qn9Tf)y8(GL9FR}YDJ%l!0se_UKE{Vh-@0C+oib(hI
z?CrAqd=LHGwP*7A0oLIJrj)lwq59O}CnJzrH9>o-$<LVI#3MQw<*5hG6w!V~>v@vQ
z=?nd1ulawkK7U+?JnWyYd1aqbaK{Ypj?x_HX=7h^J=bGT`!0$1UL1M0uRHohCw)R~
z|2^^_&(c4yRTe<6Li&53u-pBRjgQS9^4`y1z|#9Yy8mP;?!RY5E>ZAvAGO=s{QbE9
zDGv%e{|q$&xr+7C{&ao*C%maF;16pES`F)|{}=1|KkZp#u0K(8u+g#p#(%5+|0kp9
zEc8#e2rLb3m-%nB>;JEa1`Gc$wiN75Y_HG1-QNEV(M=Zp-|7J<<%9j;{15fR|F)X=
zu!Mi3XP~ST`^Wb`+CTsEwd#3pv|pR}#fx7nA^p8;ZYuT|rCFH&Gild1+wI?S@1BRx
zP`saO!)K1(yRTi}+xOnNwbvHjWqZGM-<AJY*ZrP7Fap~G-_MuWG|W><@>lV6NAKt<
zwbudOh0(V_>3fw*w{M+weczJg|LR(7_g2Yk;{7JxDxTNaQ#{q#yF4}6QJ$L2xe)67
z-zoKbtD9Qdb@ua~C+YM{a<aM4AL4HFce6$o%MP+Q{)*?X1pZ3ouN1b4rLr29#$W0D
zmBC+`{FTLD+59zvzjE0CDUUy^V>HWA#`6F3Ige+VQUQNW<oQeatC00$Q~7HKTOnP^
zHb`Y`xucBT?U>DqrP*u-e{GVl<$oSzKFj2Xz)a~z)-EmP_II*iM>T&f=dZi?YXyJR
zumZ<A{%T~$9MAJt6MyaHuMgN4%7?5>{+JDNe9Uf>K4xK#&v~6b=lL&Lz5EsPSB|qC
z@(-L(a`{RAzriCLQZavB&U~a9%qjI_z4+@a{yI;}RQgJjlnbSm4wqD=1W8Nzt4ayx
zuYvp(A?;8i`74^+4wo90;XEJ1^GVVPB}aNf&6S?xujl#eayE*`7{&h|FMXjFNc&j<
z=K{``aQlf;fjW`@f0<OOPUWv+{+hvGGbJBwrgRp6ozGvFv(-|bc8}CwxrgWPks|s3
zGx-1g*jh<b)^gcesfPbQga6-;t&`R$wbEAp>c{SvwkzwU7uEG#x1RF@QZM-dp5H9F
zw9TA1^L#La=j#o{G#b-9X7pPbn91Jl|G2Aw!Be#gP+q{FbH6RUP~?3^uE{82lij;q
zg(xp!@XV`W44$S{$p1F+gBfLLS%%s&l;pD5sgGn7OIcI5WK8DTYF8S|o4P)zfNhD}
zj`HU+(%8hQeM5>_DVO&{5B*p<N-C!A$|z<PQ(H3TvRlvohpSk+ZR#6bQa$xuOh3q2
z$g<P;-!|sjqg=9Ps_ZIeo2MFR`Bg?g_Vm=^A^jLU=@-g&W|Z^iGHnegX4}sGC%12z
zS{m=i0s@~5E@!>_U*f7{@HcW-vUjJx9#qLbn(D}0$vzotWL9Bqx3M|VeM5F*|2)g!
zS?qhU2lnzl*~n`S&#B*!_219Fn%XB5(!QAx_rlCW+=Fij<byL;v*psRfYt0qX)~`$
z=hVTOxx5ZXGd{<%pQGo`@wvO7^PX%N{5eMa27B)t_UqK8?qdEos*||qwhJJ?pQk@D
zZCb-%@SmPpi+*YuJe{`?Q&WP!b5P65^R}hevN?IXcyDA)&B-j}QJxGgX1%B7XD(!a
znZ`$o4VyNZdw|j0&l0CK^A<gnJDs=Xq1-DogV_iDx4R(aW5Kegtq<xWO`LW-E>wE_
zf>7QA@E0}?@aUsl?L4h;9b>ZoM(8l<g?^ho{dijKf^=HYKKY!8*M|g1#oR-HboIzx
zu6TAuY~K**u{qdp^D`^iHPb41x+}LL(~m#Hb6dI}FZ)AS08h822T1d$?c&~+PTLez
z%+_%~#q2RmcTVdYatGG@4n8Y<Lrm!%E*UC4dC`->9$xlzpojnM4?e4<xpLfvh0={Y
z%|mSo*FGCug84hxy4>3`VRY`o^d8>Z&>O{4$F%ia^6j*Tc=|Js7|2UiyH-lhqK!eD
zr8$uSNe@c!?Bi|HMMaPDkqs|eAC$||i?onuG5SiLrgH7XqQ7VE<@u*FS4y*s`i5+i
zDvDs1E-TXGw@LSLZ`-6TMTdg+OD_gRx*&Zivzpsi4PN1RG_W$HPJ(s1o&Oc^S27zU
zSe13yu43sYV^cr{xBMaO4)%1>0bcXnMW1C>2}w)Q*SzMvV_?O-#%l$me~OR(`@9Yd
z*|8!=);H2mML)zXWaIhDYU2LaWHh4xMtmyTPrN3RQegfVSx~ELm*n8Fg4($M(}8W$
zHGO{yXp`U>q3sy)pkrEa;Kj!<e+q3*q0K1?o(D=c(cHu7z-R}QjdsBEK1p7S@>-PF
zI^da|ByT`@1Iim5@VrivxAS>&Dy)ygDBc*<<bYA`gO+_9<$2kzK|FtU)<MVX!I>Ag
z^ZfZ)?P$~PfZ2YG=O0Qw=GYQ<D(sl!c<w{VOR=AiIeHbt8tGTOJ_tsz+VwgA8#jSj
zpYt^mo*2*l9EpKh&Homr<Kp5^0>SfXo{k)MepWHx6H4PNS#0sZtOxn%%uCMY+RdIy
z_H63Lpgs;5!9I>Tc^iX{Vg8uo!SQbH`GtOgS)C}EjNbZ5uk<rqlX(r3GA9f9mbmpi
z?=#YqRqUATHuyTtF7A_A?0`MFRf0OVO3;c{J{wPk9dtDCRv&bHAN(Drr!Iz7S?wy3
zp|-_*zfI4&(lM@h<KQZkRLLv*em9^>h9{g>bIA{3Cmr<zhYvjIxIZvxV51EE+$t{}
z^hRhK+P9&7n+#7qZ5Q?fxqYkr_@JYqopQ?H*@Jx*^0Ry3b==SSp<nW}ZQ$mC(F)Ar
zp$g35JZ^J3Fi%<8_tbzq1)h^yj@}AUUWoES1)h;g@{<lZbo0Op)K;LjLV>5GlC~P<
z)hMr4;0dYTQsJRmXgP1iw)B&Zve2~9gN|!M=3m^&phdn4$eVC|HSylto>9mBz-UhA
zbD)@AQ=F4^(lK!0sDYhqJ-6><mxksKKIynL^z6`LT<OK^#$v;DK!H&>pg{j0P#zsW
zhI_cDcuLj*tknSpMyCl^L_123@v)ws6)Jys!QxOwf__s}lkcB*I3DKn>Onr5^OEmy
zJjU}Y9b1cMXWi#`uK4<_&5q{cn|S(Wao-S_;V_zf*UIu$A@8fgD)3cdrakNUpm+_J
z!)*8Hy4L4Hk3Ltqh^ODn!8{$PZQ*IhU^UpIHxK$H)T8eolrh+&zdV@lnR*tc+Xk=W
zk~M=@4-QbF?H;|H%X8W1*fZ5rYqN6M&phwZ&(-z?Ks_JMD%7DSC79lU?LCB7w?lY!
zTgZH-JNW8==gb%A&|}csrvnRg=(hqLdZ|`{Ry>H$n?HnCv~hS%kH+1vOoy3MEcKnP
z$176hpqKcFP`YN&A)dz>$etZ^g6E-KooxT0(}9p?4DMvFqom*9i9A1G@N}N4(i@>o
zygp9`H{p)jj^o&l<JiQnypLry@v+#J)vmy5t<a%wD|G*nJGf+5?vugoytXj1umi-i
zpy`c4huF)x)e-hF-OsOUyRrhscqLC?A2gSZo8C7hmrdjOTs9k0uB~=8>d^LLws88(
zS?$<|$1v^0v`v3>{Cin#`h(-!vsy8K0MjOYd=BpuwsiW}Tn>F$Dc#Ncxl(!n)4%gr
z2T<OIecq&BJ@T>SHk1U)P1DmZ43yvIX)gN|>vICrUobuI3aBCc)eKV_dd11CVR9;$
zcnlb|OiVon)Hze6a0SUTaCIB7J9!L{6riL4CB<wE_mC!+UGc?V;^nWS_@PcN=lL|b
z0@Er?tA$qQ+SMpoi|K=yHVEz6*}1qQLCQ~?d^M3z|LkJ+<Q08G#>vZyT-?KpSZWWZ
zZ}PO5y@Pf53iCf+Q5rv&6{QU2mP!eEh~#-E&!@?KF!jguFPL78X&9!ln5JTyi|Kew
zFT=D1)7hBL$8-^<OEJBRr}6UIs6-xXE#|+D%Ha78sNIC=79k(a<xivJd7i=ynaCy0
zC~3uXAIje?=^K(JpFqi)L0|l(5XY#{fVEc0|4zfHuxLIauVj|sh?L=|m1DZu(OEJr
zy8`o7Lc(TTo&A#o($!e1T9m?7fRb92RAIhOXz`SS`ErzR$9yB^n=rrGaqf&%*JejJ
zPm5XHjP*ffSkKLlf*IFk-zU$U5g1V=B=creW<Mxb&NwIPL3ssF3whlhN-ky_XZ($i
z^6nX0$d&Tp8LP5exjmeMex0#4`wphfd^Gz?**P;Q>Pk6iW~!^ufYr*c(K8>-{7D);
z^Vw`jU*H}JX2L#SG_#r8%%0iAB@1W5d1>Ly*Rl^_9S&f`H2L<KFdvp<dJj(zV6Ps)
zUQLs0QT{Ndk7N1_rn@lRi|Lz~zK>};Ps>Fcn~UGd-sWhDgWmXR=07gn<~TX?11{-|
zONz>6>a6ua+Z@m*+i)z>*uv;$R~nzOo!My&PW#&&=gj&iA0t?mtHs#4W~n36<fvIR
zpZ!Mkk>Y0sj3{Pl+}k+0?{rufd0d+&kLM}8qbVMeCKsY)I!~`;WwQcDREQd`K3mGb
zv(1P;%7R(vMD<Z_!xZL5ntV5wT8C*Jrdu$58q*he+J=4AhCSJaJvP@t@7<2@cQoxH
z%AQ$6B0DjE%7A_B6#wfX?OFX47_VaX;jCdJ=4jgz21U0!V8`|~p}l^X24fn4>0I{p
zta-_s9Y4;BAK_=h%=hEZc0Lsr&wNYMMhsH^Qku)t5n&Vftb;55X2-(mV@KrTzH|q>
zxO5874=IIxFP^8c@6F)-mRoxD2w$ATL-|vIce(sbn1|6Au~=G_J8y)q33ZO<@@?tS
zCSG|lx(6*Ab*OUy)+7%tJ^XKqwPy|ESHM(PJY5ITTNB^yA4)DnKV>GaR*VR-&d<t3
zNjXYR>7cE^d;t2)Ll1sf&nlD$W4;>mt5JK*fSN$BzK{*?(@zJcVf0$m)}o(U9_7Xn
zb-dK=BO3Vgr+2v;Ot@;)nXs!Dv&p4>L$;&+b`w_3b}Y3WTi1zWUCd&WSB>bz5%0ti
zZ{qgTvzo9^ny^or@UI0n@qTb;wVH5Mg>kHo2*$PtV;>f?S*6Xcc>cFZYe&RORizVn
z^zx|>@%-{q{=QhbxAcd&c<G7KrSAW)y)Tc8s(Sywcjn%iVNqZhwqb@D1j_|?%}mV&
z3`p5`#n@q3+|m{V6qPbHGb<~l%mpd8%CgK{(!@`h`3X~VL36{MT#*D#fA8nqGm6%C
z`Th6(eP2K3b>8puJm)#j+0UJGXP8T8nY-;%B=gW`+U27~ueZyPLfWnl&5*X()`!x2
zkIe!7#MfQW+u}Z3&vpx0tCw;-YWps9p`?0t+LN<zHTfZQzC?4IY)YP7D#b_FhLZju
zn+X>~8(GciZprK28d;qi(PQri-(mgS$m)NG^;IKlh2%(<k|WIx$&uzphUnAzT4=s-
z*46@VGzuAb7M>WEAza0*%MkuzsL!W(M}~BDMz111K}FZ%mD02MIy{Ak@&-E6ObBwM
znc2wJjtTmvF7+yx5e{MXIO(hpHaOD!tY>EmgCq61!I9R5!I51Z*nN*wcK;z2_a)vB
z9>BZ}aAYGcYSIRVgs`$g9BITun70Y4QTc|j399k=#<1<I&o@f_)BM9WO0)CZhwYN)
z<)0m}OR5AOme%BV2|Fxp&F>X9U)rBPn8m|cJRxi^8-=|RJ;(MW>+`+R`TWsg7bJQI
zenDzPORq`)O3x0vCOH)(51KFO3tn$m&-yI{Z7&HOf!fXtjd!HE8t+JRwVutf5v>08
zY(8f*n<ADvK{e^Qx!sGHeKxb1#9BvV>NzYG=RVJ2dj+q8{4hFgjSs70J-nXviE^4~
zX6>CNG^f81HVb=BS(t<T27W!<LH>Z@YKAoo_cA=r@H?LwVVl`Z*vv}Y%;v*pN4i4&
z%rrHuZ)@1N)UYu+%Jlo0em~RHGfllCU5o1-**j9l>EW}{=Ya*;VI6TIz%$XL9tFB~
zyQHycjln&jc{i+|99*z8jLxulCoe}8d>qE^*M-H%nFSm0n8)t}wjh=6$oYr`$V-|l
z?Nj7p_)L*sE!YVp&nfcz=zr2{`(;40azKW>oM~Py*v)J{8{os9>X#yaS#ZxkMcxQ+
zDe`uPdl?=r_%&<-@*ZJ$lHn!Pf$S&9=L(tvishRHO<~jIMG<$xie;ft6<#bm6*`6A
zVKcB8c|8zk?*~MW!fe<C6q;evwJ<Pzp-lJ07Rq$*ZXr%aox(H30fjw)=hL1*D)rk!
zdF_(}!k5Z)4ZXwqbDbPkh^wufSh#Y)I{8)il>;`)Dcys^H_EAnZ3aqC)NdvyT5AR;
zT5HZubVu=!13lr{8L3TOcFDPg;o-Z`w^8AA$1EXyFY0;EpD-;Th<PCN92NvWSY^x)
zt^L=!4{)NjwpYFqzH&g26YUj;<(E;P!}9FHwD6OxEr(@#a_M1tVPQ`AVOI0Qa{8dc
z@Me~}7cHf{?2d$3U8rjp!u*7=au>3@b|Y9kp0y&Cl|F*mj8HUq^42$)|I2aed7W9l
z!_ZB$x^O~x72=u0K7c(=YEHCotZ|~JUw+_3d%_wg>eUaN=$!I1^JZdsk2;O>+-5rJ
z^n&Le>rp3q;wRn76vG;sw?-%0ml~P3M&_pxc}qeYooJ70gttf_dG4s8*+PifqS{{g
z5=Qgw@Y3*b`A8wn<ST{K!zZYk3%lT+)!o9G;XPnEA4pe?eu(3Yppl9ehKIBGVcDgK
z?!r}u)2uKREe_u+bSQeg+eTHdqO$|8Ns&d%!(%k`E@i1mPygJ`o=LV;q-U5d73m3R
zOGRq?Qjwlqwq2m7l5H30X=Dahy1Ny~@Q}*0eaK_ISv-Vm+CdY~;zh1>?<Lih?n0Ed
ziob*S9cu;jce+%yimz`KuW1$EB_|c3f7J9|Wu>aHD75D~hJnts9|k(pewcz*zwq=f
zfu3++aHjVj`(0@!|LjULInbHjb!5Qio_{{W39OfjS$rC>DPR`E`Aol%;ZlYx8Lnfv
zk>Pe=Q@}3Zs_?y}>2?@+&;KOD9=MXO3%@}6cGnm-GZfi5*MZ>(Z9m^{!bfNa`>q~V
z%I4Bi+yU6~w85FZqjRPiXmF-I)8I^V&*03iWzIC049+wIO|Ze;V`uih%b8}iiP;A^
zQ>!c3%nxy<w(A6EVW$JWM<M(KGzh-{y@mZilW-Vl6@GVUEA$pm1D_Ndp!r0+4O}A%
zjyfS(B?D7cj=*%43ou({0NPYOz#^5OV_RXHDgaoc`omc#+)??p(FyNJ0l@dA4nTw4
z1?VmJ1e)Z&zy{3#;8o2KV58<4;4RJYHf;q-8;!WL_9dXJwiIa4P6K*tUj>@9bAVRu
zo4_#b0^kVkB4D)kBVfF?3Ye^22~5>~3QX623AAay0TyYu0LN>;2Ts!dfU;iJ{*3r}
z?G<2ywh?$$+YHp{?gE{4>b5!|P^SZS(6s>`(&>RmbzZ;|I#XMJeEK`w>fg32IL`VQ
z<5AYmjI*pEj0>$<j3-+28JAecF`i+4jqx1oCyd{=Zev_&ZDhRM>f}OxS6jUqe`)n&
zyvh2w%W~*<Si8Gy$8X2&w)Sy3jZc8%tWUX!`0vEs)<G`*j6+=1_&?V|YdGV5)+m>0
z`2OB*Yre}6e4f19I@V<x<B2Xy8NcijfX`IxtYt32jAy#wBPYo7U1pfcPbK4h)}=0|
z{Yc*A5?~R8eb((R!Hnx%vKZfVnZek_bvfgXt~(g_bUn>@gsa+0`Ep$Y7?-;SGhXDH
z#dy8z495R<T@H@3o_AHFqwB1HxSjy-w*KjQlJOl^u^q{x+m1j=*SK|TF9@ftu5Qc0
zb=K}~8IMu=Q*N`sr>%qB!XGD2bISr>vQBkd3f^s9>UJ7jXRUTS-I4fnw;7#?zjX`j
zEC@HOHEw}H#Jk*ffa|RPcB|<^@*%e>4A2ehF*kL0@^i{9fbluEV8#t@S&Xl_&0yT*
zww&>8x9yAt{SL;m{xoApy}AeaanT1eHt0jZH>^JTEGGNuXD|-XFK66Azk_iX{b|NM
z^?^OfzOO!;@c?}V<01Ox;N8||^i@nAuHV7rXnhTn6Z9vUJW_v}ahhK2MfTZxf5!Rx
zK=2LgSp5(tPt*r9epw&F^kw=iaGiC!KAXv}>nj+~*Dq)KclA5KyRA#~^-RA)ukKCq
zD!l~0Vf{=Wz~uG%Kqhb02QzuAK7`3T^jS>)QD4q@kA4Q@U-e5EAJi{rd{kcrzF|G7
z-@)Xw`Whx*(w}DXRee2^Z|c>3sQeav2>6Eep1y*y<X*$r!CiWS^ljY(8N0iOF!pw@
zU~G1;VcgC=urJv??q0z-$i0Sf5BI<)N&kd<Hsk*8Rg4F_*DxODF7>1IXWc^>N4Zxq
zj(1-&faYh4`w7M`xLXI3{God~<DKqH7@u{o0^hJ|4K+^_I~(d5yBR_Tk?d*6X6$RI
zU~Dy1F>Y_DVcf|e4JNy8h7iWR4Hb<08EP0mZK!7)Y><YKU6>(+afD&pP^wR?VQ?_<
zSi?5P^9;f;>d(&&C%|#muMGHt1^8QomGO6m!HjDR>5O+7${GLLu!QkG!#2i;3?~>L
zGvLb^$bZUUWqi(%&bYx)&iI;P3F9WiHpaINCm0JJLKx+fJ*<o!J<1uocr0OT@TdY~
zJ$Y<nvY*EZ#sMDEaME}1sAt^8qkaU*Jw290Qak&4;L9P9mv{t56R+^7h$UX-VU45o
z&pfIUN%r=v8cl5W49O&J=NXty{J7`f9I^}YTr!^eX@Tc9#)~}5pC|bv&n1kjJO@uC
zd8KDM<4--y8Gq@ygz-0?^;5{-7SD=Th`;x&nnV19XFcPeJwsk6d9P;`<KH|3-ypfp
zvx4yn&zgB8pYastQ#ltst&FdD2EI-DMo)a04{r9XVtm&#Z~@6`FX;nfo!62jl&_6f
z)iRRxUMFxN+HLjn5~_$zURBkk_xF-MCVtE-n{j8a8phqdq?M%a;}!TB@l#$QUl0%S
zO8=Jfhj^85B@Xvm!Z^}v8{;^y6O5C+gzqSQw3n4}rq^J`d0y#^i@efzP(M%b+V&I8
zgHGP~QVslf^Uh}6+q;HwKkty^q<`AGhH<cW_6d^1yaP`XM|f8;j`a>XMRJmN1>;oj
z6X4U<3~%8y@yp&4_=a_!x0T87cxN;DTkm?t-+4>*lwRYV&3Ko04dZ`%2c9AQKJRSC
zhrDYTAM*}5OZrpZ^^DJXpSVEfG<XXaiPb(<#zvp?>m(2MDQBGIvxM<jpKUGFKkxX|
z+$KK@eWW|Yi+!>gFZZco{E1J<U!-5_Q_uJdpTN5$Z}6#LyxFIo@phl=d!+xDk0glT
z-990VYkjI1AMlYx(jW1uV0_#sP(^aRPd4KVJ~fOl`vj^<f5WGW@hzVaiR8b0Dj2Jb
z^^CQ~5SjGO#u~<M#%vAAp2i9tv9Gb7vDFyjKyrIy4dYHm$&uu4#wy0Wjgk||{fya+
zpElMr4mJillRnH?!#Khi*oNd-V+G?Rqtuq<RAUI^3}ZdxTw{m}=?jfjjK>=TT}ghy
zn9X>yQF0@Bsxg~!g|UY5EMthC^lum|7{6@{bSL?JV}%#-hsGMl%Z!2EB!6tIV7$gC
z`H;NMSjG5jV?E<d#t=MW>V|cjv5N6dW1ug|KN)Kn|6-I(B=0w7Gd^srVf?!>#7z3r
z#(Ku*je&k7|6#0PeBD^j_)lZDh4gofl9gEW4PmVDtzzutEBTY&)whDNhi_mzl8wIg
z9f&QyAwk4}zSi!daNF9^cQE6wzU7R2`7UAnr0)sF1AT=aWH;1zTTkLp-xG{S_*#3B
z9OFBfaiVWI<59j#7^nN5=tJo_zQPm41-^qBkMm7uJjquhd}u26Ju_mPiNeJZb*4Kb
z<Os(Ia|Chwh@gl{Q;&$g5o=BTBWkQ`O+zB8O~WFZP0vPbHbwhK``4OkO$ia{u!{Cy
zYl`>Jjv%f@?4Pw`BA$<UF=B(6e3V3NGB=o-O=RENdM5Xwc#QX_G8do(;)M~lrVk^Q
znU<NVfZs%X1AUD(2=yZ`TcG<T;uq+s#-yn=?T0s|o|UFbQ#G_}O{Y-fKky>i-uBjf
z4Y_YdocqVL)^`6Cza3#Qi;+jnM>x7hrla2Ek?QXmNwo-K{TdkA0d_qi*P8l9_K&Pa
zo0ge^BPp#KHp@)Wkx9^|MrKATvAoDJk<Y`r1Rg6*QzL7U?-j&nN4^<J{i9e>Y(ZpY
z<Pummn5rW`kK7nJ#JtJ;edLdkdm{Hm9*R5`c{1`DbG7MG<kiSc=GMVpORA|oG)20Z
zsn704x<^^yhiX>KQq5685zdewk2+#@V}5!?De0Tc%DB|Bxk9acCd!S45mD(F!Bj5U
z%OK8)s>WP+5L4vBs28H9L{&u1ih4WBUegbvmPLIWweG(BZPd2=@tsk-qiUm$M4gWM
zBdRGX(0n&a6<ul8MH?(`(VNWv(T_!=SInKG8_d+20nt<wip570Qu{NJMr=bKvac~M
zvaB`DitZa}F*lgs;97%)v<>Ff-0LRv%ra(4+8?2%exkXsH~OaOw`gT9+xhqCMy6?w
zj`vTGxEo!K^`edmG&{t&#2CO0W^>FkQ@fa;m_9KUbD&v4^7b^7YfVux$uXHRg)x(3
zrp7dzUW-{6vn*zH%x0inw=?E9NXKKY0-IT`yHUp2cCl{e$73hQbdObPxXkpRrbA*w
zV=0W_X|<-r*v!~!Q&H?Plfk0cl|e&!NUG*5@vYeD)b`jF<^_HYnA@#=ej0ldv-GRj
z2Gh5(w3kq>pJNG|+1#L+O7oXy`M%g1>!H|M(>Bc8X5gjR#{1HxSehAfTmx1+c_Ulr
zxN4ME1D`ckN~Qksj<c98W`Ec<m^#Eo`!`^&#{2h-Q&!vn<XCH>5g8I^ujMjRB($`m
zDou%q-Q?JM)~3c4#7&ATj%!A}%HfqpbFE1!i%O;0Ju9vqdY9(Y2XWPiSDIGGeTx^`
z8n=yU$Z8jhkrjF%+Rc1Aj`pbYahKz6#JQQ9qwgRmdA}St-yHAXCjNocE;ioZKVC_T
z_YdMReAfnc{o^Z<V`zL0d?^-g=J{BY@%}0C>1;Q>jF!dw=RukjUu|lKQ7wjVH}iCs
zlWb`xnTPbtaa5c4;;ZARWgkMLj6C(vgWZSHXvVIJZ!&)#zd8Pp-yy&4@wKKi@n_;2
z5ij%`?{^Wto6LoNm2B6(8lUS&yLVIkc)wcApaxSRtVrXKpyUcl81L63LCMu4q1N;S
z0@>AKwop0bVF+w!ZBPhHh)Woqke4t%p(Npzgf|lwCAj$6uL!lKb&z%^>`tgO?S-G;
zAPq4O!K@{Je<X~yjJDJw-e8($Q6~~B8n?t+#9aJjztNTsiIuQbMyLz)^m6eVm^eIf
znkAaa&8Crw)Pl6cVSYJ@g^A-6?QJSfoS&G1b}mX>p7=>3?U;^!x6SLJqgGI$7SLY(
zEj%ebM4s&7yTtM6w_JFzYlwFzzQ}s4wQg_X!NjA9vteCpn(ap(DfL1A3-I62O1_d<
z4%>s!l3h#UCi87`2}Y|;63J96eUg2(Q~y6KwNL7u<b<pK(@8-IK?w?mCei3e1C>}}
z(kAmEKLyj0Y)MV#F-b4_HL<z!B4o?~t|?ENW0_-_l@w`-w7iwH5Ge{SPFmzwmGqI{
zs-!Bv&y!aAeVz2F-{zzRtk1qr+RFN1SJE=m(WJA;v&?h}s82Q}`zLo!?vqUI7?e!&
z71y6+n!VJH=;TJ$M~!|DVxyC(mupSq{R)z6O)n)cGnIoE_{{`XCX-CpoGM8F_FJ7?
z<F_t(Lo)Rcm0*u=PTq`pPp#hpJEb3#*iVqR!vAl{b;)OvxB6X7ZUi=?Mt>kbrFf-m
zV%LpINTw8eKZ3a#(LROhOV^J|Q+HTYngSzf25mAALJH}BL(P6memITlL?IG37yS}a
z&iIW=x#*`z87WtoM17Z+vJAWCCbKfTpNDmeUvWyKUwKL@>tAXY`B6sV)fC#b1Myyi
z`d{((pcF-ZGv&jSrFbnfRm0ooDPN^fZ?p~%dPbQQ4|>bqi}u<pr7C{EO_40rhHWXz
zJ30GW{2_%#hE}6J*8!A!6IORwZ`pTt-AI}nbX|5Ixy<CtM!LadfmV4B^B{i*(wWH{
z?K8yo`Ot0TC+0pQ`;VkiA3U<!r0jGw&M_lr`zfPB^SK&pwZSxdWTD?}bFN=5TTe~q
z9tk}X4*AU+xryz9G|v`~41#wW=R&_#EKakMdN?Sd(Qn(x+vZwRP{L0m8&DGZJf7<E
z8zj7E^4pC4v>GMToNX9+Hi^RZk#tR}G|`%D9ltxW?Wne+Doy0iFe)g)II0)B7Ct_T
zN^dehynl5Y_3S9>(<WG7jE`gST2ne~*P_JSQB-~gT8k?HbjsW;9p&op>i^29w?^e9
zyvHogV$_$9I-B&Mm(C_B{k09b9_SCT^}BzRub;2qG1SrSvC?z_c4!B5e~!97$|;rl
zcNuz>-Wxx7S3-T_n)*>{RqD#r{v(^rU!{JR>Vlop*DnZHk7q}9M7?TLM_XuDZ$Qo?
zsb^EKrru1w2Y<^<(r9JhZ(y^h?P!yQc4hKOY#6;Vb(8sK%1z8D>XEg`u`-oXmFqzG
zXk{i*k0=@i6Gqc0jzlV5tujU@Tk=p&q=nwAP#8Np&O(7aO&Z;RKBQL9#t1f<l`CdY
z#MvZT7Yj#^_d5u0%9^L^=&8{?5(?4#=SE+LzDL4eqYwF2o22LHs`>D%*3^hT==59z
zX4-%5<L~`j@Z9z1R-%Vm_h?YU5c9)5`fy)T@BN9=s5cr+QX0+3*1btBcSsXh@4BR|
zOttr^GJ{s8_D!Slv0D&7oknwxuGHaaX=(QB^$?su@{vNXDO@{*zju0->1iLWG`*EZ
z@AJs2l8+8u52+T^?~Bu9RulUuk&c3Lg;cN#-sZ58qS0zS!sKZ+QtA3fxoBtjHci>H
zX?NI;w6&&xp$#<41i!;+G<$wey9lnu8ePlEqLamyv_%%BC#rEyRi{(FW>edALwaBM
zRnUIcd6bQ?t~ObKi!78z{wPollor@$95JQPNt^gVOYQBZ7CoN+WctALC6;CrU44fl
z7RoduQ3CnTNyjP1+>HI@8~FJJ0cY@}^7Lk0L#S1A($}QdnbxGQPp7*Bv`;siHmCm*
zQD-^?d~gnLHYwMe6Y%%oJ=$8lbH9#~YQakXDcB6J_7miqbe9aWP|p5TcV$$l_A~|_
z8PvlHnlsvGEHib=puX>!@f6~NSYFEiU{4Rta7raP6=|s%m8Q%L@|p+9U>ReXo3R!v
zQ<<U4IebCJ;*9Ey%48~$EU7m?XMPV_Doq>VVJGs?oFj{$Gpa1VqGZ~+j%1vLU8QM>
zWr^id#%2qhQm$oGBMqnTN8~?Yx!H1;d3wN_OpnZJSl612nVT&ZNVV|hk*Ums&XB5+
zLKb~8Q!+=UKbKhm-HQlsL%T4uDsve-Q-21{*O{9#k6N~8p0xasdDcQRW>4lG%ORv3
zWc$)_#4r!g!ZV1W-ezT2`y=xbOSfMWZ)Dz$qCov%54Vtm=6xOJfF`RBY)^5|q7>5G
z^I5X!?EKH^cI~75_<b+wn1hw@M)hwUD958Kg64kf^<ZBU{j#pI_S1Nf4{9@oK`3RD
z`I)Sn78*$klsW?1l&rf^%G@NoOlVpxEg1bu(^$lbCxPkgMd!^aSuK_d1nR}tSvsXu
zBIP}vb172k%Gbhrb`8_oYeD6HnN@;2MRtEBk=wJP{i%gyL*6Oa`$$<2l=82vJz4wU
zOR_5XJK|@v6l_3RrRf$le<8H7QYlh)r|fQc_0Fy|*;Dtx?&((Y@a$SsY_@_)*`u>t
zhfJguWfx^n0FUNq*R{5LH2!k-v`0L>nmw<ThFbPcb|-eKxA)5bORTJ<Md+1g^b6H|
zIpV8WjQZj;NE@?hFWrh(Ze;p@Y9HDDkiCb6U$YM}JH<DpD6wPNPg`qEx3j~o)uwQ3
zw7-xO?=R=j+^Xg~rBlvrlw!!~WWAkj20oV4Ip>KSsvGSa_FDFb=7}8pim<PWq0p{1
zO*cQwI5sDVaavAx&J1e-i$9-3tLdejNUMD{mNETs|5q5#&3TLQq8z)gk8-x={Ft)`
zbv%fa6NpjUsbmV5au!&x<-EzS2Y=@1a%Z4@GuT{k%k|2oU_!7X)uesy0xR8DjP}1^
zjraG;eHwYl7x@j&y=@N9U1YVd)9BnKR?;Wtu3$FymZs)Xe<(X%W-hJVAFT!8;@k&p
zA0x^`{%7Q_veIs053S!XD4y&&h-t+U+t)FzX_9B<zL)z!u5x!t!PdF#IqkWsbL-Gf
zYW3%+-E_0P-$>Is--g_6cu|@5oKzm&H`|F8?ark!KpS)D9`>=^J*+QU*Z)-RHq#!f
zQsav#iLTppr%l;|{>-JT{hi!of4ZYj;n8|hX;e2=-Vv)VuWcR$cf?J3{=iOo-GEQ#
zDZM^05BpR`2rxeH59FbdIGd4@SB=v!oq1?3E0$T%DKob)FFx-av!s$=$}7v8j{IeL
zv!GuDFL=MlOMPIuJnsVL5_zZEP#(pr-2-V__o2OSiPz@Qn!>3lVi95+ncZfzVQ1b?
zz<qg#fG6|L0<Undl#4tnty8cOb)@p`B`S5M+T2D?$>v}?V%6L1IhERZ*{J<zGak)r
zudOm_G|Cp+9}%5wJ#EdVfwp0`cpH^M`qpDax<_Y4rmY>jb9u!4vMt`f4CM_^?43j-
z__|GL^;<S4e|s*vi$LLh*u8~wWotXS!rJZZJxMhn9kq)5SKHRu?0)UnTKgO&rm)Vo
z!L}Lx=|%GQwzC=kRd~=3KiWq7cf%*I-SKN5g0LRHFrgrxTaRBFQ{$I9B>X}Lo|y%7
z06O6}I-C(}gWu6<3&{nND<n5adPwe&43In^c|!7n<PFIOk`a<GBoibvBtJ+NNLEPx
zkh%%&P>-HM4`C=USm=eXfb<rg5&8(B!U!Q;h!CC?B86BXN{AC;gm}affvG}*@SHGG
zNE1d0nL>e(BNPd_!Wbb>7%Sup<M0|Uydb<Ryd)IkH5soGyh?>KVG3STg=u)rK)Wl1
zIl`;LTw$g#Pnd--Gt3d*LhOCS79zGtcpG0xct=<zED$!}S3Wigi}4#FON6b^ZpW{J
zd@rmNYJ@eyF5wH|C*f<MR@f-~3X6Th7U7_<1HT>eFX4#rgHQ*H--Vxr<H9e(30R#(
z>II}WK)MX+if~G}j;{jT5Y7lq(Ef?oEum3p7VZcw!e7E|;T~dwcvn!1YEi;VgJ12?
ziVk91(NT00T|_-z?xLsYD|(40@iEa~3=-RkUBm#fs~9MD6FZ4LA@#wlzxcE`K#URx
zigDr~F-aUOCW}MG6fsyFB@Poui(z7h7%pau!^M1Ygg91=5XXs;;&|kkC`OAVVysvu
z#*0(M1aYRAD87c=v&1xUwwNx?N3OTTT=8x3O>wcfKwK&=5|@jW;tKHtv0D64{21C#
z#E-;P;!5#TQ4l)%Yzr5J?!`X=`xNg7K2>}KXzld-|3G}-_Y`Wilwmc)PZ>T_Otp<G
zJ_k%K{sTCs_!`jF|0b}sxEVN?X%-jXLwrTC^sFF!%{03i9w~N&=3=o6P-*+0#RkM3
zCzBsVuUIM`lvKsf-^*1zE2S%*Th~GHuXt8!-Wn~FsSd3*am7Yxf+kymLs)&DWj67X
zJ3*5(ncAq->cz>_y17iFl>YYQ?yy-rxzBxEJ-I*P8zv6{?wU-V4^O5ZQ#4BI#mUb?
zKbPfdtyfZ&(v=dGQf^L;hW%ZJ+LA=Xy-QN>qopJl@gm0pU{J|;VE+;-Q7L6u3AG}z
zgj!u#LT&lGP3u&}zMOfeC@Dd%)-8IigvQIeqyl;+{yx(vsPv3d^Hn9(_STxOOXfne
zwd8H!fs%#y@k%Sr?GoxwLn&cE=|{lMrK^B_OV<O3mVO5eFZ~G^S4uS*Ra%R90ka=h
zO09mm^fzdxv(z_Ak0KsWdJ5RL^gM8A>1AMLX(Mo1X$$aEmUly`fN!(yD%ApOnWnC^
z4dUlY-5=4nwrMH#L28ksKk#1Z<3PKn%YBXFxvsPqG|x`%2XrbM3{*-{yfr@e3^YDv
zg#YA!1oVpkttGLD2b3iPJC;3n9|x3WBOY2-0Nm4)W@%IzVQSfUXfhcp_621xLi2JN
z_1@p(%Gk|jsqd7P!t(E$N|sv9@Kc73&rw-Eti;f=>BzN#mAIAR&a&5_QC5>OACxu4
z*ACk;l$E8-c4hwWEqepGcCwZ#c%kfVXs(uh02HQF1GQ7u0DY#=?$nLpvrIFR#m6$7
zIpqu3d^qJB;Ib)Ofvcy`?Ake{2JtgfegR&YLcP&E<pARUQ9WC)%GR~jOszw%Ob_z;
zwFlM2bt=UlpGrOlFpQr{YcPN6Nm#xxm1gNH4Cgb;>Z!CUS2N468Mc(3gJqI0S$@w_
zcQgHwsSVH{XE?!^a(&HK^!cgRq5pf|w%*5-aco`lTT^c#mx5CHJ;d8E^elJ4H#)5h
zTS{FKS8CEy>VbIYa%$I848s^EGR$E(iQ#MICRi?HxT?Gz;v3340JoG=|NM76{C8~r
zUW(#h8H?}BX%zOd`dlpUiqhXG?G5Z(`V{c5^1(o-Y0m(S(`W=cOdElC|7nzKIK%8|
zvCvGImJBSN_8f55H1eaAGQpSH^1-xhXa<xO{3rUB((y=D>}T|N3GvctWxy5FDk#@9
z>d%wYW+Q%e8u?V##a*U%m`?Tam`?h3)8B+m_vvJ>jEFL4TF;QdEH$o`P3u(KbZYg)
z>5sOeg6ZF!{w`7%FnoA6Rzm;x+4#ZqWzesf{xR_L>GaOw>*;F|Zz=r(_#b)uyPqwr
zbqfA8eFO3yWc5GBu%6)+W^;$3dIt4|j$!M(ZD!D1O`Nd>_|c4i0sn7na&ZQ&xN8jm
zV(3uu3;aA=L2GS71?_T5{O{{xYXz-tCG~3$X3tir%PR-qL0P8?dc0CM0{;<%bBQb7
z7t^mm(=+pQcn^$UA{OofRqSM<!l^`yxC35zCK}Epc#0@aBr5!hn+vcbP9rKI2xk#I
zQ4uE*Jm(bW5EXvk&j<Jv&LApbAWk4EVK7c3Dx5p~fzJp5z%ZdbaD?zUFbbYjICFFc
zCJ0@C$?%7#M&i7p!U?1oFau{5m5>GBDx5$10Skowz*3Z;!ii%LaEdSlI2GlngdcIj
z!IPM9z7cV12t|B1&N(Wa4~7H(jT4WEb3z2-wJ2W{_5xKnQ^WxG;}oP44xldh%}JmN
zCy6BBAt42L81)iy;uwW^oiG~lqd=8#4Cf>fCy+G6kE6aK&Kg;W*E2kW(~~Hi1>(0K
z(E^ol9%m>#RaPhjUc{+N6fOZ(IGKz?{12cC=avb;E5bzJRh+d{!Zn<>M4V$@Li`3!
zT_R2}#faa;$xFn!rUdan(H|<DZKgug48-V)(-4<{7+G-!&|Q25=p)Vq8pT;ae{l}5
zgE$x1MVtrwu0V{eI3MxuK$Vawz75P37Xb6b_ke}sLST_t2^=GS2plJV1RO6eMXm`z
zl`v6U4tzme0h}U!44f&h1kMpx1K$wW!g3x^h2L!a4EUC~4!A)461YtK3b<U{0Q^+k
z2>eXk1l%HS0sbU@2iz@g2mUPXfS)};m2gtr3Dm280J^Jo0drKlffcGfz)w}b06$ah
z1#VF71Ae1A0NkiL2;8AM46ISr!P`!tO86Ik@lh0h0HQ3_ap2FYlfXTy)4+qOGe|uI
z#N1GwL;MI3b3=6jcv^J{Sg-m6cw2P^D5|dkoz*vhCiP9=Q|do~;p%2!lKM6<Tm2U>
zM|}^Ns}@C3$OEFc)oNgoS_V!~YoUK0s1jaLJ0Sil5Phq50?t*p0luSlfqnr{CA_P4
z11?g#LsJP<2_L9E5dRQ}epY({m#ck%Rcc@03bh%yUTpz>qxJ{>pbmijk3f~MSKS`C
zU;Q{V2Y{G?>W)BHsWUWgK$S3D>H-{r->*~&5mFCeq|^%-g<r75)4HX;z!<3?Fjndh
z%$5cMbEHAQ0%-`aPznYXNyC6+q)_1VQaEs;G#ofbiU7VYMFHnZF~B#aIN*FK0r-}b
z1Y9Vk06&mM0Y8*R0~bqaz>lO1;1Ved__>sWI<Et&gfFB##J>cpgiTUDaI;hh+%Am)
zelLv!?vN$`f0HHxk4i59k4Y~9^>Q)LBA38}6^Jz@mjT<!Q-J~UG+>}S1K3`E1=vTP
z2^=8L0uGet0E6YZz+v({;4|`kV5s~yFic(m442;nCdmtd$#NwyMg9;tO8yA=oV*m6
zCNBr3%PW8x^2fkTc_lDQUJcBa*8&UW&w#JU>wvGyUjk>!Ujbi}HvnhJ8-a7=O~ASG
z7PRFJph}o0e+OJDZwIcIcK|obJApsTKLGd0yMPDf-M~6|5Adk`3-Fk{7x=rp4|rTY
z06ZZd1UAZt;rS*|B{a!(i2n)1t|cEsycwtxTIA!1-v+9LJMu~3U-D_7pg9B7XwCsU
zYAygfYc2tUG=BiQXs!UeYOVphX>I^}Xl?>~Y5s(_-auTTG|h-V2}J*EZUYBu{sIot
z+yf5Li1<&4p+Jm?MvZs~5aXhe5q}1#5}ws)fiW5fV64Uon4oC`9I0^u=4sr3HjO(l
zU*myX1wiz?#tS%3;{zP8@dZxQn2|aOh#gX6LHtFaN_a`*kNC?#l~AGy0M6002fm?s
z95_$Y5%{L2GjP793-BFHH{b$I58!*6UciN#KJc&zh;^;$3tXY;2mDymANYx8AaJE-
z5O9@d2=JgL81{#NxE^VS0WWJpflZol;9bpdphg=3Y^#j|dTL{UMr|C>q)h;twMjrf
zZ3?iXb`-pI0%CNuqk*y7G+>-I0~oK(0w!p4fQi~XV3IZ;_`J3dI9WReI9)pqI9odb
z_?C7e@LlZ-!1uK;0T*hEfs3>yz>V56l=UqTYgRiI@y$S7Bec^H-wMPt{<Jd?-v-25
z*1m%H_du*=?Mz^eb{24_b`JFa0%EVz&ISIcod?Y>Ag(pq`H1fZV$N&dMtlzt?<KSg
z5dQ^;_Y&IofP1wIfxl`if%~){0uO3G0v^&X1s>Ke2OiO`03OwTjJ(HySR>k%h#v=H
zjc8W`Piof!&uc#eUec~ZY6B40ckP$JTiUOHE!qvh+uDu5yV^~#xd+4=(QQFo1mfMD
z?mM7bw;dV@s1n-fb^zPzb^={=KLGu7yMR{RZlJ$z53rr?7hr&HFR-(2A23LF0N7o3
z5ZFU^7}!%+2Yf<z4A@t99N1rX5;#D28aPmQ1~^Q24)~1j0x(o}2^gmP0~oHm0vxWp
z1{|Tg0gTYy1V-!r1jgu^feE_Xz(n0&z~^-LQ2#U__A#A^=ep<U)WBSw49wGMf%!TI
zV1dpFSg30Q9HVmqPSCjlr|8`AA5Bw%SOq!{;3qmS;7XkjaFxy%xLRihuF+Y5Yjys>
zuXO>y-MaR`!@9@e;Rq1BoUSAAsID{ctgZ|6=YSY5T{qwbT@T<zT`%AzT_4~dy1u~6
zx_-bby8gg%4g-PX9R>j>I1B++I0OS{It&9YbO;50;1CX6;xHWkmjZEhc8CD3c8CIg
z<`4t?!XXa$wL=1MgF_PV8;2C&CWleLy$+*+zdEF;#|Sogh;EEfAP4IL#5dc#+$KPL
ztIcHKJ8epV@3xuJCR`lhI!qTY*0_f1a>Z3{;lMR+!-1c=MF2l{ivoV(76V-G76<&=
z%?bF8TLSP~w<O?Zw-n%3w^6`tZli(UyQS%H1#@@6Z%Iq;<M7^2<30hXb9aKq(cJ;5
z&hBPt+PY7~?@9-`o8?7fS6D6*yTfvk*wfttO>bB(5}$zOBJoLBE*4Xfx>$V9Jwvxx
zOh@WsF%zka#cZUm6sz2`@IPqI!ml=WoJInK1GdgMO*|zG#rY!|@9BTFJ%>P_Yy4`X
z*8$thu$hWLpI5vCt`t7OrxM%n`NA)F|9=v87Z9%Def1$*olPsc;<JDQwg7w*&<FSY
zW5tnTCgd^V3t~BVHo|duJ#IS%eCr{pb;=^7EJIi&ehH-4W^sqOhsPDo!*~#Br^Jim
z4e@p>tG24+HgDAdTYFU(U@)Wuw&94;D@m1xSe|M;@MW$m2fv2!rs{pJA<K_cpQzSx
zd5dbN>Q~!t)jn07>J)UB5RTiL7@o4J)k@pW*!1^f=WPM4;+JesJS1JV4Sz(wX3PAW
zrqNdN54t~X@2Y>bEmp5kuUGF-?}o*GgkNnfw!dtu{1a+9|GfID`nFml=_Rw&LFz3H
zlES1IDMiYZ3Z+R>ne?jkhV-tqSgMvjmo`e@OS`50(lP0*bVa%)iL#^YF8j&>ayR)Y
zIYf?>6Xi7dfNiW?ELX_$<ag!8a<#lp{#M>8?~#9#&&o~mJz1x5(-<}FHQhA*G{G9j
z{0L2=CQZ{eKTqSHKSA@dW~#<B|5eRA&3l@~niZN)HS0CsX@1i9<{!`;*Idv%7}INr
zH)}+#gVsaqukEbuqkUR?z!s{F(WYoKv;~My)Rt%~w6ALyXcucg)_xAnM(y|7-P--y
zW7@OYtJ)T=gU(%N(zVxh)eY29uY~HNbV<52U7l{7u2ff{o3DFc_Yq5>x!!`8HD8HY
z^C=#1Ukc#zW34og-Pd(|NZYZMKIoB@poh}B{VlcIBk4W=!J_BiZ2J78RiA&bdy-kM
zL7UejY(}U-_*u6fcod;t*8seU@E3yY@T;wjgNK93LD?<(=MP2x@cbmUgG3{qBP0R$
zVMU~Y$;$<t$lq1xK^lkf62er37TX%#EXM0~n{_q1pLK6D>BIbw8RK^c^LMN2bvJc?
z>12mC4x5;ECvZ>xLEv$Ofx2@*shplmrNIqndVT`#yyJgp*)#Y^!Tzq~Kk*es=u>9<
z-<ABK|Dc<(g3=$h`|I;Zb+_`r`v+a^I=gQw|G2k+^S>n65c0)NLIFY{LJ`6kgs}+Y
z5XK`+KzJTuBElqu7Z6@VcnRTUgkprr2qg%m2xSOU#IC|rag<PwFb!ck!VH88gjWz=
zMVN{38Uj8U6=oyML3kZuF2WlK^AO$?ONIGj1@0)kD!h&G4#EQ5$#_@XCcKC6zPL+R
zh_Fbk#gh#B;4{=d_zblVK0^)1XQ=Vw5-|mzu%?L15SHW9*D8b+2-OH5<CEA=5LV*T
zSn3-IcgE<?jkA$+2hKw|hj4y|b1CO3ocDA7jq@SSZN)Zh2DBAjSUE!=(_b*>D9*Du
zSE<~XeU%D>g}?nOE92k5RN>!L_*oSE9RiblNY#tUM|k=X=xMGT;rgT8?kHr^A64OJ
zF!1*~xBs2n|BiGu(<|vGc)k-n-wEWS^b@K<lwCN*^Pl4RPx1VxU?;J3#jc+Fspo#`
zxu1IYA-j6jFmflH<^Ilce`mSBv)tcV*vrgLu|LoKp67ngbHC@g-}CTG_UBc&y^6n!
z-2X-H|04H)k^8^M{a-{rTDKQ@z6M@S123n6m(#$@Y2f8Fz@G9osA8x%;W97pGB58k
zFYhuh?=mm%GB58k@@rW>CI3}k?p0pyRbK8@UhY+1?p0pyRg_Elud0%$c;PxP|2i-K
zIxqh^FaJ6(|2i-KIxqh^{ODMI#ZM!zM<cICBd<pzuSX-VM<cICBd<pz>Op=QRrt9M
z{5A3VH1Ya0@%l9J`ZV$SH1Ya0@%l9J`ZU3x1M{Q!yT$8ui`VNGuh%VJuUoucw|Kp7
z@p|Dm*IB)8p<d+gmMV*?C$#YTweb42@cOmz`nB--web42@cOmz`nB--wZN|<^GAL$
z!_~Cj@vR}oIN)(^%k{3D4P5WRWlt`9b2f4|arWaJz<Cs73HJq+@|JS_axm=^%hmZn
zeD1>K6_9B^SfQT6^eegjYM#ED+pp#FT5i9V+ppvHU-I-Xx&2pM{)*dw#qBpTdr8>D
z^KIe0kMjY}=Q!Wy+(lCM%WjM%p%<6?aPG^wALss@2XY?7c?joV#*#3M%b{FO<8lV)
zEY3Nc^BCj038wzcmuNqiaIaJ8?=f6IhUo=i9Mj{|AI=jwzr?wia|!1%&Qm#0<2-}&
zE1YLCmT(spKPQ9o=W?FMSioIWrN5SQ{+RP>&ikY;Y`hPEsT~I-<@#}u%LgITyf`Q+
z*MY-af0*kJL$5~qVM*EF>v(z{Pp{+Ybx5cEy-rg0>to#R7`Hpd?T&G~W3Z$B`k18b
z*T=d2ac+N{+aKrl$GQD+*wemyTvGPUlRV!^p6?{jcarBj$@87$`A#Aq?VBehWxqSk
z^PlGVPxJhzdH&Np|7o88G|zt;`Dwp9Eh+oc8Sdu{_j88(Im7*&;eO6=KWDg~Gu+P^
z_@VvjjHK*O?y@p&9$*?b4_O&EFD`pQrg8I<m2vaodLOR$fu6?AM^?tom#6#kbYGtC
zi*y<{Us)M9Gq*EyJ2SU4b2~HaXxz-QGHw=bZ{hY9Zg1iC7H)5WJ&l`1R>sYr=kw?J
z{CPfqp3k4>^XK{ek&njBUslE~faee3`2%?V0G>a9=MUid19<)b<fm~9kd<+3&;7LL
ze%f<C?YW=!+)sP%r#<)6p8IJJKQwObWo6t%jj|rQaqhu+h(;ODU@(nmutpirVO$;t
znZ|RNMj6jgt`Ft<Q0QqqLp92HhV%4ro*vHA!;wzo8Lm;rb2zsf&h3VCyW!k!IP7RV
zhijDajNtYW+&+TaM{xTHZXW@A8qWxgGM-U9Ulh+5#q&k+d{I1K6weohd^Da>8f83V
zc>WlkKZfUz;rU~D{urJ=hUbq#ej3jhjWV8b+)o_$6UY6;aX)d~PaO9X$Nj`{KXLFw
z;~A$>#`6LnzmFYgTqVKXc?lTnk@Mr6J2J-g%6T<QU+b*ck87jwY8U)07xJ%VjQQf)
zMi?wk#3vxj5!MMV_%Nd#KE;a>L-9@22ywG|xv&}Xey{<dtF&Br0^w-{o1{@?g1c(0
zsv_wLl}#F;8V|Vw;YEZg2(Kc%iO>Qc1>o5%zFeqgOyyd{IH{AIfZ!r_lB*qT@*4aG
zW={!e2xrw3@wwqd)cNPjG@q2eQxw1QK(_0N_uscm3m*4;NKsKlM*dh~%*3p5&*$WH
z%`Pfp#`oF_S3>S*dyq#EzVi=eQ;=2xSp=e-z`c?X8y6Dy?CH9g%EG(hl|OVFGT_qn
z!)ygTl{)l={G#lMsn6T;$ByeVW?WX`#MDeurN)w`YXoV!j?d1#U*7-hh=}iX;9HY|
zQ2uZ|@d*JG-Ty&Pc3}v~Si?Wk_Q3ysRO3e(@$K+9e9s{f-?4~AEF9mRh=hzM7U0_*
zQOt6SbOpakCSoNkneD9XF*IKvz7s*2Xlz7y%@Cf4A3W~?-<Al+cg=J0T?qOMWVzyz
zisv8+6OoQz-e=!LAIsA5Eg-1_iW5<%NwCU?Ro*{%l9)|*v|D-g7BZ<1a7Wk|d4o~f
z7`$?jdlE{)P6SOBzNex1v%(|QfGl1@%JWFEvN}Ew?utGbhVRbPUzp&2-`{vv=VGKP
zIhFK$l$-+(V|h!czE<?9jg>Wyl}`0Cz>mF0LXcx3>O<`t|4{oM<g?zd^F;XTg<3s<
z(47SuZ(S>YiL3?_;cXo1L4S|h560{f*+@*fU)!QqEqPFG*H-0r6|ylxv^Fd7Z5|Qd
z^~pi&GN7Rz9xoKL7UZF=lVB5u^8c&8unLc%HF(+xJdK6-9M)HOb|dnV#)|)Kpb_nj
zSeN^fa@7lCZHVG!(nwNG?0rfSji=D6@Bg_iVQeg-;b$Cb@B+qRQmdY5o&P@{gE0IT
zhlr7F?dQ>vcz7JF=tV19m&-#Rd?QN0b5v<8hhRobME%F04~x)0R;(hLR}V(@VPDAj
c|Ns7X_rM7Wcdc>P<mvz2&HVqZ`{y3`KgbG5VE_OC

literal 0
HcmV?d00001

diff --git a/Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.xml b/Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.xml
new file mode 100644
index 0000000..b1f7638
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Rhino Mocks/Rhino.Mocks.xml	
@@ -0,0 +1,5624 @@
+<?xml version="1.0"?>
+<doc>
+    <assembly>
+        <name>Rhino.Mocks</name>
+    </assembly>
+    <members>
+        <member name="T:Rhino.Mocks.Arg`1">
+            <summary>
+            Defines constraints and return values for arguments of a mock.
+            Only use Arg inside a method call on a mock that is recording.
+            Example: 
+              ExpectCall( 
+                mock.foo(
+                  Arg&lt;int&gt;.Is.GreaterThan(2),
+                  Arg&lt;string&gt;.Is.Anything
+                ));
+            Use Arg.Text for string specific constraints
+            Use Arg&lt;ListClass&gt;.List for list specific constraints
+            </summary>
+            <typeparam name="T"></typeparam>
+        </member>
+        <member name="M:Rhino.Mocks.Arg`1.Matches(System.Linq.Expressions.Expression{System.Predicate{`0}})">
+            <summary>
+            Register the predicate as a constraint for the current call.
+            </summary>
+            <param name="predicate">The predicate.</param>
+            <returns>default(T)</returns>
+            <example>
+            Allow you to use code to create constraints
+            <code>
+            demo.AssertWasCalled(x => x.Bar(Arg{string}.Matches(a => a.StartsWith("b") &amp;&amp; a.Contains("ba"))));
+            </code>
+            </example>
+        </member>
+        <member name="M:Rhino.Mocks.Arg`1.Matches(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Define a complex constraint for this argument by passing several constraints
+            combined with operators. (Use Is in simple cases.)
+            Example: Arg&lt;string&gt;.Matches(Is.Equal("Hello") || Text.EndsWith("u"));
+            </summary>
+            <param name="constraint">Constraints using Is, Text and List</param>
+            <returns>Dummy to satisfy the compiler</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Arg`1.Ref(Rhino.Mocks.Constraints.AbstractConstraint,`0)">
+            <summary>
+            Define a Ref argument.
+            </summary>
+            <param name="constraint">Constraints for this argument</param>
+            <param name="returnValue">value returned by the mock</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Arg`1.Out(`0)">
+            <summary>
+            Define a out parameter. Use it together with the keyword out and use the
+            Dummy field available by the return value.
+            Example:  mock.foo( out Arg&lt;string&gt;.Out("hello").Dummy );
+            </summary>
+            <param name="returnValue"></param>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Arg`1.Is">
+            <summary>
+            Define a simple constraint for this argument. (Use Matches in simple cases.)
+            Example: 
+              Arg&lt;int&gt;.Is.Anthing
+              Arg&lt;string&gt;.Is.Equal("hello")
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Arg`1.List">
+            <summary>
+            Define Constraints on list arguments.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Arg">
+            <summary>
+            Use the Arg class (without generic) to define Text constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Arg.Is``1(``0)">
+            <summary>
+            Evaluate an equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="arg">The object the parameter should equal to</param>
+        </member>
+        <member name="P:Rhino.Mocks.Arg.Text">
+            <summary>
+            Define constraints on text arguments.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.ArgManager">
+            <summary>
+            Used to manage the static state of the Arg&lt;T&gt; class"/>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.ArgManager.Clear">
+            <summary>
+            Resets the static state
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.ArgManager.GetAllReturnValues">
+            <summary>
+            Returns return values for the out and ref parameters
+            Note: the array returned has the size of the number of out and ref 
+            argument definitions
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.ArgManager.GetAllConstraints">
+            <summary>
+            Returns the constraints for all arguments.
+            Out arguments have an Is.Anything constraint and are also in the list.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="T:Rhino.Mocks.BackToRecordOptions">
+            <summary>
+            What should BackToRecord clear
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.BackToRecordOptions.None">
+            <summary>
+            Retain all expectations and behaviors and return to mock
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.BackToRecordOptions.Expectations">
+            <summary>
+            All expectations
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.BackToRecordOptions.EventSubscribers">
+            <summary>
+            Event subscribers for this instance
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.BackToRecordOptions.OriginalMethodsToCall">
+            <summary>
+            Methods that should be forwarded to the base class implementation
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.BackToRecordOptions.PropertyBehavior">
+            <summary>
+            Properties that should behave like properties
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.BackToRecordOptions.All">
+            <summary>
+            Remove all the behavior of the object
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.AbstractConstraint">
+            <summary>
+            Interface for constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_BitwiseAnd(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            And operator for constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_LogicalNot(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Not operator for constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_BitwiseOr(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Or operator for constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_False(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Allow overriding of || or &amp;&amp;
+            </summary>
+            <param name="c"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AbstractConstraint.op_True(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Allow overriding of || or &amp;&amp;
+            </summary>
+            <param name="c"></param>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.AbstractConstraint.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.PublicFieldIs">
+            <summary>
+            Constrain that the public field has a specified value
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.PublicFieldConstraint">
+            <summary>
+            Constrain that the public field matches another constraint.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicFieldConstraint.#ctor(System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PublicFieldConstraint"/> instance.
+            </summary>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="constraint">Constraint to place on the public field value.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicFieldConstraint.#ctor(System.Type,System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PublicFieldConstraint"/> instance, specifying a disambiguating
+            <paramref name="declaringType"/> for the public field.
+            </summary>
+            <param name="declaringType">The type that declares the public field, used to disambiguate between public fields.</param>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="constraint">Constraint to place on the public field value.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicFieldConstraint.Eval(System.Object)">
+            <summary>
+            Determines if the object passes the constraint.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.PublicFieldConstraint.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicFieldIs.#ctor(System.String,System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PublicFieldIs"/> instance.
+            </summary>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="expectedValue">Expected value.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicFieldIs.#ctor(System.Type,System.String,System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PublicFieldIs"/> instance, specifying a disambiguating
+            <paramref name="declaringType"/> for the public field.
+            </summary>
+            <param name="declaringType">The type that declares the public field, used to disambiguate between public fields.</param>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="expectedValue">Expected value.</param>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.PropertyIs">
+            <summary>
+            Constrain that the property has a specified value
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.PropertyConstraint">
+            <summary>
+            Constrain that the property matches another constraint.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PropertyConstraint.#ctor(System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PropertyConstraint"/> instance.
+            </summary>
+            <param name="propertyName">Name of the property.</param>
+            <param name="constraint">Constraint to place on the property value.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PropertyConstraint.#ctor(System.Type,System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PropertyConstraint"/> instance, specifying a disambiguating
+            <paramref name="declaringType"/> for the property.
+            </summary>
+            <param name="declaringType">The type that declares the property, used to disambiguate between properties.</param>
+            <param name="propertyName">Name of the property.</param>
+            <param name="constraint">Constraint to place on the property value.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PropertyConstraint.Eval(System.Object)">
+            <summary>
+            Determines if the object passes the constraint.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.PropertyConstraint.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PropertyIs.#ctor(System.String,System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PropertyIs"/> instance.
+            </summary>
+            <param name="propertyName">Name of the property.</param>
+            <param name="expectedValue">Expected value.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PropertyIs.#ctor(System.Type,System.String,System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.PropertyIs"/> instance, specifying a disambiguating
+            <paramref name="declaringType"/> for the property.
+            </summary>
+            <param name="declaringType">The type that declares the property, used to disambiguate between properties.</param>
+            <param name="propertyName">Name of the property.</param>
+            <param name="expectedValue">Expected value.</param>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.TypeOf">
+            <summary>
+            Constrain that the parameter must be of the specified type
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TypeOf.#ctor(System.Type)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.TypeOf"/> instance.
+            </summary>
+            <param name="type">Type.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TypeOf.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.TypeOf.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Same">
+            <summary>
+            Constraint that determines whether an object is the same object as another.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Same.#ctor(System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.Equal"/> instance.
+            </summary>
+            <param name="obj">Obj.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Same.Eval(System.Object)">
+            <summary>
+            Determines if the object passes the constraints.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Same.Message">
+            <summary>
+            Gets the message for this constraint.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.PredicateConstraint`1">
+            <summary>
+            Evaluate a parameter using constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
+            <summary>
+            Create new instance 
+            </summary>
+            <param name="predicate"></param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PredicateConstraint`1.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.PredicateConstraint`1.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.LambdaConstraint">
+            <summary>
+            A constraint based on lambda expression, we are using Expression{T} 
+            because we want to be able to get good error reporting on that.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.LambdaConstraint.#ctor(System.Linq.Expressions.LambdaExpression)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Constraints.LambdaConstraint"/> class.
+            </summary>
+            <param name="expr">The expr.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.LambdaConstraint.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+            <param name="obj"></param>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.LambdaConstraint.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.CollectionEqual">
+            <summary>
+            Constrain that the list contains the same items as the parameter list
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.CollectionEqual.#ctor(System.Collections.IEnumerable)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.CollectionEqual"/> instance.
+            </summary>
+            <param name="collection">In list.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.CollectionEqual.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.CollectionEqual.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.OneOf">
+            <summary>
+            Constrain that the parameter is one of the items in the list
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.OneOf.#ctor(System.Collections.IEnumerable)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.OneOf"/> instance.
+            </summary>
+            <param name="collection">In list.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.OneOf.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.OneOf.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.IsIn">
+            <summary>
+            Constrain that the object is inside the parameter list
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsIn.#ctor(System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.IsIn"/> instance.
+            </summary>
+            <param name="inList">In list.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsIn.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.IsIn.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.CollectionCount">
+            <summary>
+            Applies another AbstractConstraint to the collection count.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.CollectionCount.#ctor(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.CollectionCount"/> instance.
+            </summary>
+            <param name="constraint">The constraint that should be applied to the collection count.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.CollectionCount.Eval(System.Object)">
+            <summary>
+            Determines if the parameter conforms to this constraint.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.CollectionCount.Message">
+            <summary>
+            Gets the message for this constraint.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.ListElement">
+            <summary>
+            Applies another AbstractConstraint to a specific list element.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListElement.#ctor(System.Int32,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.ListElement"/> instance.
+            </summary>
+            <param name="index">The zero-based index of the list element.</param>
+            <param name="constraint">The constraint that should be applied to the list element.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListElement.Eval(System.Object)">
+            <summary>
+            Determines if the parameter conforms to this constraint.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.ListElement.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.KeyedListElement`1">
+            <summary>
+            Applies another AbstractConstraint to a specific generic keyed list element.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.KeyedListElement`1.#ctor(`0,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:KeyedListElement"/> instance.
+            </summary>
+            <param name="key">The key of the list element.</param>
+            <param name="constraint">The constraint that should be applied to the list element.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.KeyedListElement`1.Eval(System.Object)">
+            <summary>
+            Determines if the parameter conforms to this constraint.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.KeyedListElement`1.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.ContainsAll">
+            <summary>
+            Constrains that all elements are in the parameter list
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ContainsAll.#ctor(System.Collections.IEnumerable)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Constraints.ContainsAll"/> class.
+            </summary>
+            <param name="these">The these.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ContainsAll.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+            <param name="obj"></param>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.ContainsAll.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Or">
+            <summary>
+            Combines two constraints, constraint pass if either is fine.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Or.#ctor(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.And"/> instance.
+            </summary>
+            <param name="c1">C1.</param>
+            <param name="c2">C2.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Or.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Or.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Not">
+            <summary>
+            Negate a constraint
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Not.#ctor(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.And"/> instance.
+            </summary>
+            <param name="c1">C1.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Not.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Not.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.And">
+            <summary>
+            Combines two constraints
+            </summary>
+            <remarks></remarks>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.And.#ctor(Rhino.Mocks.Constraints.AbstractConstraint,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.And"/> instance.
+            </summary>
+            <param name="c1">C1.</param>
+            <param name="c2">C2.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.And.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.And.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Like">
+            <summary>
+            Constrain the argument to validate according to regex pattern
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Like.#ctor(System.String)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.Like"/> instance.
+            </summary>
+            <param name="pattern">Pattern.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Like.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Like.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Contains">
+            <summary>
+            Constraint that evaluate whatever an argument contains the specified string.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Contains.#ctor(System.String)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.Contains"/> instance.
+            </summary>
+            <param name="innerString">Inner string.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Contains.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Contains.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.EndsWith">
+            <summary>
+            Constraint that evaluate whatever an argument ends with the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.EndsWith.#ctor(System.String)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.EndsWith"/> instance.
+            </summary>
+            <param name="end">End.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.EndsWith.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.EndsWith.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.StartsWith">
+            <summary>
+            Constraint that evaluate whatever an argument start with the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.StartsWith.#ctor(System.String)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.StartsWith"/> instance.
+            </summary>
+            <param name="start">Start.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.StartsWith.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.StartsWith.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Equal">
+            <summary>
+            Constraint that evaluate whatever an object equals another
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Equal.#ctor(System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.Equal"/> instance.
+            </summary>
+            <param name="obj">Obj.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Equal.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Equal.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Anything">
+            <summary>
+            Constraint that always returns true
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Anything.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.Anything.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.ComparingConstraint">
+            <summary>
+            Constraint that evaluate whatever a comparable is greater than another
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ComparingConstraint.#ctor(System.IComparable,System.Boolean,System.Boolean)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Constraints.ComparingConstraint"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ComparingConstraint.Eval(System.Object)">
+            <summary>
+            Determines if the object pass the constraints
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.ComparingConstraint.Message">
+            <summary>
+            Gets the message for this constraint
+            </summary>
+            <value></value>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.#ctor(System.Object)">
+            <summary>
+            Initializes a new constraint object.
+            </summary>
+            <param name="expected">The expected object, The actual object is passed in as a parameter to the <see cref="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.Eval(System.Object)"/> method</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.Eval(System.Object)">
+            <summary>
+            Evaluate this constraint.
+            </summary>
+            <param name="obj">The actual object that was passed in the method call to the mock.</param>
+            <returns>True when the constraint is met, else false.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.CheckReferenceType(System.Object,System.Object)">
+            <summary>
+            Checks if the properties of the <paramref name="actual"/> object
+            are the same as the properies of the <paramref name="expected"/> object.
+            </summary>
+            <param name="expected">The expected object</param>
+            <param name="actual">The actual object</param>
+            <returns>True when both objects have the same values, else False.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.CheckValue(System.Object,System.Object)">
+            <summary>
+            
+            </summary>
+            <param name="expected"></param>
+            <param name="actual"></param>
+            <returns></returns>
+            <remarks>This is the real heart of the beast.</remarks>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.CheckProperties(System.Object,System.Object)">
+            <summary>
+            Used by CheckReferenceType to check all properties of the reference type.
+            </summary>
+            <param name="expected">The expected object</param>
+            <param name="actual">The actual object</param>
+            <returns>True when both objects have the same values, else False.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.CheckFields(System.Object,System.Object)">
+            <summary>
+            Used by CheckReferenceType to check all fields of the reference type.
+            </summary>
+            <param name="expected">The expected object</param>
+            <param name="actual">The actual object</param>
+            <returns>True when both objects have the same values, else False.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.CheckCollection(System.Collections.IEnumerable,System.Collections.IEnumerable)">
+            <summary>
+            Checks the items of both collections
+            </summary>
+            <param name="expectedCollection">The expected collection</param>
+            <param name="actualCollection"></param>
+            <returns>True if both collections contain the same items in the same order.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.BuildPropertyName">
+            <summary>
+            Builds a propertyname from the Stack _properties like 'Order.Product.Price'
+            to be used in the error message.
+            </summary>
+            <returns>A nested property name.</returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.AllPropertiesMatchConstraint.Message">
+            <summary>
+            Rhino.Mocks uses this property to generate an error message.
+            </summary>
+            <value>
+            A message telling the tester why the constraint failed.
+            </value>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.IsArg`1">
+            <summary>
+            Provides access to the constraintes defined in the class <see cref="T:Rhino.Mocks.Constraints.Is"/> to be used in context
+            with the <see cref="T:Rhino.Mocks.Arg`1"/> syntax.
+            </summary>
+            <typeparam name="T">The type of the argument</typeparam>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.GreaterThan(System.IComparable)">
+            <summary>
+            Evaluate a greater than constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be greater than</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.LessThan(System.IComparable)">
+            <summary>
+            Evaluate a less than constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be less than</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.LessThanOrEqual(System.IComparable)">
+            <summary>
+            Evaluate a less than or equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be less than or equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.GreaterThanOrEqual(System.IComparable)">
+            <summary>
+            Evaluate a greater than or equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be greater than or equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.Equal(System.Object)">
+            <summary>
+            Evaluate an equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="obj">The object the parameter should equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.ConvertObjectTypeToMatch(System.IComparable)">
+            <summary>
+            Converts the <see cref="T:System.IComparable"/>object type to a better match if this is a primitive type.
+            </summary>
+            <param name="obj">The obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.ConvertObjectTypeToMatch(System.Object)">
+            <summary>
+            Converts the object type to match.
+            </summary>
+            <remarks>
+            Because of implicit conversions and the way ArgConstraints this method is needed to check
+            object type and potentially change the object type for a better "match" so that obj1.Equals(obj2)
+            will return the proper "answer"
+            </remarks>
+            <param name="obj">The obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.NotEqual(System.Object)">
+            <summary>
+            Evaluate a not equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="obj">The object the parameter should not equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.Same(System.Object)">
+            <summary>
+            Evaluate a same as constraint.
+            </summary>
+            <param name="obj">The object the parameter should the same as.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.NotSame(System.Object)">
+            <summary>
+            Evaluate a not same as constraint.
+            </summary>
+            <param name="obj">The object the parameter should not be the same as.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.Equals(System.Object)">
+            <summary>
+            Throws NotSupportedException. Don't use Equals to define constraints. Use Equal instead.
+            </summary>
+            <param name="obj"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.IsArg`1.GetHashCode">
+            <summary>
+            Serves as a hash function for a particular type.
+            </summary>
+            <returns>
+            A hash code for the current <see cref="T:System.Object"/>.
+            </returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.IsArg`1.Anything">
+            <summary>
+            A constraints that accept anything
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.IsArg`1.Null">
+            <summary>
+            A constraint that accept only nulls
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.IsArg`1.NotNull">
+            <summary>
+            A constraint that accept only non null values
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Constraints.IsArg`1.TypeOf">
+            <summary>
+            A constraint that accept only value of the specified type.
+            The check is performed on the type that has been defined
+            as the argument type.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.ListArg`1">
+            <summary>
+            Provides access to the constraints defined in the class <see cref="T:Rhino.Mocks.Constraints.Text"/> to be used in context
+            with the <see cref="T:Rhino.Mocks.Arg`1"/> syntax.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.IsIn(System.Object)">
+            <summary>
+            Determines whether the specified object is in the parameter.
+            The parameter must be IEnumerable.
+            </summary>
+            <param name="obj">Obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.OneOf(System.Collections.IEnumerable)">
+            <summary>
+            Determines whatever the parameter is in the collection.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.Equal(System.Collections.IEnumerable)">
+            <summary>
+            Determines that the parameter collection is identical to the specified collection
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.Count(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Determines that the parameter collection has the specified number of elements.
+            </summary>
+            <param name="constraint">The constraint that should be applied to the collection count.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.Element(System.Int32,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Determines that an element of the parameter collections conforms to another AbstractConstraint.
+            </summary>
+            <param name="index">The zero-based index of the list element.</param>
+            <param name="constraint">The constraint which should be applied to the list element.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.ContainsAll(System.Collections.IEnumerable)">
+            <summary>
+             Determines that all elements of the specified collection are in the the parameter collection 
+            </summary>
+            <param name="collection">The collection to compare against</param>
+            <returns>The constraint which should be applied to the list parameter.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.Equals(System.Object)">
+            <summary>
+            Throws NotSupportedException. Don't use Equals to define constraints. Use Equal instead.
+            </summary>
+            <param name="obj"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.ListArg`1.GetHashCode">
+            <summary>
+            Serves as a hash function for a particular type.
+            </summary>
+            <returns>
+            A hash code for the current <see cref="T:System.Object"/>.
+            </returns>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.OutRefArgDummy`1">
+            <summary>
+            Provides a dummy field to pass as out or ref argument.
+            </summary>
+            <typeparam name="T"></typeparam>
+        </member>
+        <member name="F:Rhino.Mocks.Constraints.OutRefArgDummy`1.Dummy">
+            <summary>
+            Dummy field to satisfy the compiler. Used for out and ref arguments.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.PublicField">
+            <summary>
+            Central location for constraints for object's public fields
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.Value(System.String,System.Object)">
+            <summary>
+            Constrains the parameter to have a public field with the specified value
+            </summary>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="expectedValue">Expected value.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.Value(System.Type,System.String,System.Object)">
+            <summary>
+            Constrains the parameter to have a public field with the specified value.
+            </summary>
+            <param name="declaringType">The type that declares the public field, used to disambiguate between public fields.</param>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="expectedValue">Expected value.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.ValueConstraint(System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Constrains the parameter to have a public field satisfying a specified constraint.
+            </summary>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="publicFieldConstraint">Constraint for the public field.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.ValueConstraint(System.Type,System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Constrains the parameter to have a public field satisfying a specified constraint.
+            </summary>
+            <param name="declaringType">The type that declares the public field, used to disambiguate between public fields.</param>
+            <param name="publicFieldName">Name of the public field.</param>
+            <param name="publicFieldConstraint">Constraint for the public field.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.IsNull(System.String)">
+            <summary>
+            Determines whether the parameter has the specified public field and that it is null.
+            </summary>
+            <param name="publicFieldName">Name of the public field.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.IsNull(System.Type,System.String)">
+            <summary>
+            Determines whether the parameter has the specified public field and that it is null.
+            </summary>
+            <param name="declaringType">The type that declares the public field, used to disambiguate between public fields.</param>
+            <param name="publicFieldName">Name of the public field.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.IsNotNull(System.String)">
+            <summary>
+            Determines whether the parameter has the specified public field and that it is not null.
+            </summary>
+            <param name="publicFieldName">Name of the public field.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.PublicField.IsNotNull(System.Type,System.String)">
+            <summary>
+            Determines whether the parameter has the specified public field and that it is not null.
+            </summary>
+            <param name="declaringType">The type that declares the public field, used to disambiguate between public fields.</param>
+            <param name="publicFieldName">Name of the public field.</param>
+            <returns></returns>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Is">
+            <summary>
+            Central location for constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.GreaterThan(System.IComparable)">
+            <summary>
+            Evaluate a greater than constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be greater than</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.LessThan(System.IComparable)">
+            <summary>
+            Evaluate a less than constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be less than</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.LessThanOrEqual(System.IComparable)">
+            <summary>
+            Evaluate a less than or equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be less than or equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.GreaterThanOrEqual(System.IComparable)">
+            <summary>
+            Evaluate a greater than or equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="objToCompare">The object the parameter should be greater than or equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.Equal(System.Object)">
+            <summary>
+            Evaluate an equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="obj">The object the parameter should equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.NotEqual(System.Object)">
+            <summary>
+            Evaluate a not equal constraint for <see cref="T:System.IComparable"/>.
+            </summary>
+            <param name="obj">The object the parameter should not equal to</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.Same(System.Object)">
+            <summary>
+            Evaluate a same as constraint.
+            </summary>
+            <param name="obj">The object the parameter should the same as.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.NotSame(System.Object)">
+            <summary>
+            Evaluate a not same as constraint.
+            </summary>
+            <param name="obj">The object the parameter should not be the same as.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.Anything">
+            <summary>
+            A constraints that accept anything
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.Null">
+            <summary>
+            A constraint that accept only nulls
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.NotNull">
+            <summary>
+            A constraint that accept only non null values
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.TypeOf(System.Type)">
+            <summary>
+            A constraint that accept only value of the specified type
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.TypeOf``1">
+            <summary>
+            A constraint that accept only value of the specified type
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Is.Matching``1(System.Predicate{``0})">
+            <summary>
+            Evaluate a parameter using a predicate
+            </summary>
+            <param name="predicate">The predicate to use</param>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.List">
+            <summary>
+            Central location for constraints about lists and collections
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.IsIn(System.Object)">
+            <summary>
+            Determines whether the specified obj is in the parameter.
+            The parameter must be IEnumerable.
+            </summary>
+            <param name="obj">Obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.OneOf(System.Collections.IEnumerable)">
+            <summary>
+            Determines whatever the parameter is in the collection.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.Equal(System.Collections.IEnumerable)">
+            <summary>
+            Determines that the parameter collection is identical to the specified collection
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.Count(Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Determines that the parameter collection has the specified number of elements.
+            </summary>
+            <param name="constraint">The constraint that should be applied to the collection count.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.Element(System.Int32,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Determines that an element of the parameter collections conforms to another AbstractConstraint.
+            </summary>
+            <param name="index">The zero-based index of the list element.</param>
+            <param name="constraint">The constraint which should be applied to the list element.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.Element``1(``0,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Determines that an element of the parameter collections conforms to another AbstractConstraint.
+            </summary>
+            <param name="key">The key of the element.</param>
+            <param name="constraint">The constraint which should be applied to the element.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.List.ContainsAll(System.Collections.IEnumerable)">
+            <summary>
+             Determines that all elements of the specified collection are in the the parameter collection 
+            </summary>
+            <param name="collection">The collection to compare against</param>
+            <returns>The constraint which should be applied to the list parameter.</returns>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Property">
+            <summary>
+            Central location for constraints for object's properties
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.Value(System.String,System.Object)">
+            <summary>
+            Constrains the parameter to have property with the specified value
+            </summary>
+            <param name="propertyName">Name of the property.</param>
+            <param name="expectedValue">Expected value.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.Value(System.Type,System.String,System.Object)">
+            <summary>
+            Constrains the parameter to have property with the specified value.
+            </summary>
+            <param name="declaringType">The type that declares the property, used to disambiguate between properties.</param>
+            <param name="propertyName">Name of the property.</param>
+            <param name="expectedValue">Expected value.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.ValueConstraint(System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Constrains the parameter to have a property satisfying a specified constraint.
+            </summary>
+            <param name="propertyName">Name of the property.</param>
+            <param name="propertyConstraint">Constraint for the property.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.ValueConstraint(System.Type,System.String,Rhino.Mocks.Constraints.AbstractConstraint)">
+            <summary>
+            Constrains the parameter to have a property satisfying a specified constraint.
+            </summary>
+            <param name="declaringType">The type that declares the property, used to disambiguate between properties.</param>
+            <param name="propertyName">Name of the property.</param>
+            <param name="propertyConstraint">Constraint for the property.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.IsNull(System.String)">
+            <summary>
+            Determines whether the parameter has the specified property and that it is null.
+            </summary>
+            <param name="propertyName">Name of the property.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.IsNull(System.Type,System.String)">
+            <summary>
+            Determines whether the parameter has the specified property and that it is null.
+            </summary>
+            <param name="declaringType">The type that declares the property, used to disambiguate between properties.</param>
+            <param name="propertyName">Name of the property.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.IsNotNull(System.String)">
+            <summary>
+            Determines whether the parameter has the specified property and that it is not null.
+            </summary>
+            <param name="propertyName">Name of the property.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.IsNotNull(System.Type,System.String)">
+            <summary>
+            Determines whether the parameter has the specified property and that it is not null.
+            </summary>
+            <param name="declaringType">The type that declares the property, used to disambiguate between properties.</param>
+            <param name="propertyName">Name of the property.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Property.AllPropertiesMatch(System.Object)">
+            <summary>
+            constraints the parameter to have the exact same property values as the expected object.
+            </summary>
+            <param name="expected">An object, of the same type as the parameter, whose properties are set with the expected values.</param>
+            <returns>An instance of the constraint that will do the actual check.</returns>
+            <remarks>
+            The parameter's public property values and public field values will be matched against the expected object's
+            public property values and public field values. The first mismatch will be reported and no further matching is done.
+            The matching is recursive for any property or field that has properties or fields of it's own.
+            Collections are supported through IEnumerable, which means the constraint will check if the actual and expected
+            collection contain the same values in the same order, where the values contained by the collection can have properties
+            and fields of their own that will be checked as well because of the recursive nature of this constraint.
+            </remarks>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.Text">
+            <summary>
+            Central location for all text related constraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Text.StartsWith(System.String)">
+            <summary>
+            Constrain the argument to starts with the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Text.EndsWith(System.String)">
+            <summary>
+            Constrain the argument to end with the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Text.Contains(System.String)">
+            <summary>
+            Constrain the argument to contain the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.Text.Like(System.String)">
+            <summary>
+            Constrain the argument to validate according to regex pattern
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Constraints.TextArg">
+            <summary>
+            Provides access to the constraintes defined in the class <see cref="T:Rhino.Mocks.Constraints.Text"/> to be used in context
+            with the <see cref="T:Rhino.Mocks.Arg"/> syntax.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TextArg.StartsWith(System.String)">
+            <summary>
+            Constrain the argument to starts with the specified string
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TextArg.EndsWith(System.String)">
+            <summary>
+            Constrain the argument to end with the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TextArg.Contains(System.String)">
+            <summary>
+            Constrain the argument to contain the specified string
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TextArg.Like(System.String)">
+            <summary>
+            Constrain the argument to validate according to regex pattern
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TextArg.Equals(System.Object)">
+            <summary>
+            Throws NotSupportedException. Don't use Equals to define constraints. Use Equal instead.
+            </summary>
+            <param name="obj"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Constraints.TextArg.GetHashCode">
+            <summary>
+            Serves as a hash function for a particular type.
+            </summary>
+            <returns>
+            A hash code for the current <see cref="T:System.Object"/>.
+            </returns>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates">
+            <summary>
+            This class defines a lot of method signatures, which we will use
+            to allow compatability on net-2.0
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`1">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`2">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`2">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`3">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`3">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`4">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`4">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`5">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`5">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`6">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`6">
+            <summary>
+            dummy
+            </summary>
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`7">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`7">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`8">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`8">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`9">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`9">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`10">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Action`10">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Delegates.Function`11">
+            <summary>
+            dummy
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.DoNotExpect">
+            <summary>
+            Allows expectations to be set on methods that should never be called.
+            For methods with void return value, you need to use LastCall or
+            DoNotExpect.Call() with a delegate.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.DoNotExpect.Call(System.Object)">
+            <summary>
+            Sets LastCall.Repeat.Never() on /any/ proxy on /any/ repository on the current thread.
+            This method if not safe for multi threading scenarios.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.DoNotExpect.Call(Rhino.Mocks.Expect.Action)">
+            <summary>
+            Accepts a delegate that will execute inside the method which
+            LastCall.Repeat.Never() will be applied to.
+            It is expected to be used with anonymous delegates / lambda expressions and only one
+            method should be called.
+            </summary>
+            <example>
+            IService mockSrv = mocks.CreateMock(typeof(IService)) as IService;
+            DoNotExpect.Call(delegate{ mockSrv.Stop(); });
+            ...
+            </example>
+        </member>
+        <member name="T:Rhino.Mocks.Exceptions.ExpectationViolationException">
+            <summary>
+            An expectaton violation was detected.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Exceptions.ExpectationViolationException.#ctor(System.String)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Exceptions.ExpectationViolationException"/> instance.
+            </summary>
+            <param name="message">Message.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Exceptions.ExpectationViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
+            <summary>
+            Serialization constructor
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Exceptions.ObjectNotMockFromThisRepositoryException">
+            <summary>
+            Signals that an object was call on a mock repository which doesn't
+            belong to this mock repository or not a mock
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Exceptions.ObjectNotMockFromThisRepositoryException.#ctor(System.String)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Exceptions.ObjectNotMockFromThisRepositoryException"/> instance.
+            </summary>
+            <param name="message">Message.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Exceptions.ObjectNotMockFromThisRepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
+            <summary>
+            Serialization constructor
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Expect">
+            <summary>
+            Allows to set expectation on methods that has return values.
+            For methods with void return value, you need to use LastCall
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expect.Call``1(``0)">
+            <summary>
+            The method options for the last call on /any/ proxy on /any/ repository on the current thread.
+            This method if not safe for multi threading scenarios, use <see cref="M:Rhino.Mocks.Expect.On(System.Object)"/>.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expect.Call(Rhino.Mocks.Expect.Action)">
+            <summary>
+            Accepts a delegate that will execute inside the method, and then return the resulting
+            <see cref="T:Rhino.Mocks.Interfaces.IMethodOptions`1"/> instance.
+            It is expected to be used with anonymous delegates / lambda expressions and only one
+            method should be called.
+            </summary>
+            <example>
+            IService mockSrv = mocks.CreateMock(typeof(IService)) as IService;
+            Expect.Call(delegate{ mockSrv.Start(); }).Throw(new NetworkException());
+            ...
+            </example>
+        </member>
+        <member name="M:Rhino.Mocks.Expect.On(System.Object)">
+            <summary>
+            Get the method options for the last method call on the mockInstance.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Expect.Action">
+            <summary>
+            A delegate that can be used to get better syntax on Expect.Call(delegate { foo.DoSomething(); });
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Expectations.AbstractExpectation">
+            <summary>
+            Abstract class that holds common information for 
+            expectations.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IExpectation">
+            <summary>
+            Interface to validate that a method call is correct.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectation.IsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method.
+            This method can be called numerous times, so be careful about side effects
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectation.AddActualCall">
+            <summary>
+            Add an actual method call to this expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectation.ReturnOrThrow(Castle.Core.Interceptor.IInvocation,System.Object[])">
+            <summary>
+            Returns the return value or throw the exception and setup any output / ref parameters
+            that has been set.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectation.BuildVerificationFailureMessage">
+            <summary>
+            Builds the verification failure message.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ErrorMessage">
+            <summary>
+            Gets the error message.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.Expected">
+            <summary>
+            Range of expected calls
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ActualCallsCount">
+            <summary>
+            Number of call actually made for this method
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.CanAcceptCalls">
+            <summary>
+            If this expectation is still waiting for calls.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ReturnValue">
+            <summary>
+            The return value for a method matching this expectation
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ExceptionToThrow">
+            <summary>
+            Gets or sets the exception to throw on a method matching this expectation.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ActionsSatisfied">
+            <summary>
+            Gets a value indicating whether this instance's action is staisfied.
+            A staisfied instance means that there are no more requirements from
+            this method. A method with non void return value must register either
+            a return value or an exception to throw.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.Method">
+            <summary>
+            Gets the method this expectation is for.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.RepeatableOption">
+            <summary>
+            Gets or sets what special condtions there are for this method
+            repeating.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ExpectationSatisfied">
+            <summary>
+            Gets a value indicating whether this expectation was satisfied
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.HasReturnValue">
+            <summary>
+            Specify whatever this expectation has a return value set
+            You can't check ReturnValue for this because a valid return value include null.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.ActionToExecute">
+            <summary>
+            An action to execute when the method is matched.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.OutRefParams">
+            <summary>
+            Set the out / ref parameters for the method call.
+            The indexing is zero based and ignores any non out/ref parameter.
+            It is possible not to pass all the parameters. This method can be called only once.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.Message">
+            <summary>
+            Documentation Message
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.Originalinvocation">
+            <summary>
+            Gets the invocation for this expectation
+            </summary>
+            <value>The invocation.</value>
+        </member>
+        <member name="E:Rhino.Mocks.Interfaces.IExpectation.WhenCalled">
+            <summary>
+            Occurs when the exceptation is match on a method call
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IExpectation.AllowTentativeReturn">
+            <summary>
+            Allow to set the return value in the future, if it was already set.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.actualCallsCount">
+            <summary>
+            Number of actuall calls made that passed this expectation
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.expected">
+            <summary>
+            Range of expected calls that should pass this expectation.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.returnValue">
+            <summary>
+            The return value for a method matching this expectation
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.exceptionToThrow">
+            <summary>
+            The exception to throw on a method matching this expectation.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.method">
+            <summary>
+            The method this expectation is for.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.returnValueSet">
+            <summary>
+            The return value for this method was set
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.repeatableOption">
+            <summary>
+            Whether this method will repeat
+            unlimited number of times.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.actionToExecute">
+            <summary>
+            A delegate that will be run when the 
+            expectation is matched.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.matchingArgs">
+            <summary>
+            The arguments that matched this expectation.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.message">
+            <summary>
+            Documentation message
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Expectations.AbstractExpectation.originalInvocation">
+            <summary>
+            The method originalInvocation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.GetHashCode">
+            <summary>
+            Get the hash code
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.AddActualCall">
+            <summary>
+            Add an actual actualMethodCall call to this expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.BuildVerificationFailureMessage">
+            <summary>
+            Builds the verification failure message.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.ReturnOrThrow(Castle.Core.Interceptor.IInvocation,System.Object[])">
+            <summary>
+            Returns the return value or throw the exception and setup output / ref parameters
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.IsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method on the child methods
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.#ctor(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Impl.Range)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.AbstractExpectation"/> instance.
+            </summary>
+            <param name="invocation">The originalInvocation for this method, required because it contains the generic type infromation</param>
+            <param name="expectedRange">Number of method calls for this expectations</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.#ctor(Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.AbstractExpectation"/> instance.
+            </summary>
+            <param name="expectation">Expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.DoIsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method on the child methods
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.Equals(System.Object)">
+            <summary>
+            Determines if this object equal to obj
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.CreateErrorMessage(System.String)">
+            <summary>
+            The error message for these arguments
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AbstractExpectation.AssertDelegateArgumentsMatchMethod(System.Delegate)">
+            <summary>
+            Asserts that the delegate has the same parameters as the expectation's method call
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.OutRefParams">
+            <summary>
+            Setter for the outpur / ref parameters for this expecataion.
+            Can only be set once.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.HasReturnValue">
+            <summary>
+            Specify whether this expectation has a return value set
+            You can't check ReturnValue for this because a valid return value include null.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.Method">
+            <summary>
+            Gets the method this expectation is for.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.Originalinvocation">
+            <summary>
+            Gets the originalInvocation for this expectation
+            </summary>
+            <value>The originalInvocation.</value>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.RepeatableOption">
+            <summary>
+            Gets or sets what special condtions there are for this method
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.Expected">
+            <summary>
+            Range of expected calls
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ActualCallsCount">
+            <summary>
+            Number of call actually made for this method
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.CanAcceptCalls">
+            <summary>
+            If this expectation is still waiting for calls.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ExpectationSatisfied">
+            <summary>
+            Gets a value indicating whether this expectation was satisfied
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ReturnValue">
+            <summary>
+            The return value for a method matching this expectation
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ActionToExecute">
+            <summary>
+            An action to execute when the method is matched.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ExceptionToThrow">
+            <summary>
+            Gets or sets the exception to throw on a method matching this expectation.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ActionsSatisfied">
+            <summary>
+            Gets a value indicating whether this instance's action is staisfied.
+            A staisfied instance means that there are no more requirements from
+            this method. A method with non void return value must register either
+            a return value or an exception to throw or an action to execute.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.Message">
+            <summary>
+            Documentation message
+            </summary>
+        </member>
+        <member name="E:Rhino.Mocks.Expectations.AbstractExpectation.WhenCalled">
+            <summary>
+            Occurs when the exceptation is match on a method call
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.AllowTentativeReturn">
+            <summary>
+            Allow to set the return value in the future, if it was already set.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AbstractExpectation.ErrorMessage">
+            <summary>
+            Gets the error message.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Expectations.AnyArgsExpectation">
+            <summary>
+            Expectation that matches any arguments for the method.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AnyArgsExpectation.#ctor(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Impl.Range)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.AnyArgsExpectation"/> instance.
+            </summary>
+            <param name="invocation">Invocation for this expectation</param>
+            <param name="expectedRange">Number of method calls for this expectations</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AnyArgsExpectation.#ctor(Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.AnyArgsExpectation"/> instance.
+            </summary>
+            <param name="expectation">Expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AnyArgsExpectation.DoIsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method.
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AnyArgsExpectation.Equals(System.Object)">
+            <summary>
+            Determines if the object equal to expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.AnyArgsExpectation.GetHashCode">
+            <summary>
+            Get the hash code
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.AnyArgsExpectation.ErrorMessage">
+            <summary>
+            Gets the error message.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Expectations.ArgsEqualExpectation">
+            <summary>
+            Summary description for ArgsEqualExpectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ArgsEqualExpectation.#ctor(Castle.Core.Interceptor.IInvocation,System.Object[],Rhino.Mocks.Impl.Range)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.ArgsEqualExpectation"/> instance.
+            </summary>
+            <param name="expectedArgs">Expected args.</param>
+            <param name="invocation">The invocation for this expectation</param>
+            <param name="expectedRange">Number of method calls for this expectations</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ArgsEqualExpectation.DoIsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method.
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ArgsEqualExpectation.Equals(System.Object)">
+            <summary>
+            Determines if the object equal to expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ArgsEqualExpectation.GetHashCode">
+            <summary>
+            Get the hash code
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.ArgsEqualExpectation.ErrorMessage">
+            <summary>
+            Gets the error message.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.ArgsEqualExpectation.ExpectedArgs">
+            <summary>
+            Get the expected args.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Expectations.CallbackExpectation">
+            <summary>
+            Call a specified callback to verify the expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.CallbackExpectation.#ctor(Rhino.Mocks.Interfaces.IExpectation,System.Delegate)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.CallbackExpectation"/> instance.
+            </summary>
+            <param name="expectation">Expectation.</param>
+            <param name="callback">Callback.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.CallbackExpectation.#ctor(Castle.Core.Interceptor.IInvocation,System.Delegate,Rhino.Mocks.Impl.Range)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.CallbackExpectation"/> instance.
+            </summary>
+            <param name="invocation">Invocation for this expectation</param>
+            <param name="callback">Callback.</param>
+            <param name="expectedRange">Number of method calls for this expectations</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.CallbackExpectation.DoIsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method on the child methods
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.CallbackExpectation.Equals(System.Object)">
+            <summary>
+            Determines if the object equal to expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.CallbackExpectation.GetHashCode">
+            <summary>
+            Get the hash code
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.CallbackExpectation.ErrorMessage">
+            <summary>
+            Gets the error message.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Expectations.ConstraintsExpectation">
+            <summary>
+            Expect the method's arguments to match the contraints
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ConstraintsExpectation.#ctor(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Constraints.AbstractConstraint[],Rhino.Mocks.Impl.Range)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.ConstraintsExpectation"/> instance.
+            </summary>
+            <param name="invocation">Invocation for this expectation</param>
+            <param name="constraints">Constraints.</param>
+            <param name="expectedRange">Number of method calls for this expectations</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ConstraintsExpectation.#ctor(Rhino.Mocks.Interfaces.IExpectation,Rhino.Mocks.Constraints.AbstractConstraint[])">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Expectations.ConstraintsExpectation"/> instance.
+            </summary>
+            <param name="expectation">Expectation.</param>
+            <param name="constraints">Constraints.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ConstraintsExpectation.DoIsExpected(System.Object[])">
+            <summary>
+            Validate the arguments for the method.
+            </summary>
+            <param name="args">The arguments with which the method was called</param>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ConstraintsExpectation.Equals(System.Object)">
+            <summary>
+            Determines if the object equal to expectation
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Expectations.ConstraintsExpectation.GetHashCode">
+            <summary>
+            Get the hash code
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Expectations.ConstraintsExpectation.ErrorMessage">
+            <summary>
+            Gets the error message.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Actions.HandleEvent">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IInvocationActionn">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IInvocationActionn.PerformAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.HandleEvent.#ctor(Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.HandleEvent.PerformAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Actions.InvokeMethodAgainstMockedObject">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.InvokeMethodAgainstMockedObject.#ctor(Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.InvokeMethodAgainstMockedObject.PerformAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Actions.InvokeProperty">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.InvokeProperty.#ctor(Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.MockRepository)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.InvokeProperty.PerformAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Actions.Proceed">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.Proceed.PerformAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Actions.RegularInvocation">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.RegularInvocation.#ctor(Rhino.Mocks.MockRepository)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Actions.RegularInvocation.PerformAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.InvocationVisitor">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.InvocationVisitor.#ctor(Rhino.Mocks.Impl.InvocationSpecifications.ISpecification{Castle.Core.Interceptor.IInvocation},Rhino.Mocks.Interfaces.IInvocationActionn)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.InvocationVisitor.CanWorkWith(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.InvocationVisitor.RunAgainst(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.InvocationVisitorsFactory">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.InvocationVisitorsFactory.CreateStandardInvocationVisitors(Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.MockRepository)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.AndSpecification`1">
+            <summary>
+            Summary for AndSpecification
+            </summary>
+            <typeparam name="T"></typeparam>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.InvocationSpecifications.ISpecification`1">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.InvocationSpecifications.ISpecification`1.IsSatisfiedBy(`0)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.AndSpecification`1.#ctor(Rhino.Mocks.Impl.InvocationSpecifications.ISpecification{`0},Rhino.Mocks.Impl.InvocationSpecifications.ISpecification{`0})">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.AndSpecification`1.IsSatisfiedBy(`0)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.FollowsEventNamingStandard">
+            <summary>
+            Summary description for FollowsEventNamingStandard
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.Invocation.Specifications.FollowsEventNamingStandard.AddPrefix">
+            <summary>
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.Invocation.Specifications.FollowsEventNamingStandard.RemovePrefix">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.FollowsEventNamingStandard.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.IsAnEventInvocation">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsAnEventInvocation.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.AnyInvocation">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.AnyInvocation.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.IsAnInvocationOfAMethodBelongingToObject">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsAnInvocationOfAMethodBelongingToObject.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.IsAnInvocationOnAMockedObject">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsAnInvocationOnAMockedObject.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.IsAPropertyInvocation">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsAPropertyInvocation.#ctor(Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsAPropertyInvocation.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.IsInvocationThatShouldTargetOriginal">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsInvocationThatShouldTargetOriginal.#ctor(Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.IsInvocationThatShouldTargetOriginal.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Invocation.Specifications.NamedEventExistsOnDeclaringType">
+            <summary>
+            Summary descritpion for NamedEventExistsOnDeclaringType
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Invocation.Specifications.NamedEventExistsOnDeclaringType.IsSatisfiedBy(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.NullLogger">
+            <summary>
+            Doesn't log anything, just makes happy noises
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IExpectationLogger">
+            <summary>
+            Log expectations - allows to see what is going on inside Rhino Mocks
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectationLogger.LogRecordedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as is was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectationLogger.LogReplayedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as it was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IExpectationLogger.LogUnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.String)">
+            <summary>
+            Logs the unexpected method call.
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="message">The message.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.NullLogger.LogRecordedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as is was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.NullLogger.LogReplayedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as it was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.NullLogger.LogUnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.String)">
+            <summary>
+            Logs the unexpected method call.
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="message">The message.</param>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RemotingMock.IRemotingProxyOperation">
+            <summary>
+            Operation on a remoting proxy
+            </summary>
+            <remarks>
+            It is not possible to directly communicate to a real proxy via transparent proxy.
+            Transparent proxy impersonates a user type and only methods of that user type are callable.
+            The only methods that are guaranteed to exist on any transparent proxy are methods defined
+            in Object: namely ToString(), GetHashCode(), and Equals()).
+            
+            These three methods are the only way to tell the real proxy to do something.
+            Equals() is the most suitable of all, since it accepts an arbitrary object parameter.
+            The RemotingProxy code is built so that if it is compared to an IRemotingProxyOperation,
+            transparentProxy.Equals(operation) will call operation.Process(realProxy).
+            This way we can retrieve a real proxy from transparent proxy and perform
+            arbitrary operation on it. 
+            </remarks>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RemotingMock.RemotingMockGenerator">
+            <summary>
+            Generates remoting proxies and provides utility functions
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RemotingMock.RemotingMockGenerator.CreateRemotingMock(System.Type,Castle.Core.Interceptor.IInterceptor,Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+             Create the proxy using remoting
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RemotingMock.RemotingMockGenerator.IsRemotingProxy(System.Object)">
+            <summary>
+            Check whether an object is a transparent proxy with a RemotingProxy behind it
+            </summary>
+            <param name="obj">Object to check</param>
+            <returns>true if the object is a transparent proxy with a RemotingProxy instance behind it, false otherwise</returns>
+            <remarks>We use Equals() method to communicate with the real proxy behind the object.
+            See IRemotingProxyOperation for more details</remarks>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RemotingMock.RemotingMockGenerator.GetMockedObjectFromProxy(System.Object)">
+            <summary>
+            Retrieve a mocked object from a transparent proxy
+            </summary>
+            <param name="proxy">Transparent proxy with a RemotingProxy instance behind it</param>
+            <returns>Mocked object associated with the proxy</returns>
+            <remarks>We use Equals() method to communicate with the real proxy behind the object.
+            See IRemotingProxyOperation for more details</remarks>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RemotingMock.RemotingInvocation">
+            <summary>
+            Implementation of IInvocation based on remoting proxy
+            </summary>
+            <remarks>Some methods are marked NotSupported since they either don't make sense
+            for remoting proxies, or they are never called by Rhino Mocks</remarks>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.TextWriterExpectationLogger">
+            <summary>
+            Rudimetry implementation that simply logs methods calls as text.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TextWriterExpectationLogger.#ctor(System.IO.TextWriter)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Impl.TextWriterExpectationLogger"/> class.
+            </summary>
+            <param name="writer">The writer.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TextWriterExpectationLogger.LogRecordedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as it was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TextWriterExpectationLogger.LogReplayedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as it was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TextWriterExpectationLogger.LogUnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.String)">
+            <summary>
+            Logs the unexpected method call.
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="message">The message.</param>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.StubRecordMockState">
+            <summary>
+            Behave like a stub, all properties and events acts normally, methods calls
+            return default values by default (but can use expectations to set them up), etc.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RecordMockState">
+            <summary>
+            Records all the expectations for a mock
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IMockState">
+            <summary>
+            Different actions on this mock
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.MethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.Verify">
+            <summary>
+            Verify that this mock expectations have passed.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.Replay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.GetLastMethodOptions``1">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.SetExceptionToThrowOnVerify(System.Exception)">
+            <summary>
+            Set the exception to throw when Verify is called.
+            This is used to report exception that may have happened but where caught in the code.
+            This way, they are reported anyway when Verify() is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockState.NotifyCallOnPropertyBehavior">
+            <summary>
+            This method is called to indicate that a property behavior call.
+            This is done so we generate good error message in the common case of people using
+            Stubbed properties with Return().
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockState.VerifyState">
+            <summary>
+            Gets the matching verify state for this state
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockState.LastMethodOptions">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.GetLastMethodOptions``1">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.SetExceptionToThrowOnVerify(System.Exception)">
+            <summary>
+            Set the exception to throw when Verify is called.
+            This is used to report exception that may have happened but where caught in the code.
+            This way, they are reported anyway when Verify() is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.NotifyCallOnPropertyBehavior">
+            <summary>
+            This method is called to indicate that a property behavior call.
+            This is done so we generate good error message in the common case of people using
+            Stubbed properties with Return().
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.#ctor(Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.MockRepository)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.RecordMockState"/> instance.
+            </summary>
+            <param name="repository">Repository.</param>
+            <param name="mockedObject">The proxy that generates the method calls</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.MethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.Replay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.DoReplay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.Verify">
+            <summary>
+            Verify that this mock expectations have passed.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.AssertPreviousMethodIsClose">
+            <summary>
+            Asserts the previous method is closed (had an expectation set on it so we can replay it correctly)
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordMockState.GetDefaultCallCountRangeExpectation">
+            <summary>
+            Get the default call count range expectation
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.RecordMockState.LastExpectation">
+            <summary>
+            Gets the last expectation.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.RecordMockState.MethodCallsCount">
+            <summary>
+            Gets the total method calls count.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.RecordMockState.LastMethodOptions">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.RecordMockState.VerifyState">
+            <summary>
+            Gets the matching verify state for this state
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubRecordMockState.#ctor(Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.MockRepository)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Impl.StubRecordMockState"/> class.
+            </summary>
+            <param name="mockedObject">The proxy that generates the method calls</param>
+            <param name="repository">Repository.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubRecordMockState.AssertPreviousMethodIsClose">
+            <summary>
+            We don't care much about expectations here, so we will remove the expectation if
+            it is not closed.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubRecordMockState.Replay">
+            <summary>
+            Verify that we can move to replay state and move
+            to the reply state.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubRecordMockState.GetDefaultCallCountRangeExpectation">
+            <summary>
+            Get the default call count range expectation
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.StubReplayMockState">
+            <summary>
+            Validate expectations on recorded methods, but in general completely ignoring them.
+            Similar to <seealso cref="T:Rhino.Mocks.Impl.ReplayDynamicMockState"/> except that it would return a 
+            <seealso cref="T:Rhino.Mocks.Impl.StubRecordMockState"/> when BackToRecord is called.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.ReplayMockState">
+            <summary>
+            Validate all expectations on a mock
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.ReplayMockState.repository">
+            <summary>
+            The repository for this state
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.ReplayMockState.proxy">
+            <summary>
+            The proxy object for this state
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.GetLastMethodOptions``1">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.#ctor(Rhino.Mocks.Impl.RecordMockState)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.ReplayMockState"/> instance.
+            </summary>
+            <param name="previousState">The previous state for this method</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.MethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.DoMethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            This allows derived method to cleanly get a the setupresult behavior while adding
+            their own.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.SetExceptionToThrowOnVerify(System.Exception)">
+            <summary>
+            Set the exception to throw when Verify is called.
+            This is used to report exception that may have happened but where caught in the code.
+            This way, they are reported anyway when Verify() is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.NotifyCallOnPropertyBehavior">
+            <summary>
+            not relevant
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.Verify">
+            <summary>
+            Verify that this mock expectations have passed.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.Replay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ReplayMockState.LastMethodOptions">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ReplayMockState.VerifyState">
+            <summary>
+            Gets the matching verify state for this state
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubReplayMockState.#ctor(Rhino.Mocks.Impl.RecordMockState)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Impl.StubReplayMockState"/> class.
+            </summary>
+            <param name="previousState">The previous state for this method</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubReplayMockState.DoMethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.StubReplayMockState.BackToRecord">
+            <summary>
+            Gets a mock state that matches the original mock state of the object.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.TraceWriterExpectationLogger">
+            <summary>
+            Write rhino mocks log info to the trace
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterExpectationLogger.#ctor">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Impl.TraceWriterExpectationLogger"/> class.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterExpectationLogger.#ctor(System.Boolean,System.Boolean,System.Boolean)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.Impl.TraceWriterExpectationLogger"/> class.
+            </summary>
+            <param name="logRecorded">if set to <c>true</c> [log recorded].</param>
+            <param name="logReplayed">if set to <c>true</c> [log replayed].</param>
+            <param name="logUnexpected">if set to <c>true</c> [log unexpected].</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterExpectationLogger.LogRecordedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as is was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterExpectationLogger.LogReplayedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as it was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterExpectationLogger.LogUnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.String)">
+            <summary>
+            Logs the unexpected method call.
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="message">The message.</param>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.TraceWriterWithStackTraceExpectationWriter">
+            <summary>
+            Writes log information as stack traces about rhino mocks activity
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.TraceWriterWithStackTraceExpectationWriter.AlternativeWriter">
+            <summary>
+            Allows to redirect output to a different location.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterWithStackTraceExpectationWriter.LogRecordedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as is was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterWithStackTraceExpectationWriter.LogReplayedExpectation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Logs the expectation as it was recorded
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="expectation">The expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.TraceWriterWithStackTraceExpectationWriter.LogUnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.String)">
+            <summary>
+            Logs the unexpected method call.
+            </summary>
+            <param name="invocation">The invocation.</param>
+            <param name="message">The message.</param>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IPartialMockMarker">
+            <summary>
+            Marker interface used to indicate that this is a partial mock.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.OriginalCallOptions">
+            <summary>
+            Options for CallOriginalMethod
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Interfaces.OriginalCallOptions.NoExpectation">
+            <summary>
+            No expectation is created, the method will be called directly
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Interfaces.OriginalCallOptions.CreateExpectation">
+            <summary>
+            Normal expectation is created, but when the method is later called, it will also call the original method
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.MethodInvocation">
+            <summary>
+            This is a data structure that is used by 
+            <seealso cref="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled(System.Action{Rhino.Mocks.MethodInvocation})"/> to pass
+            the current method to the relevant delegate
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodInvocation.#ctor(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            Initializes a new instance of the <see cref="T:Rhino.Mocks.MethodInvocation"/> class.
+            </summary>
+            <param name="invocation">The invocation.</param>
+        </member>
+        <member name="P:Rhino.Mocks.MethodInvocation.Arguments">
+            <summary>
+            Gets the args for this method invocation
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.MethodInvocation.Method">
+            <summary>
+            Get the method that was caused this invocation
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.MethodInvocation.ReturnValue">
+            <summary>
+            Gets or sets the return value for this method invocation
+            </summary>
+            <value>The return value.</value>
+        </member>
+        <member name="T:Rhino.Mocks.MockRepository">
+            <summary>
+             Adds optional new usage:
+               using(mockRepository.Record()) {
+                  Expect.Call(mock.Method()).Return(retVal);
+               }
+               using(mockRepository.Playback()) {
+                  // Execute code
+               }
+             N.B. mockRepository.ReplayAll() and mockRepository.VerifyAll()
+                  calls are taken care of by Record/Playback
+            </summary>
+            <summary>
+            Creates proxied instances of types.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStub``1(System.Object[])">
+            <summary>Generates a stub without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="argumentsForConstructor">Arguments for <typeparamref name="T"/>'s constructor</param>
+            <typeparam name="T">The <see cref="T:System.Type"/> of stub to create.</typeparam>
+            <returns>The stub</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.Stub``1(System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStub(System.Type,System.Object[])">
+            <summary>Generates a stub without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="type">The <see cref="T:System.Type"/> of stub.</param>
+            <param name="argumentsForConstructor">Arguments for the <paramref name="type"/>'s constructor.</param>
+            <returns>The stub</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.Stub(System.Type,System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateMock``1(System.Object[])">
+            <summary>Generate a mock object without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <typeparam name="T">type <see cref="T:System.Type"/> of mock object to create.</typeparam>
+            <param name="argumentsForConstructor">Arguments for <typeparamref name="T"/>'s constructor</param>
+            <returns>the mock object</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.DynamicMock``1(System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateMock``2(System.Object[])">
+            <summary>Generate a multi-mock object without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <typeparam name="T">The <c>typeof</c> object to generate a mock for.</typeparam>
+            <typeparam name="TMultiMockInterface1">A second interface to generate a multi-mock for.</typeparam>
+            <param name="argumentsForConstructor">Arguments for <typeparamref name="T"/>'s constructor</param>
+            <returns>the multi-mock object</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.DynamicMultiMock(System.Type,System.Type[],System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateMock``3(System.Object[])">
+            <summary>Generate a multi-mock object without without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <typeparam name="T">The <c>typeof</c> object to generate a mock for.</typeparam>
+            <typeparam name="TMultiMockInterface1">An interface to generate a multi-mock for.</typeparam>
+            <typeparam name="TMultiMockInterface2">A second interface to generate a multi-mock for.</typeparam>
+            <param name="argumentsForConstructor">Arguments for <typeparamref name="T"/>'s constructor</param>
+            <returns>the multi-mock object</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.DynamicMultiMock(System.Type,System.Type[],System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateMock(System.Type,System.Type[],System.Object[])">
+            <summary>Creates a multi-mock without without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="type">The type of mock to create, this can be a class</param>
+            <param name="extraTypes">Any extra interfaces to add to the multi-mock, these can only be interfaces.</param>
+            <param name="argumentsForConstructor">Arguments for <paramref name="type"/>'s constructor</param>
+            <returns>the multi-mock object</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.DynamicMultiMock(System.Type,System.Type[],System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStrictMock``1(System.Object[])">
+            <summary>Creates a strict mock without without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="argumentsForConstructor">Any arguments required for the <typeparamref name="T"/>'s constructor</param>
+            <typeparam name="T">The type of mock object to create.</typeparam>
+            <returns>The mock object with strict replay semantics</returns>
+             <seealso cref="M:Rhino.Mocks.MockRepository.StrictMock``1(System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStrictMock``2(System.Object[])">
+            <summary>Creates a strict multi-mock without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="argumentsForConstructor">Any arguments required for the <typeparamref name="T"/>'s constructor</param>
+            <typeparam name="T">The type of mock object to create, this can be a class.</typeparam>
+            <typeparam name="TMultiMockInterface1">An interface to generate a multi-mock for, this must be an interface!</typeparam>
+            <returns>The multi-mock object with strict replay semantics</returns>
+             <seealso cref="M:Rhino.Mocks.MockRepository.StrictMultiMock(System.Type,System.Type[],System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStrictMock``3(System.Object[])">
+            <summary>Creates a strict multi-mock without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="argumentsForConstructor">Any arguments required for the <typeparamref name="T"/>'s constructor</param>
+            <typeparam name="T">The type of mock object to create, this can be a class.</typeparam>
+            <typeparam name="TMultiMockInterface1">An interface to generate a multi-mock for, this must be an interface!</typeparam>
+            <typeparam name="TMultiMockInterface2">A second interface to generate a multi-mock for, this must be an interface!</typeparam>
+            <returns>The multi-mock object with strict replay semantics</returns>
+            <seealso cref="M:Rhino.Mocks.MockRepository.StrictMultiMock(System.Type,System.Type[],System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStrictMock(System.Type,System.Type[],System.Object[])">
+            <summary>Creates a strict multi-mock without needing a <see cref="T:Rhino.Mocks.MockRepository"/></summary>
+            <param name="type">The type of mock object to create, this can be a class</param>
+            <param name="extraTypes">Any extra interfaces to generate a multi-mock for, these must be interaces!</param>
+            <param name="argumentsForConstructor">Any arguments for the <paramref name="type"/>'s constructor</param>
+            <returns>The strict multi-mock object</returns>
+             <seealso cref="M:Rhino.Mocks.MockRepository.StrictMultiMock(System.Type,System.Type[],System.Object[])"/>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GeneratePartialMock``1(System.Object[])">
+            <summary>
+            </summary>
+            <param name="argumentsForConstructor"></param>
+            <typeparam name="T"></typeparam>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GeneratePartialMock``2(System.Object[])">
+            <summary>
+            </summary>
+            <param name="argumentsForConstructor"></param>
+            <typeparam name="T"></typeparam>
+            <typeparam name="TMultiMockInterface1"></typeparam>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GeneratePartialMock``3(System.Object[])">
+            <summary>
+            </summary>
+            <param name="argumentsForConstructor"></param>
+            <typeparam name="T"></typeparam>
+            <typeparam name="TMultiMockInterface1"></typeparam>
+            <typeparam name="TMultiMockInterface2"></typeparam>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GeneratePartialMock(System.Type,System.Type[],System.Object[])">
+            <summary>
+            </summary>
+            <param name="type"></param>
+            <param name="extraTypes"></param>
+            <param name="argumentsForConstructor"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateDynamicMockWithRemoting``1(System.Object[])">
+            <summary>
+            Generate a mock object with dynamic replay semantics and remoting without needing the mock repository
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GenerateStrictMockWithRemoting``1(System.Object[])">
+            <summary>
+            Generate a mock object with strict replay semantics and remoting without needing the mock repository
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMockInReplay``1(System.Func{Rhino.Mocks.MockRepository,``0})">
+            <summary>Helper method to create a mock object without a repository instance and put the object back into replay mode.</summary>
+            <typeparam name="T">The type of mock object to create</typeparam>
+            <param name="createMock">A delegate that uses a mock repository instance to create the underlying mock</param>
+            <returns>The mock object in the replay mode.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Record">
+            <summary>
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Playback">
+            <summary>
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="F:Rhino.Mocks.MockRepository.generatorMap">
+            <summary>
+            This is a map of types to ProxyGenerators.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MockRepository.lastRepository">
+            <summary>
+            This is used to record the last repository that has a method called on it.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MockRepository.lastMockedObject">
+            <summary>
+            this is used to get to the last proxy on this repository.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MockRepository.delegateProxies">
+            <summary>
+            For mock delegates, maps the proxy instance from intercepted invocations
+            back to the delegate that was originally returned to client code, if any.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MockRepository.proxies">
+            <summary>
+            All the proxies in the mock repositories
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MockRepository.repeatableMethods">
+            <summary>
+            This is here because we can't put it in any of the recorders, since repeatable methods
+            have no orderring, and if we try to handle them using the usual manner, we would get into
+            wierd situations where repeatable method that was defined in an orderring block doesn't
+            exists until we enter this block.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.#ctor">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MockRepository"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Ordered">
+            <summary>
+            Move the repository to ordered mode
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Unordered">
+            <summary>
+            Move the repository to un-ordered mode
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMock(System.Type,System.Object[])">
+            <summary>
+            Creates a mock for the specified type.
+            </summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMock(System.Type,System.Object[])">
+            <summary>
+            Creates a strict mock for the specified type.
+            </summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMockWithRemoting(System.Type,System.Object[])">
+            <summary>
+            Creates a remoting mock for the specified type.
+            </summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMockWithRemoting(System.Type,System.Object[])">
+            <summary>
+            Creates a strict remoting mock for the specified type.
+            </summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMockWithRemoting``1(System.Object[])">
+            <summary>
+            Creates a remoting mock for the specified type.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMockWithRemoting``1(System.Object[])">
+            <summary>
+            Creates a strict remoting mock for the specified type.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMultiMock(System.Type,System.Type[])">
+            <summary>
+            Creates a mock from several types, with strict semantics.
+            Only <paramref name="mainType"/> may be a class.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMultiMock(System.Type,System.Type[])">
+            <summary>
+            Creates a strict mock from several types, with strict semantics.
+            Only <paramref name="mainType"/> may be a class.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMultiMock(System.Type,System.Type[],System.Object[])">
+            <summary>
+            Creates a mock from several types, with strict semantics.
+            Only <paramref name="mainType"/> may be a class.
+            </summary>
+            <param name="mainType">The main type to mock.</param>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMultiMock(System.Type,System.Type[],System.Object[])">
+            <summary>
+            Creates a strict mock from several types, with strict semantics.
+            Only <paramref name="mainType"/> may be a class.
+            </summary>
+            <param name="mainType">The main type to mock.</param>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMultiMock(System.Type,System.Type[])">
+            <summary>
+            Creates a mock from several types, with dynamic semantics.
+            Only <paramref name="mainType"/> may be a class.
+            </summary>
+            <param name="mainType">The main type to mock.</param>
+            <param name="extraTypes">Extra interface types to mock.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMultiMock(System.Type,System.Type[],System.Object[])">
+            <summary>
+            Creates a mock from several types, with dynamic semantics.
+            Only <paramref name="mainType"/> may be a class.
+            </summary>
+            <param name="mainType">The main type to mock.</param>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMock(System.Type,System.Object[])">
+            <summary>Creates a dynamic mock for the specified type.</summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMockWithRemoting(System.Type,System.Object[])">
+            <summary>Creates a dynamic mock for the specified type.</summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMockWithRemoting``1(System.Object[])">
+            <summary>Creates a dynamic mock for the specified type.</summary>
+            <typeparam name="T"></typeparam>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PartialMock(System.Type,System.Object[])">
+            <summary>Creates a mock object that defaults to calling the class methods if no expectation is set on the method.</summary>
+            <param name="type">Type.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PartialMultiMock(System.Type,System.Type[])">
+            <summary>Creates a mock object that defaults to calling the class methods.</summary>
+            <param name="type">Type.</param>
+            <param name="extraTypes">Extra interface types to mock.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PartialMultiMock(System.Type,System.Type[],System.Object[])">
+            <summary>Creates a mock object that defaults to calling the class methods.</summary>
+            <param name="type">Type.</param>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.RemotingMock(System.Type,Rhino.Mocks.MockRepository.CreateMockState)">
+            <summary>Creates a mock object using remoting proxies</summary>
+            <param name="type">Type to mock - must be MarshalByRefObject</param>
+            <returns>Mock object</returns>
+            <remarks>Proxy mock can mock non-virtual methods, but not static methods</remarks>
+            <param name="factory">Creates the mock state for this proxy</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Replay(System.Object)">
+            <summary>
+            Cause the mock state to change to replay, any further call is compared to the 
+            ones that were called in the record state.
+            </summary>
+            <remarks>This method *cannot* be called from inside an ordering.</remarks>
+            <param name="obj">the object to move to replay state</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.ReplayCore(System.Object,System.Boolean)">
+            <summary>
+            Cause the mock state to change to replay, any further call is compared to the 
+            ones that were called in the record state.
+            </summary>
+            <param name="obj">the object to move to replay state</param>
+            <param name="checkInsideOrdering"></param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.BackToRecord(System.Object)">
+            <summary>Move the mocked object back to record state.<para>You can (and it's recommended) to run {Verify()} before you use this method.</para></summary>
+            <remarks>Will delete all current expectations!</remarks>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.BackToRecord(System.Object,Rhino.Mocks.BackToRecordOptions)">
+            <summary>
+            Move the mocked object back to record state.
+            Optionally, can delete all current expectations, but allows more granularity about how
+            it would behave with regard to the object state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Verify(System.Object)">
+            <summary>
+            Verify that all the expectations for this object were fulfilled.
+            </summary>
+            <param name="obj">the object to verify the expectations for</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.LastMethodCall``1(System.Object)">
+            <summary>
+            Get the method options for the last call on
+            mockedInstance.
+            </summary>
+            <param name="mockedInstance">The mock object</param>
+            <returns>Method options for the last call</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GetMockObjectFromInvocationProxy(System.Object)">
+            <summary>
+            Maps an invocation proxy back to the mock object instance that was originally
+            returned to client code which might have been a delegate to this proxy.
+            </summary>
+            <param name="invocationProxy">The mock object proxy from the intercepted invocation</param>
+            <returns>The mock object</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMockObject(System.Type,Rhino.Mocks.MockRepository.CreateMockState,System.Type[],System.Object[])">
+            <summary>This is provided to allow advance extention functionality, where Rhino Mocks standard functionality is not enough.</summary>
+            <param name="type">The type to mock</param>
+            <param name="factory">Delegate that create the first state of the mocked object (usualy the record state).</param>
+            <param name="extras">Additional types to be implemented, this can be only interfaces </param>
+            <param name="argumentsForConstructor">optional arguments for the constructor</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GetMockedObject(System.Object)">
+            <summary>
+             Method: GetMockedObject
+             Get an IProxy from a mocked object instance, or throws if the 
+             object is not a mock object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GetMockedObjectOrNull(System.Object)">
+            <summary>
+            Method: GetMockedObjectOrNull
+            Get an IProxy from a mocked object instance, or null if the
+            object is not a mock object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PopRecorder">
+            <summary>Pops the recorder.</summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PushRecorder(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>Pushes the recorder.</summary>
+            <param name="newRecorder">New recorder.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.BackToRecordAll">
+            <summary>
+            All the mock objects in this repository will be moved
+            to record state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.BackToRecordAll(Rhino.Mocks.BackToRecordOptions)">
+            <summary>
+            All the mock objects in this repository will be moved
+            to record state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.ReplayAll">
+            <summary>
+            Replay all the mocks from this repository
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.VerifyAll">
+            <summary>
+            Verify all the mocks from this repository
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.GetProxyGenerator(System.Type)">
+            <summary>
+            Gets the proxy generator for a specific type. Having a single ProxyGenerator
+            with multiple types linearly degrades the performance so this implementation
+            keeps one ProxyGenerator per type. 
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.SetExceptionToBeThrownOnVerify(System.Object,Rhino.Mocks.Exceptions.ExpectationViolationException)">
+            <summary>Set the exception to be thrown when verified is called.</summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMock``1(System.Object[])">
+            <summary>
+            Creates a mock for the spesified type with strict mocking semantics.
+            <para>Strict semantics means that any call that wasn't explicitly recorded is considered an error and would cause an exception to be thrown.</para>
+            </summary>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMock``1(System.Object[])">
+            <summary>
+            Creates a mock for the spesified type with strict mocking semantics.
+            <para>Strict semantics means that any call that wasn't explicitly recorded is considered an error and would cause an exception to be thrown.</para>
+            </summary>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMock``1(System.Object[])">
+            <summary>
+            Creates a dynamic mock for the specified type.
+            </summary>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMultiMock``1(System.Type[])">
+            <summary>
+            Creates a mock object from several types.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMultiMock``1(System.Type[])">
+            <summary>
+            Creates a strict mock object from several types.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMultiMock``1(System.Type[])">
+            <summary>
+            Create a mock object from several types with dynamic semantics.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PartialMultiMock``1(System.Type[])">
+            <summary>
+            Create a mock object from several types with partial semantics.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.CreateMultiMock``1(System.Type[],System.Object[])">
+            <summary>
+            Create a mock object from several types with strict semantics.
+            </summary>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.StrictMultiMock``1(System.Type[],System.Object[])">
+            <summary>
+            Create a strict mock object from several types with strict semantics.
+            </summary>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.DynamicMultiMock``1(System.Type[],System.Object[])">
+            <summary>
+            Create a mock object from several types with dynamic semantics.
+            </summary>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PartialMultiMock``1(System.Type[],System.Object[])">
+            <summary>
+            Create a mock object from several types with partial semantics.
+            </summary>
+            <param name="extraTypes">Extra interface types to mock.</param>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.PartialMock``1(System.Object[])">
+            <summary>
+            Create a mock object with from a class that defaults to calling the class methods
+            </summary>
+            <param name="argumentsForConstructor">Arguments for the class' constructor, if mocking a concrete class</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Stub``1(System.Object[])">
+            <summary>
+            Create a stub object, one that has properties and events ready for use, and 
+            can have methods called on it. It requires an explicit step in order to create 
+            an expectation for a stub.
+            </summary>
+            <param name="argumentsForConstructor">The arguments for constructor.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.Stub(System.Type,System.Object[])">
+            <summary>
+            Create a stub object, one that has properties and events ready for use, and
+            can have methods called on it. It requires an explicit step in order to create
+            an expectation for a stub.
+            </summary>
+            <param name="type">The type.</param>
+            <param name="argumentsForConstructor">The arguments for constructor.</param>
+            <returns>The stub</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.IsInReplayMode(System.Object)">
+            <summary>
+            Returns true if the passed mock is currently in replay mode.
+            </summary>
+            <param name="mock">The mock to test.</param>
+            <returns>True if the mock is in replay mode, false otherwise.</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.IsStub(System.Object)">
+            <summary>
+            Determines whether the specified proxy is a stub.
+            </summary>
+            <param name="proxy">The proxy.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MockRepository.RegisterPropertyBehaviorOn(Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+            Register a call on a prperty behavior 
+            </summary>
+            <param name="instance"></param>
+        </member>
+        <member name="P:Rhino.Mocks.MockRepository.Recorder">
+            <summary>
+            Gets the recorder.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.MockRepository.Replayer">
+            <summary>
+            Gets the replayer for this repository.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.MockRepository.LastMockedObject">
+            <summary>
+            Gets the last proxy which had a method call.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.MockRepository.CreateMockState">
+            <summary>
+             Delegate: CreateMockState
+             This is used internally to cleanly handle the creation of different 
+             RecordMockStates.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.RhinoMocksExtensions">
+            <summary>
+            A set of extension methods that adds Arrange Act Assert mode to Rhino Mocks
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Expect``1(``0,System.Action{``0})">
+            <summary>
+            Create an expectation on this mock for this action to occur
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.BackToRecord``1(``0)">
+            <summary>
+            Reset all expectations on this mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.BackToRecord``1(``0,Rhino.Mocks.BackToRecordOptions)">
+            <summary>
+            Reset the selected expectation on this mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="options">The options to reset the expectations on this mock.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Replay``1(``0)">
+            <summary>
+            Cause the mock state to change to replay, any further call is compared to the 
+            ones that were called in the record state.
+            </summary>
+            <param name="mock">the mocked object to move to replay state</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.GetMockRepository``1(``0)">
+            <summary>
+            Gets the mock repository for this specificied mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Expect``2(``0,Rhino.Mocks.Function{``0,``1})">
+            <summary>
+            Create an expectation on this mock for this action to occur
+            </summary>
+            <typeparam name="T"></typeparam>
+            <typeparam name="R"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Stub``1(``0,System.Action{``0})">
+            <summary>
+            Tell the mock object to perform a certain action when a matching 
+            method is called.
+            Does not create an expectation for this method.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Stub``2(``0,Rhino.Mocks.Function{``0,``1})">
+            <summary>
+            Tell the mock object to perform a certain action when a matching
+            method is called.
+            Does not create an expectation for this method.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <typeparam name="R"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.GetArgumentsForCallsMadeOn``1(``0,System.Action{``0})">
+            <summary>
+            Gets the arguments for calls made on this mock object and the method that was called
+            in the action.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <returns></returns>
+            <example>
+            Here we will get all the arguments for all the calls made to DoSomething(int)
+            <code>
+            var argsForCalls = foo54.GetArgumentsForCallsMadeOn(x =&gt; x.DoSomething(0))
+            </code>
+            </example>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.GetArgumentsForCallsMadeOn``1(``0,System.Action{``0},System.Action{Rhino.Mocks.Interfaces.IMethodOptions{System.Object}})">
+            <summary>
+            Gets the arguments for calls made on this mock object and the method that was called
+            in the action and matches the given constraints
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <param name="setupConstraints">The setup constraints.</param>
+            <returns></returns>
+            <example>
+            Here we will get all the arguments for all the calls made to DoSomething(int)
+            <code>
+            var argsForCalls = foo54.GetArgumentsForCallsMadeOn(x =&gt; x.DoSomething(0))
+            </code>
+            </example>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled``1(``0,System.Action{``0})">
+            <summary>
+            Asserts that a particular method was called on this mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled``1(``0,System.Action{``0},System.Action{Rhino.Mocks.Interfaces.IMethodOptions{System.Object}})">
+            <summary>
+            Asserts that a particular method was called on this mock object that match
+            a particular constraint set.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <param name="setupConstraints">The setup constraints.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled``1(``0,System.Func{``0,System.Object})">
+            <summary>
+            Asserts that a particular method was called on this mock object that match
+            a particular constraint set.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasCalled``1(``0,System.Func{``0,System.Object},System.Action{Rhino.Mocks.Interfaces.IMethodOptions{System.Object}})">
+            <summary>
+            Asserts that a particular method was called on this mock object that match
+            a particular constraint set.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <param name="setupConstraints">The setup constraints.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasNotCalled``1(``0,System.Action{``0})">
+            <summary>
+            Asserts that a particular method was NOT called on this mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasNotCalled``1(``0,System.Action{``0},System.Action{Rhino.Mocks.Interfaces.IMethodOptions{System.Object}})">
+            <summary>
+            Asserts that a particular method was NOT called on this mock object that match
+            a particular constraint set.
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <param name="setupConstraints">The setup constraints.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasNotCalled``1(``0,System.Func{``0,System.Object})">
+            <summary>
+            Asserts that a particular method was NOT called on this mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertWasNotCalled``1(``0,System.Func{``0,System.Object},System.Action{Rhino.Mocks.Interfaces.IMethodOptions{System.Object}})">
+            <summary>
+            Asserts that a particular method was NOT called on this mock object
+            </summary>
+            <typeparam name="T"></typeparam>
+            <param name="mock">The mock.</param>
+            <param name="action">The action.</param>
+            <param name="setupConstraints">The setup constraints.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.FindAppropriteType``1(Rhino.Mocks.Interfaces.IMockedObject)">
+            <summary>
+            Finds the approprite implementation type of this item.
+            This is the class or an interface outside of the rhino mocks.
+            </summary>
+            <param name="mockedObj">The mocked obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.VerifyAllExpectations(System.Object)">
+            <summary>
+            Verifies all expectations on this mock object
+            </summary>
+            <param name="mockObject">The mock object.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.GetEventRaiser``1(``0,System.Action{``0})">
+            <summary>
+            Gets the event raiser for the event that was called in the action passed
+            </summary>
+            <typeparam name="TEventSource">The type of the event source.</typeparam>
+            <param name="mockObject">The mock object.</param>
+            <param name="eventSubscription">The event subscription.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Raise``1(``0,System.Action{``0},System.Object,System.EventArgs)">
+            <summary>
+            Raise the specified event using the passed arguments.
+            The even is extracted from the passed labmda
+            </summary>
+            <typeparam name="TEventSource">The type of the event source.</typeparam>
+            <param name="mockObject">The mock object.</param>
+            <param name="eventSubscription">The event subscription.</param>
+            <param name="sender">The sender.</param>
+            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.Raise``1(``0,System.Action{``0},System.Object[])">
+            <summary>
+            Raise the specified event using the passed arguments.
+            The even is extracted from the passed labmda
+            </summary>
+            <typeparam name="TEventSource">The type of the event source.</typeparam>
+            <param name="mockObject">The mock object.</param>
+            <param name="eventSubscription">The event subscription.</param>
+            <param name="args">The args.</param>
+        </member>
+        <member name="M:Rhino.Mocks.RhinoMocksExtensions.AssertExactlySingleExpectaton``1(Rhino.Mocks.MockRepository,``0)">
+            <summary>TODO: Make this better!  It currently breaks down when mocking classes or
+            ABC's that call other virtual methods which are getting intercepted too.  I wish
+            we could just walk Expression{Action{Action{T}} to assert only a single
+            method is being made.
+            
+            The workaround is to not call foo.AssertWasCalled .. rather foo.VerifyAllExpectations()</summary>
+            <typeparam name="T">The type of mock object</typeparam>
+            <param name="mocks">The mock repository</param>
+            <param name="mockToRecordExpectation">The actual mock object to assert expectations on.</param>
+        </member>
+        <member name="T:Rhino.Mocks.RhinoMocksExtensions.VoidType">
+            <summary>
+            Fake type that disallow creating it.
+            Should have been System.Type, but we can't use it.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Utilities.GenericsUtil">
+            <summary>
+            Utility class for dealing with messing generics scenarios.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Utilities.GenericsUtil.HasOpenGenericParam(System.Type)">
+            <summary>
+            There are issues with trying to get this to work correctly with open generic types, since this is an edge case, 
+            I am letting the runtime handle it.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Utilities.GenericsUtil.GetRealType(System.Type,Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            Gets the real type, including de-constructing and constructing the type of generic
+            methods parameters.
+            </summary>
+            <param name="type">The type.</param>
+            <param name="invocation">The invocation.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Utilities.GenericsUtil.ReconstructGenericType(System.Type,System.Collections.Generic.Dictionary{System.String,System.Type})">
+            <summary>
+            Because we need to support complex types here (simple generics were handled above) we
+            need to be aware of the following scenarios:
+            List[T] and List[Foo[T]]
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Generated.ExpectationsList">
+            <summary>
+            ExpectationsList
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary">
+            <summary>
+            Dictionary
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Generated.ProxyStateDictionary">
+            <summary>
+            Dictionary class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Generated.ProxyStateDictionary.#ctor">
+            <summary>
+            Create a new instance of <c>ProxyStateDictionary</c>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.CreateMethodExpectation">
+            <summary>
+            Allows to call a method and immediately get it's options.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.ICreateMethodExpectation">
+            <summary>
+            Interface to allow calling a method and immediately get it's options.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.ICreateMethodExpectation.Call``1(``0)">
+            <summary>
+            Get the method options for the call
+            </summary>
+            <param name="ignored">The method call should go here, the return value is ignored</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.CreateMethodExpectation.#ctor(Rhino.Mocks.Interfaces.IMockedObject,System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.CreateMethodExpectation"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.CreateMethodExpectation.Call``1(``0)">
+            <summary>
+            Get the method options for the call
+            </summary>
+            <param name="ignored">The method call should go here, the return value is ignored</param>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.CreateMethodExpectationForSetupResult">
+            <summary>
+            Allows to call a method and immediately get it's options.
+            Set the expected number for the call to Any() 
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.CreateMethodExpectationForSetupResult.#ctor(Rhino.Mocks.Interfaces.IMockedObject,System.Object)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.CreateMethodExpectationForSetupResult"/> instance.
+            </summary>
+            <param name="mockedObject">Proxy.</param>
+            <param name="mockedInstance">Mocked instance.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.CreateMethodExpectationForSetupResult.Call``1(``0)">
+            <summary>
+            Get the method options for the call
+            </summary>
+            <param name="ignored">The method call should go here, the return value is ignored</param>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.DelegateTargetInterfaceCreator">
+            <summary>
+            This class is reponsible for taking a delegate and creating a wrapper
+            interface around it, so it can be mocked.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.DelegateTargetInterfaceCreator.moduleScope">
+            <summary>
+            The scope for all the delegate interfaces create by this mock repository.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.DelegateTargetInterfaceCreator.GetDelegateTargetInterface(System.Type)">
+            <summary>
+            Gets a type with an "Invoke" method suitable for use as a target of the
+            specified delegate type.
+            </summary>
+            <param name="delegateType"></param>
+            <returns></returns>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.EventRaiser">
+            <summary>
+            Raise events for all subscribers for an event
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IEventRaiser">
+            <summary>
+            Raise events for all subscribers for an event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IEventRaiser.Raise(System.Object[])">
+            <summary>
+            Raise the event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IEventRaiser.Raise(System.Object,System.EventArgs)">
+            <summary>
+            The most common form for the event handler signature
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.EventRaiser.Create(System.Object,System.String)">
+            <summary>
+             Create an event raiser for the specified event on this instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.EventRaiser.#ctor(Rhino.Mocks.Interfaces.IMockedObject,System.String)">
+            <summary>
+            Creates a new instance of <c>EventRaiser</c>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.EventRaiser.Raise(System.Object[])">
+            <summary>
+            Raise the event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.EventRaiser.Raise(System.Object,System.EventArgs)">
+            <summary>
+            The most common signature for events
+            Here to allow intellisense to make better guesses about how 
+            it should suggest parameters.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.MethodOptions`1">
+            <summary>
+            Allows to define what would happen when a method 
+            is called.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IMethodOptions`1">
+            <summary>
+            Allows to define what would happen when a method 
+            is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Return(`0)">
+            <summary>
+            Set the return value for the method.
+            </summary>
+            <param name="objToReturn">The object the method will return</param>
+            <returns>IRepeat that defines how many times the method will return this value</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.TentativeReturn">
+            <summary>
+            Allow to override this return value in the future
+            </summary>
+            <returns>IRepeat that defines how many times the method will return this value</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Throw(System.Exception)">
+            <summary>
+            Throws the specified exception when the method is called.
+            </summary>
+            <param name="exception">Exception to throw</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.IgnoreArguments">
+            <summary>
+            Ignores the arguments for this method. Any argument will be matched
+            againt this method.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Constraints(Rhino.Mocks.Constraints.AbstractConstraint[])">
+            <summary>
+            Add constraints for the method's arguments.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback(System.Delegate)">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback(Rhino.Mocks.Delegates.Function{System.Boolean})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``1(Rhino.Mocks.Delegates.Function{System.Boolean,``0})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``2(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``3(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``4(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``5(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``6(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``7(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``8(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``9(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Callback``10(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Do(System.Delegate)">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.WhenCalled(System.Action{Rhino.Mocks.MethodInvocation})">
+            <summary>
+            Set a delegate to be called when the expectation is matched
+            and allow to optionally modify the invocation as needed
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.CallOriginalMethod">
+            <summary>
+            Call the original method on the class, bypassing the mocking layers.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.CallOriginalMethod(Rhino.Mocks.Interfaces.OriginalCallOptions)">
+            <summary>
+            Call the original method on the class, optionally bypassing the mocking layers.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.PropertyBehavior">
+            <summary>
+            Use the property as a simple property, getting/setting the values without
+            causing mock expectations.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.SetPropertyAndIgnoreArgument">
+            <summary>
+            Expect last (property) call as property setting, ignore the argument given
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.SetPropertyWithArgument(`0)">
+            <summary>
+            Expect last (property) call as property setting with a given argument.
+            </summary>
+            <param name="argument"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.GetEventRaiser">
+            <summary>
+            Get an event raiser for the last subscribed event.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.OutRef(System.Object[])">
+            <summary>
+            Set the parameter values for out and ref parameters.
+            This is done using zero based indexing, and _ignoring_ any non out/ref parameter.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodOptions`1.Message(System.String)">
+            <summary>
+            Documentation message for the expectation
+            </summary>
+            <param name="documentationMessage">Message</param>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMethodOptions`1.Repeat">
+            <summary>
+            Better syntax to define repeats. 
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IRepeat`1">
+            <summary>
+            Allows to specify the number of time for method calls
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.Twice">
+            <summary>
+            Repeat the method twice.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.Once">
+            <summary>
+            Repeat the method once.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.AtLeastOnce">
+            <summary>
+            Repeat the method at least once, then repeat as many time as it would like.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.Any">
+            <summary>
+            Repeat the method any number of times.
+            This has special affects in that this method would now ignore orderring.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.Times(System.Int32,System.Int32)">
+            <summary>
+            Set the range to repeat an action.
+            </summary>
+            <param name="min">Min.</param>
+            <param name="max">Max.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.Times(System.Int32)">
+            <summary>
+            Set the amount of times to repeat an action.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IRepeat`1.Never">
+            <summary>
+            This method must not appear in the replay state.
+            This has special affects in that this method would now ignore orderring.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.#ctor(Rhino.Mocks.MockRepository,Rhino.Mocks.Impl.RecordMockState,Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Interfaces.IMethodOptions`1"/> instance.
+            </summary>
+            <param name="repository">the repository for this expectation</param>
+            <param name="record">the recorder for this proxy</param>
+            <param name="proxy">the proxy for this expectation</param>
+            <param name="expectation">Expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Constraints(Rhino.Mocks.Constraints.AbstractConstraint[])">
+            <summary>
+            Add constraints for the method's arguments.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback(System.Delegate)">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback(Rhino.Mocks.Delegates.Function{System.Boolean})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``1(Rhino.Mocks.Delegates.Function{System.Boolean,``0})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``2(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``3(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``4(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``5(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``6(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``7(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``8(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``9(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Callback``10(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Do(System.Delegate)">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.WhenCalled(System.Action{Rhino.Mocks.MethodInvocation})">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Return(`0)">
+            <summary>
+            Set the return value for the method.
+            </summary>
+            <param name="objToReturn">The object the method will return</param>
+            <returns>IRepeat that defines how many times the method will return this value</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.TentativeReturn">
+            <summary>
+            Set the return value for the method, but allow to override this return value in the future
+            </summary>
+            <returns>IRepeat that defines how many times the method will return this value</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Throw(System.Exception)">
+            <summary>
+            Throws the specified exception when the method is called.
+            </summary>
+            <param name="exception">Exception to throw</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.IgnoreArguments">
+            <summary>
+            Ignores the arguments for this method. Any argument will be matched
+            againt this method.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.CallOriginalMethod">
+            <summary>
+            Call the original method on the class, bypassing the mocking layers.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.CallOriginalMethod(Rhino.Mocks.Interfaces.OriginalCallOptions)">
+            <summary>
+            Call the original method on the class, optionally bypassing the mocking layers
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.PropertyBehavior">
+            <summary>
+            Use the property as a simple property, getting/setting the values without
+            causing mock expectations.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.SetPropertyAndIgnoreArgument">
+            <summary>
+            Expect last (property) call as property setting, ignore the argument given
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.SetPropertyWithArgument(`0)">
+            <summary>
+            Expect last (property) call as property setting with a given argument.
+            </summary>
+            <param name="argument"></param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.GetEventRaiser">
+            <summary>
+            Gets the event raiser for the last event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.OutRef(System.Object[])">
+            <summary>
+            Set the parameter values for out and ref parameters.
+            This is done using zero based indexing, and _ignoring_ any non out/ref parameter.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Twice">
+            <summary>
+            Repeat the method twice.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Once">
+            <summary>
+            Repeat the method once.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.AtLeastOnce">
+            <summary>
+            Repeat the method at least once, then repeat as many time as it would like.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Never">
+            <summary>
+            This method must not appear in the replay state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Message(System.String)">
+            <summary>
+            Documentation message for the expectation
+            </summary>
+            <param name="documentationMessage">Message</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Any">
+            <summary>
+            Repeat the method any number of times.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Times(System.Int32,System.Int32)">
+            <summary>
+            Set the range to repeat an action.
+            </summary>
+            <param name="min">Min.</param>
+            <param name="max">Max.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MethodOptions`1.Times(System.Int32)">
+            <summary>
+            Set the amount of times to repeat an action.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.MethodOptions`1.Repeat">
+            <summary>
+            Better syntax to define repeats. 
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.MockedObjectsEquality">
+            <summary>
+            This class will provide hash code for hashtables without needing
+            to call the GetHashCode() on the object, which may very well be mocked.
+            This class has no state so it is a singelton to avoid creating a lot of objects 
+            that does the exact same thing. See flyweight patterns.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MockedObjectsEquality.GetHashCode(System.Object)">
+            <summary>
+            Get the hash code for a proxy object without calling GetHashCode()
+            on the object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MockedObjectsEquality.Compare(System.Object,System.Object)">
+            <summary>
+            Compares two instances of mocked objects
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.MockedObjectsEquality.Equals(System.Object,System.Object)">
+            <summary>
+            Compare two mocked objects
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.MockedObjectsEquality.NextHashCode">
+            <summary>
+            The next hash code value for a mock object.
+            This is safe for multi threading.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.MockedObjectsEquality.Instance">
+            <summary>
+            The sole instance of <see cref="T:Rhino.Mocks.Impl.MockedObjectsEquality"/>
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.ProxyInstance">
+            <summary>
+            This is a dummy type that is used merely to give DynamicProxy the proxy instance that
+            it needs to create IProxy's types.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IMockedObject">
+            <summary>
+            Interface to find the repository of a mocked object
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.ShouldCallOriginal(System.Reflection.MethodInfo)">
+            <summary>
+            Return true if it should call the original method on the object
+            instead of pass it to the message chain.
+            </summary>
+            <param name="method">The method to call</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.RegisterMethodForCallingOriginal(System.Reflection.MethodInfo)">
+            <summary>
+            Register a method to be called on the object directly
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.RegisterPropertyBehaviorFor(System.Reflection.PropertyInfo)">
+            <summary>
+            Register a property on the object that will behave as a simple property
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.IsPropertyMethod(System.Reflection.MethodInfo)">
+            <summary>
+            Check if the method was registered as a property method.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.HandleProperty(System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Do get/set on the property, according to need.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.HandleEvent(System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Do add/remove on the event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.GetEventSubscribers(System.String)">
+            <summary>
+            Get the subscribers of a spesific event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.GetDeclaringType(System.Reflection.MethodInfo)">
+            <summary>
+            Gets the declaring type of the method, taking into acccount the possible generic 
+            parameters that it was created with.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.ClearState(Rhino.Mocks.BackToRecordOptions)">
+            <summary>
+            Clears the state of the object, remove original calls, property behavior, subscribed events, etc.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.GetCallArgumentsFor(System.Reflection.MethodInfo)">
+            <summary>
+            Get all the method calls arguments that were made against this object with the specificed 
+            method.
+            </summary>
+            <remarks>
+            Only method calls in replay mode are counted
+            </remarks>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMockedObject.MethodCall(System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Records the method call
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockedObject.DependentMocks">
+            <summary>
+            Mocks that are tied to this mock lifestyle
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockedObject.ProxyHash">
+            <summary>
+            The unique hash code of this mock, which is not related
+            to the value of the GetHashCode() call on the object.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockedObject.Repository">
+            <summary>
+            Gets the repository.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockedObject.ImplementedTypes">
+            <summary>
+            Gets the implemented types by this mocked object
+            </summary>
+            <value>The implemented.</value>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockedObject.ConstructorArguments">
+            <summary>
+            Gets or sets the constructor arguments.
+            </summary>
+            <value>The constructor arguments.</value>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMockedObject.MockedObjectInstance">
+            <summary>
+            The mocked instance that this is representing
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.#ctor(Rhino.Mocks.MockRepository,System.Type[])">
+            <summary>
+            Create a new instance of <see cref="T:Rhino.Mocks.Impl.ProxyInstance"/>
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.ShouldCallOriginal(System.Reflection.MethodInfo)">
+            <summary>
+            Return true if it should call the original method on the object
+            instead of pass it to the message chain.
+            </summary>
+            <param name="method">The method to call</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.RegisterMethodForCallingOriginal(System.Reflection.MethodInfo)">
+            <summary>
+            Register a method to be called on the object directly
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.RegisterPropertyBehaviorFor(System.Reflection.PropertyInfo)">
+            <summary>
+            Register a property on the object that will behave as a simple property
+            Return true if there is already a value for the property
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.IsPropertyMethod(System.Reflection.MethodInfo)">
+            <summary>
+            Check if the method was registered as a property method.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.HandleProperty(System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Do get/set on the property, according to need.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.HandleEvent(System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Do add/remove on the event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.GetEventSubscribers(System.String)">
+            <summary>
+            Get the subscribers of a spesific event
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.GetDeclaringType(System.Reflection.MethodInfo)">
+            <summary>
+            Gets the declaring type of the method, taking into acccount the possible generic 
+            parameters that it was created with.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.GetCallArgumentsFor(System.Reflection.MethodInfo)">
+            <summary>
+            Get all the method calls arguments that were made against this object with the specificed
+            method.
+            </summary>
+            <param name="method"></param>
+            <returns></returns>
+            <remarks>
+            Only method calls in replay mode are counted
+            </remarks>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.MethodCall(System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Records the method call
+            </summary>
+            <param name="method"></param>
+            <param name="args"></param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ProxyInstance.ClearState(Rhino.Mocks.BackToRecordOptions)">
+            <summary>
+            Clears the state of the object, remove original calls, property behavior, subscribed events, etc.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ProxyInstance.DependentMocks">
+            <summary>
+            Mocks that are tied to this mock lifestyle
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ProxyInstance.ProxyHash">
+            <summary>
+            The unique hash code of this proxy, which is not related
+            to the value of the GetHashCode() call on the object.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ProxyInstance.Repository">
+            <summary>
+            Gets the repository.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ProxyInstance.ConstructorArguments">
+            <summary>
+            Gets or sets the constructor arguments.
+            </summary>
+            <value>The constructor arguments.</value>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ProxyInstance.MockedObjectInstance">
+            <summary>
+            The mocked instance that this is representing
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.ProxyInstance.ImplementedTypes">
+            <summary>
+            Gets the implemented types by this mocked object
+            </summary>
+            <value>The implemented.</value>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Range">
+            <summary>
+            Range for expected method calls
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Range.#ctor(System.Int32,System.Nullable{System.Int32})">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.Range"/> instance.
+            </summary>
+            <param name="min">Min.</param>
+            <param name="max">Max.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Range.ToString">
+            <summary>
+            Return the string representation of this range.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.Range.Min">
+            <summary>
+            Gets or sets the min.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.Range.Max">
+            <summary>
+            Gets or sets the max.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RecordDynamicMockState">
+            <summary>
+            Records all the expectations for a mock and
+            return a ReplayDynamicMockState when Replay()
+            is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordDynamicMockState.#ctor(Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.MockRepository)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.RecordDynamicMockState"/> instance.
+            </summary>
+            <param name="repository">Repository.</param>
+            <param name="mockedObject">The proxy that generates the method calls</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordDynamicMockState.DoReplay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordDynamicMockState.GetDefaultCallCountRangeExpectation">
+            <summary>
+            Get the default call count range expectation
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordDynamicMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RecordPartialMockState">
+            <summary>
+            Records all the expectations for a mock and
+            return a ReplayPartialMockState when Replay()
+            is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordPartialMockState.#ctor(Rhino.Mocks.Interfaces.IMockedObject,Rhino.Mocks.MockRepository)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.RecordDynamicMockState"/> instance.
+            </summary>
+            <param name="repository">Repository.</param>
+            <param name="mockedObject">The proxy that generates the method calls</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordPartialMockState.DoReplay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RecordPartialMockState.BackToRecord">
+            <summary>
+            Gets a mock state that matches the original mock state of the object.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RepeatableOption">
+            <summary>
+            Options for special repeat option
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.RepeatableOption.Normal">
+            <summary>
+            This method can be called only as many times as the IMethodOptions.Expect allows.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.RepeatableOption.Never">
+            <summary>
+            This method should never be called
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.RepeatableOption.Any">
+            <summary>
+            This method can be call any number of times
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.RepeatableOption.OriginalCall">
+            <summary>
+            This method will call the original method
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.RepeatableOption.OriginalCallBypassingMocking">
+            <summary>
+            This method will call the original method, bypassing the mocking layer
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.Impl.RepeatableOption.PropertyBehavior">
+            <summary>
+            This method will simulate simple property behavior
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.ReplayDynamicMockState">
+            <summary>
+            Validate all expectations on a mock and ignores calls to
+            any method that was not setup properly.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayDynamicMockState.#ctor(Rhino.Mocks.Impl.RecordDynamicMockState)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.ReplayDynamicMockState"/> instance.
+            </summary>
+            <param name="previousState">The previous state for this method</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayDynamicMockState.DoMethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayDynamicMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.ReplayPartialMockState">
+            <summary>
+            Validate all expectations on a mock and ignores calls to
+            any method that was not setup properly.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayPartialMockState.#ctor(Rhino.Mocks.Impl.RecordPartialMockState)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.ReplayDynamicMockState"/> instance.
+            </summary>
+            <param name="previousState">The previous state for this method</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayPartialMockState.DoMethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.ReplayPartialMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.RhinoInterceptor">
+            <summary>
+            Summary description for RhinoInterceptor.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RhinoInterceptor.#ctor(Rhino.Mocks.MockRepository,Rhino.Mocks.Interfaces.IMockedObject,System.Collections.Generic.IEnumerable{Rhino.Mocks.Impl.Invocation.InvocationVisitor})">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.Impl.RhinoInterceptor"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.RhinoInterceptor.Intercept(Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            Intercept a method call and direct it to the repository.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.Validate">
+            <summary>
+            Validate arguments for methods
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Validate.IsNotNull(System.Object,System.String)">
+            <summary>
+            Validate that the passed argument is not null.
+            </summary>
+            <param name="obj">The object to validate</param>
+            <param name="name">The name of the argument</param>
+            <exception cref="T:System.ArgumentNullException">
+            If the obj is null, an ArgumentNullException with the passed name
+            is thrown.
+            </exception>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Validate.ArgsEqual(System.Object[],System.Object[])">
+            <summary>
+            Validate that the arguments are equal.
+            </summary>
+            <param name="expectedArgs">Expected args.</param>
+            <param name="actualArgs">Actual Args.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Validate.AreEqual(System.Object,System.Object)">
+            <summary>
+            Validate that the two arguments are equals, including validation for
+            when the arguments are collections, in which case it will validate their values.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.Validate.SafeEquals(System.Object,System.Object)">
+            <summary>
+            This method is safe for use even if any of the objects is a mocked object
+            that override equals.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Impl.VerifiedMockState">
+            <summary>
+            Throw an object already verified when accessed
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.#ctor(Rhino.Mocks.Interfaces.IMockState)">
+            <summary>
+            Create a new instance of VerifiedMockState 
+            </summary>
+            <param name="previous">The previous mock state, used to get the initial record state</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.MethodCall(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Add a method call for this state' mock.
+            </summary>
+            <param name="invocation">The invocation for this method</param>
+            <param name="method">The method that was called</param>
+            <param name="args">The arguments this method was called with</param>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.Verify">
+            <summary>
+            Verify that this mock expectations have passed.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.Replay">
+            <summary>
+            Verify that we can move to replay state and move 
+            to the reply state.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.BackToRecord">
+            <summary>
+            Gets a mock state that match the original mock state of the object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.GetLastMethodOptions``1">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.SetExceptionToThrowOnVerify(System.Exception)">
+            <summary>
+            Set the exception to throw when Verify is called.
+            This is used to report exception that may have happened but where caught in the code.
+            This way, they are reported anyway when Verify() is called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Impl.VerifiedMockState.NotifyCallOnPropertyBehavior">
+            <summary>
+            not relevant
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.VerifiedMockState.VerifyState">
+            <summary>
+            Gets the matching verify state for this state
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Impl.VerifiedMockState.LastMethodOptions">
+            <summary>
+            Get the options for the last method call
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Interfaces.IMethodRecorder">
+            <summary>
+            Records the actions on all the mocks created by a repository.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.Record(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Records the specified call with the specified args on the mocked object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.GetRecordedExpectation(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Get the expectation for this method on this object with this arguments 
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.GetRepeatableExpectation(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            This check the methods that were setup using the SetupResult.For()
+            or LastCall.Repeat.Any() and that bypass the whole expectation model.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.GetAllExpectationsForProxyAndMethod(System.Object,System.Reflection.MethodInfo)">
+            <summary>
+            Gets the all expectations for a mocked object and method combination,
+            regardless of the expected arguments / callbacks / contraints.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <param name="method">Method.</param>
+            <returns>List of all relevant expectation</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.GetAllExpectationsForProxy(System.Object)">
+            <summary>
+            Gets the all expectations for proxy.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <returns>List of all relevant expectation</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.RemoveAllRepeatableExpectationsForProxy(System.Object)">
+            <summary>
+            Removes all the repeatable expectations for proxy.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.ReplaceExpectation(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Replaces the old expectation with the new expectation for the specified proxy/method pair.
+            This replace ALL expectations that equal to old expectations.
+            </summary>
+            <param name="proxy">Proxy.</param>
+            <param name="method">Method.</param>
+            <param name="oldExpectation">Old expectation.</param>
+            <param name="newExpectation">New expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.AddRecorder(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Adds the recorder and turn it into the active recorder.
+            </summary>
+            <param name="recorder">Recorder.</param>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.MoveToPreviousRecorder">
+            <summary>
+            Moves to previous recorder.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.GetRecordedExpectationOrNull(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Gets the recorded expectation or null.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.GetExpectedCallsMessage">
+            <summary>
+            Gets the next expected calls string.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.MoveToParentReplayer">
+            <summary>
+            Moves to parent recorder.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.AddToRepeatableMethods(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Set the expectation so it can repeat any number of times.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.RemoveExpectation(Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Removes the expectation from the recorder
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.ClearReplayerToCall(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Clear the replayer to call (and all its chain of replayers)
+            This also removes it from the list of expectations, so it will never be considered again
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Interfaces.IMethodRecorder.UnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Get the expectation for this method on this object with this arguments 
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Interfaces.IMethodRecorder.HasExpectations">
+            <summary>
+            Gets a value indicating whether this instance has expectations that weren't satisfied yet.
+            </summary>
+            <value>
+            	<c>true</c> if this instance has expectations; otherwise, <c>false</c>.
+            </value>
+        </member>
+        <member name="T:Rhino.Mocks.LastCall">
+            <summary>
+            Allows to set various options for the last method call on
+            a specified object.
+            If the method has a return value, it's recommended to use Expect
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.On(System.Object)">
+            <summary>
+            Allows to get an interface to work on the last call.
+            </summary>
+            <param name="mockedInstance">The mocked object</param>
+            <returns>Interface that allows to set options for the last method call on this object</returns>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Return``1(``0)">
+            <summary>
+            Set the return value for the method.
+            </summary>
+            <param name="objToReturn">The object the method will return</param>
+            <returns>IRepeat that defines how many times the method will return this value</returns>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Return(System.Object)">
+            <summary>
+            Set the return value for the method. This overload is needed for LastCall.Return(null)
+            </summary>
+            <param name="objToReturn">The object the method will return</param>
+            <returns>IRepeat that defines how many times the method will return this value</returns>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Throw(System.Exception)">
+            <summary>
+            Throws the specified exception when the method is called.
+            </summary>
+            <param name="exception">Exception to throw</param>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.IgnoreArguments">
+            <summary>
+            Ignores the arguments for this method. Any argument will be matched
+            againt this method.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Constraints(Rhino.Mocks.Constraints.AbstractConstraint[])">
+            <summary>
+            Add constraints for the method's arguments.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback(System.Delegate)">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback(Rhino.Mocks.Delegates.Function{System.Boolean})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``1(Rhino.Mocks.Delegates.Function{System.Boolean,``0})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``2(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``3(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``4(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``5(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``6(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``7(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``8(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``9(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Callback``10(Rhino.Mocks.Delegates.Function{System.Boolean,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
+            <summary>
+            Set a callback method for the last call
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.CallOriginalMethod">
+            <summary>
+            Call the original method on the class, bypassing the mocking layers, for the last call.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.CallOriginalMethod(Rhino.Mocks.Interfaces.OriginalCallOptions)">
+            <summary>
+            Call the original method on the class, optionally bypassing the mocking layers, for the last call.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Do(System.Delegate)">
+            <summary>
+            Set a delegate to be called when the expectation is matched.
+            The delegate return value will be returned from the expectation.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.GetEventRaiser">
+            <summary>
+            Gets an interface that will raise the last event when called.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.OutRef(System.Object[])">
+            <summary>
+            Set the parameter values for out and ref parameters.
+            This is done using zero based indexing, and _ignoring_ any non out/ref parameter.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.Message(System.String)">
+            <summary>
+            Documentation message for the expectation
+            </summary>
+            <param name="documentationMessage">Message</param>
+        </member>
+        <member name="M:Rhino.Mocks.LastCall.PropertyBehavior">
+            <summary>
+            Use the property as a simple property, getting/setting the values without
+            causing mock expectations.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.LastCall.Repeat">
+            <summary>
+            Better syntax to define repeats. 
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.MethodRecorders.MethodRecorderBase">
+            <summary>
+            Base class for method recorders, handle delegating to inner recorder if needed.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.recordedActions">
+            <summary>
+            List of the expected actions on for this recorder
+            The legal values are:
+            	* Expectations
+            	* Method Recorders
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.recorderToCall">
+            <summary>
+            The current recorder.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.replayerToCall">
+            <summary>
+            The current replayer;
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.parentRecorder">
+            <summary>
+            The parent recorder of this one, may be null.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.replayersToIgnoreForThisCall">
+            <summary>
+            This contains a list of all the replayers that should be ignored
+            for a spesific method call. A replayer gets into this list by calling 
+            ClearReplayerToCall() on its parent. This list is Clear()ed on each new invocation.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.repeatableMethods">
+            <summary>
+            All the repeatable methods calls.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.MethodRecorderBase.recursionDepth">
+            <summary>
+            Counts the recursion depth of the current expectation search stack
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.#ctor(Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.MethodRecorderBase"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.#ctor(Rhino.Mocks.Interfaces.IMethodRecorder,Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.MethodRecorderBase"/> instance.
+            </summary>
+            <param name="parentRecorder">Parent recorder.</param>
+            <param name="repeatableMethods">Repeatable methods</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.Record(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Records the specified call with the specified args on the mocked object.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.GetRecordedExpectation(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Get the expectation for this method on this object with this arguments 
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.GetAllExpectationsForProxyAndMethod(System.Object,System.Reflection.MethodInfo)">
+            <summary>
+            Gets the all expectations for a mocked object and method combination,
+            regardless of the expected arguments / callbacks / contraints.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <param name="method">Method.</param>
+            <returns>List of all relevant expectation</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.GetAllExpectationsForProxy(System.Object)">
+            <summary>
+            Gets the all expectations for proxy.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <returns>List of all relevant expectation</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.ReplaceExpectation(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Replaces the old expectation with the new expectation for the specified proxy/method pair.
+            This replace ALL expectations that equal to old expectations.
+            </summary>
+            <param name="proxy">Proxy.</param>
+            <param name="method">Method.</param>
+            <param name="oldExpectation">Old expectation.</param>
+            <param name="newExpectation">New expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.RemoveAllRepeatableExpectationsForProxy(System.Object)">
+            <summary>
+            Remove the all repeatable expectations for proxy.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.AddToRepeatableMethods(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Set the expectation so it can repeat any number of times.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.RemoveExpectation(Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Removes the expectation from the recorder
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.AddRecorder(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Adds the recorder and turn it into the active recorder.
+            </summary>
+            <param name="recorder">Recorder.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.MoveToPreviousRecorder">
+            <summary>
+            Moves to previous recorder.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.MoveToParentReplayer">
+            <summary>
+            Moves to parent recorder.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.GetRecordedExpectationOrNull(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Gets the recorded expectation or null.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.ClearReplayerToCall(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Clear the replayer to call (and all its chain of replayers).
+            This also removes it from the list of expectations, so it will never be considered again
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.UnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Get the expectation for this method on this object with this arguments 
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.GetExpectedCallsMessage">
+            <summary>
+            Gets the next expected calls string.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoGetRecordedExpectationOrNull(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Handles the real getting of the recorded expectation or null.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoRecord(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoGetRecordedExpectation(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoGetAllExpectationsForProxy(System.Object)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoReplaceExpectation(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoRemoveExpectation(Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoAddRecorder(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.ShouldConsiderThisReplayer(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Should this replayer be considered valid for this call?
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.MethodRecorderBase.GetRepeatableExpectation(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            This check the methods that were setup using the SetupResult.For()
+            or LastCall.Repeat.Any() and that bypass the whole expectation model.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.MethodRecorderBase.HasExpectations">
+            <summary>
+            Gets a value indicating whether this instance has expectations that weren't satisfied yet.
+            </summary>
+            <value>
+            	<c>true</c> if this instance has expectations; otherwise, <c>false</c>.
+            </value>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.MethodRecorderBase.DoHasExpectations">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder">
+            <summary>
+            Ordered collection of methods, methods must arrive in specified order
+            in order to pass.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder">
+            <summary>
+            Unordered collection of method records, any expectation that exist
+            will be matched.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.parentRecorderRedirection">
+            <summary>
+            The parent recorder we have redirected to.
+            Useful for certain edge cases in orderring.
+            See: FieldProblem_Entropy for the details.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.#ctor(Rhino.Mocks.Interfaces.IMethodRecorder,Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder"/> instance.
+            </summary>
+            <param name="parentRecorder">Parent recorder.</param>
+            <param name="repeatableMethods">Repeatable methods</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.#ctor(Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoRecord(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Records the specified call with the specified args on the mocked object.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <param name="method">Method.</param>
+            <param name="expectation">Expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoGetRecordedExpectation(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Get the expectation for this method on this object with this arguments 
+            </summary>
+            <param name="invocation">Invocation for this method</param>
+            <param name="proxy">Mocked object.</param>
+            <param name="method">Method.</param>
+            <param name="args">Args.</param>
+            <returns>True is the call was recorded, false otherwise</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.GetAllExpectationsForProxyAndMethod(System.Object,System.Reflection.MethodInfo)">
+            <summary>
+            Gets the all expectations for a mocked object and method combination,
+            regardless of the expected arguments / callbacks / contraints.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <param name="method">Method.</param>
+            <returns>List of all relevant expectation</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoGetAllExpectationsForProxy(System.Object)">
+            <summary>
+            Gets the all expectations for proxy.
+            </summary>
+            <param name="proxy">Mocked object.</param>
+            <returns>List of all relevant expectation</returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoReplaceExpectation(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Replaces the old expectation with the new expectation for the specified proxy/method pair.
+            This replace ALL expectations that equal to old expectations.
+            </summary>
+            <param name="proxy">Proxy.</param>
+            <param name="method">Method.</param>
+            <param name="oldExpectation">Old expectation.</param>
+            <param name="newExpectation">New expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoRemoveExpectation(Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoGetRecordedExpectationOrNull(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Handles the real getting of the recorded expectation or null.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoAddRecorder(Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Handle the real execution of this method for the derived class
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.GetExpectedCallsMessage">
+            <summary>
+            Gets the next expected calls string.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.UnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Create an exception for an unexpected method call.
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.UnorderedMethodRecorder.DoHasExpectations">
+            <summary>
+            Gets a value indicating whether this instance has expectations that weren't satisfied yet.
+            </summary>
+            <value>
+            	<c>true</c> if this instance has expectations; otherwise, <c>false</c>.
+            </value>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder.#ctor(Rhino.Mocks.Interfaces.IMethodRecorder,Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder"/> instance.
+            </summary>
+            <param name="parentRecorder">Parent recorder.</param>
+            <param name="repeatableMethods">Repetable methods</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder.#ctor(Rhino.Mocks.Generated.ProxyMethodExpectationsDictionary)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder.DoGetRecordedExpectationOrNull(System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Handles the real getting of the recorded expectation or null.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder.UnexpectedMethodCall(Castle.Core.Interceptor.IInvocation,System.Object,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Get the expectation for this method on this object with this arguments 
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.OrderedMethodRecorder.GetExpectedCallsMessage">
+            <summary>
+            Gets the next expected calls string.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet">
+            <summary>
+            Hold an expectation for a method call on an object
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet.#ctor(System.Object,System.Reflection.MethodInfo,Rhino.Mocks.Interfaces.IExpectation)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet"/> instance.
+            </summary>
+            <param name="proxy">Proxy.</param>
+            <param name="method">Method.</param>
+            <param name="expectation">Expectation.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet.Equals(System.Object)">
+            <summary>
+            Determines if the object equal to this instance
+            </summary>
+            <param name="obj">Obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet.GetHashCode">
+            <summary>
+            Gets the hash code.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet.Proxy">
+            <summary>
+            Gets the proxy.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet.Method">
+            <summary>
+            Gets the method.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.ProxyMethodExpectationTriplet.Expectation">
+            <summary>
+            Gets the expectation.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.MethodRecorders.ProxyMethodPair">
+            <summary>
+            Holds a pair of mocked object and a method
+            and allows to compare them against each other.
+            This allows us to have a distinction between mockOne.MyMethod() and
+            mockTwo.MyMethod()...
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.ProxyMethodPair.#ctor(System.Object,System.Reflection.MethodInfo)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.ProxyMethodPair"/> instance.
+            </summary>
+            <param name="proxy">Proxy.</param>
+            <param name="method">Method.</param>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.ProxyMethodPair.Equals(System.Object)">
+            <summary>
+            Determines whatever obj equals to this instance.
+            ProxyMethodPairs are equal when they point to the same /instance/ of
+            an object, and to the same method.
+            </summary>
+            <param name="obj">Obj.</param>
+            <returns></returns>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.ProxyMethodPair.GetHashCode">
+            <summary>
+            Gets the hash code.
+            </summary>
+            <returns></returns>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.ProxyMethodPair.Proxy">
+            <summary>
+            Gets the proxy.
+            </summary>
+            <value></value>
+        </member>
+        <member name="P:Rhino.Mocks.MethodRecorders.ProxyMethodPair.Method">
+            <summary>
+            Gets the method.
+            </summary>
+            <value></value>
+        </member>
+        <member name="T:Rhino.Mocks.MethodRecorders.RecorderChanger">
+            <summary>
+            Change the recorder from ordered to unordered and vice versa
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.RecorderChanger.#ctor(Rhino.Mocks.MockRepository,Rhino.Mocks.Interfaces.IMethodRecorder,Rhino.Mocks.Interfaces.IMethodRecorder)">
+            <summary>
+            Creates a new <see cref="T:Rhino.Mocks.MethodRecorders.RecorderChanger"/> instance.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.MethodRecorders.RecorderChanger.Dispose">
+            <summary>
+            Disposes this instance.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Mocker">
+            <summary>
+            Accessor for the current mocker
+            </summary>
+        </member>
+        <member name="P:Rhino.Mocks.Mocker.Current">
+            <summary>
+            The current mocker
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.RhinoMocks">
+            <summary>
+            Used for [assembly: InternalsVisibleTo(RhinoMocks.StrongName)]
+            Used for [assembly: InternalsVisibleTo(RhinoMocks.NormalName)]
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.RhinoMocks.StrongName">
+            <summary>
+            Strong name for the Dynamic Proxy assemblies. Used for InternalsVisibleTo specification.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.RhinoMocks.NormalName">
+            <summary>
+            Normal name for dynamic proxy assemblies. Used for InternalsVisibleTo specification.
+            </summary>
+        </member>
+        <member name="F:Rhino.Mocks.RhinoMocks.Logger">
+            <summary>
+            Logs all method calls for methods
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.SetupResult">
+            <summary>
+            Setup method calls to repeat any number of times.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.SetupResult.For``1(``0)">
+            <summary>
+            Get the method options and set the last method call to repeat 
+            any number of times.
+            This also means that the method would transcend ordering
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.SetupResult.On(System.Object)">
+            <summary>
+            Get the method options for the last method call on the mockInstance and set it
+            to repeat any number of times.
+            This also means that the method would transcend ordering
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Utilities.MethodCallUtil">
+            <summary>
+            Utility class for working with method calls.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Utilities.MethodCallUtil.StringPresentation(Castle.Core.Interceptor.IInvocation,Rhino.Mocks.Utilities.MethodCallUtil.FormatArgumnet,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Return the string representation of a method call and its arguments.
+            </summary>
+            <param name="method">The method</param>
+            <param name="args">The method arguments</param>
+            <param name="invocation">Invocation of the method, used to get the generics arguments</param>
+            <param name="format">Delegate to format the parameter</param>
+            <returns>The string representation of this method call</returns>
+        </member>
+        <member name="M:Rhino.Mocks.Utilities.MethodCallUtil.StringPresentation(Castle.Core.Interceptor.IInvocation,System.Reflection.MethodInfo,System.Object[])">
+            <summary>
+            Return the string representation of a method call and its arguments.
+            </summary>
+            <param name="invocation">The invocation of the method, used to get the generic parameters</param>
+            <param name="method">The method</param>
+            <param name="args">The method arguments</param>
+            <returns>The string representation of this method call</returns>
+        </member>
+        <member name="T:Rhino.Mocks.Utilities.MethodCallUtil.FormatArgumnet">
+            <summary>
+            Delegate to format the argument for the string representation of
+            the method call.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Utilities.ReturnValueUtil">
+            <summary>
+            Utility to get the default value for a type
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.Utilities.ReturnValueUtil.DefaultValue(System.Type,Castle.Core.Interceptor.IInvocation)">
+            <summary>
+            The default value for a type.
+            Null for reference types and void
+            0 for value types.
+            First element for enums
+            Note that we need to get the value even for opened generic types, such as those from
+            generic methods.
+            </summary>
+            <param name="type">Type.</param>
+            <param name="invocation">The invocation.</param>
+            <returns>the default value</returns>
+        </member>
+        <member name="T:Rhino.Mocks.With">
+            <summary>
+            Allows easier access to MockRepository, works closely with Mocker.Current to
+            allow access to a context where the mock repository is automatially verified at
+            the end of the code block.
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.With.Mocks(Rhino.Mocks.With.Proc)">
+            <summary>
+            Initialize a code block where Mocker.Current is initialized.
+            At the end of the code block, all the expectation will be verified.
+            This overload will create a new MockRepository.
+            </summary>
+            <param name="methodCallThatHasMocks">The code that will be executed under the mock context</param>
+        </member>
+        <member name="M:Rhino.Mocks.With.Mocks(Rhino.Mocks.MockRepository,Rhino.Mocks.With.Proc)">
+            <summary>
+            Initialize a code block where Mocker.Current is initialized.
+            At the end of the code block, all the expectation will be verified.
+            This overload will create a new MockRepository.
+            </summary>
+            <param name="mocks">The mock repository to use, at the end of the code block, VerifyAll() will be called on the repository.</param>
+            <param name="methodCallThatHasMocks">The code that will be executed under the mock context</param>
+        </member>
+        <member name="M:Rhino.Mocks.With.Mocks(Rhino.Mocks.MockRepository)">
+            <summary>
+            Create a FluentMocker
+            </summary>
+            <param name="mocks">The mock repository to use.</param>
+        </member>
+        <member name="T:Rhino.Mocks.With.Proc">
+            <summary>
+            A method with no arguments and no return value that will be called under the mock context.
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.With.FluentMocker">
+            <summary>
+            FluentMocker implements some kind of fluent interface attempt
+            for saying "With the Mocks [mocks], Expecting (in same order) [things] verify [that]."
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.With.IMockVerifier">
+            <summary>
+            Interface to verify previously defined expectations
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.With.IMockVerifier.Verify(Rhino.Mocks.With.Proc)">
+            <summary>
+            Verifies if a piece of code
+            </summary>
+        </member>
+        <member name="M:Rhino.Mocks.With.FluentMocker.Expecting(Rhino.Mocks.With.Proc)">
+            <summary>
+            Defines unordered expectations
+            </summary>
+            <param name="methodCallsDescribingExpectations">A delegate describing the expectations</param>
+            <returns>an IMockVerifier</returns>
+        </member>
+        <member name="M:Rhino.Mocks.With.FluentMocker.ExpectingInSameOrder(Rhino.Mocks.With.Proc)">
+            <summary>
+            Defines ordered expectations
+            </summary>
+            <param name="methodCallsDescribingExpectations">A delegate describing the expectations</param>
+            <returns>an IMockVerifier</returns>
+        </member>
+        <member name="M:Rhino.Mocks.With.FluentMocker.Verify(Rhino.Mocks.With.Proc)">
+            <summary>
+            Verifies previously defined expectations
+            </summary>
+        </member>
+        <member name="T:Rhino.Mocks.Function`2">
+            <summary>
+            This delegate is compatible with the System.Func{T,R} signature
+            We have to define our own to get compatability with 2.0
+            </summary>
+        </member>
+        <member name="T:__ProtectAttribute">
+            <summary>
+            This attribute is here so we can get better Pex integration
+            Using this means that Pex will not try to inspect the work of 
+            the actual proxies being generated by Rhino Mocks
+            </summary>
+        </member>
+    </members>
+</doc>
diff --git a/Yea.RuleEngine.Tests/Rhino Mocks/acknowledgements.txt b/Yea.RuleEngine.Tests/Rhino Mocks/acknowledgements.txt
new file mode 100644
index 0000000..01af4c1
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Rhino Mocks/acknowledgements.txt	
@@ -0,0 +1,2 @@
+Rhino Mocks is using Castle Dynamic Proxy (http://www.castleproject.org/dynamicproxy/index.html) to handle proxying the types it needs to mock.
+The Dynamic Proxy project has been invaluable resource and made creating Rhino Mocks possible.
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Rhino Mocks/license.txt b/Yea.RuleEngine.Tests/Rhino Mocks/license.txt
new file mode 100644
index 0000000..011d415
--- /dev/null
+++ b/Yea.RuleEngine.Tests/Rhino Mocks/license.txt	
@@ -0,0 +1,25 @@
+Copyright (c) 2005 - 2009 Ayende Rahien (ayende@ayende.com)
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice,
+    this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+    and/or other materials provided with the distribution.
+    * Neither the name of Ayende Rahien nor the names of its
+    contributors may be used to endorse or promote products derived from this
+    software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/Yea.RuleEngine.Tests/Yea.RuleEngine.Tests.csproj b/Yea.RuleEngine.Tests/Yea.RuleEngine.Tests.csproj
index 321322c..cfd2261 100644
--- a/Yea.RuleEngine.Tests/Yea.RuleEngine.Tests.csproj
+++ b/Yea.RuleEngine.Tests/Yea.RuleEngine.Tests.csproj
@@ -42,6 +42,10 @@
     <Reference Include="Machine.Specifications.Clr4">
       <HintPath>..\packages\Machine.Specifications.0.5.12\lib\net40\Machine.Specifications.Clr4.dll</HintPath>
     </Reference>
+    <Reference Include="Rhino.Mocks, Version=3.6.0.0, Culture=neutral, PublicKeyToken=0b3305902db7183f, processorArchitecture=MSIL">
+      <SpecificVersion>False</SpecificVersion>
+      <HintPath>Rhino Mocks\Rhino.Mocks.dll</HintPath>
+    </Reference>
     <Reference Include="System" />
   </ItemGroup>
   <Choose>
@@ -53,8 +57,25 @@
     <Otherwise />
   </Choose>
   <ItemGroup>
+    <Compile Include="Machine.Specifications.AutoMocking\Core\Extensions\TypeExtensions.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\IDependencyBag.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\IMockFactory.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\ISubjectDependencyBuilder.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\ISubjectFactory.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\ITestState.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\Observations\IObservationContext.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\Observations\ObservationContext.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\Observations\ObservationContextArgs.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\Observations\ObservationContextFactory.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\SubjectDependencyBuilder.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\SubjectFactory.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Core\TestState.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Rhino\RhinoMocksMockFactory.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Rhino\Specification.cs" />
+    <Compile Include="Machine.Specifications.AutoMocking\Specification.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="IntegrationTests.cs" />
+    <Compile Include="ReviewbyHao\求源\AccountSpecs.cs" />
     <Compile Include="RuleBaseTests.cs" />
     <Compile Include="RuleDefinitionTests.cs" />
     <Compile Include="RuleEngineTests.cs" />
@@ -72,6 +93,13 @@
       <Name>Yea.RuleEngine</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <Content Include="Rhino Mocks\acknowledgements.txt" />
+    <Content Include="Rhino Mocks\license.txt" />
+    <Content Include="Rhino Mocks\Rhino.Mocks.dll" />
+    <Content Include="Rhino Mocks\Rhino.Mocks.pdb" />
+    <Content Include="Rhino Mocks\Rhino.Mocks.xml" />
+  </ItemGroup>
   <Choose>
     <When Condition="'$(VisualStudioVersion)' == '10.0' And '$(IsCodedUITest)' == 'True'">
       <ItemGroup>
-- 
1.8.0.msysgit.0

